===========
Quick Start
===========

.. default-domain:: mongodb

Check for Node and NPM
----------------------

Ensure your system has Node greater than or equal to version 8 and
NPM (Node Package Manager) installed. You can verify whether you have Node and
NPM installed by executing the following in your terminal.

First, check the version of Node

.. code-block:: sh

   node -v

You should see output similar to the following:

.. code-block:: sh

   v12.14.1

Next, check the version of NPM

.. code-block:: sh

   npm -v

You should see output similar to the following:

.. code-block:: sh

   6.13.4

If you do not see any output, you will need to install Node and NPM.
Refer to `nodejs.org <https://nodejs.org>`_ for installation instructions.


Initialize the Project
----------------------

The starting point for any Node application is initializing your project. Navigate
to a new directory and initialize a new project.

.. code-block:: sh

  mkdir node_quickstart
  cd node_quickstart
  npm init -y

.. admonition:: Why the -y?
  :class: note

  Specifying ``-y`` tells NPM to use default values. You can omit the ``-y``
  flag to proceed through an interactive selection process for common project
  settings.



Add MongoDB as a Dependency
---------------------------

Next, add the Node MongoDB driver as a project dependency. Use the ``--save``
flag to save the dependency to ``package.json`` file that was automatically
generated in the previous step.

.. code-block:: sh

  npm install --save mongodb

NPM will download dependencies and output information to your terminal. After
installing, you will have a ``node_modules`` directory added to your workspace.


Create a Free Tier Cluster in Atlas
-----------------------------------

The easiest way to get started with MongoDB is by using `MongoDB Atlas <https://mongodb.com/cloud/atlas>`_.
Atlas doesn't require a credit card to sign up, and offers free-tier deployments that are free for life.
Follow along with our :atlas:`Getting Started with Atlas <getting-started>` guide
to create a free account and deploy a free-tier cluster, then :atlas:`load sample data <sample-data/load-sample-data/>` to
get the data necessary for the rest of this guide.


Security Matters
----------------

Security matters, even in this quick start. We'll use an NPM module called ``dotenv``
to help us hide our secrets. ``dotenv`` allows us to easily read in environmental variables
that we define in a local file called ``.env``. We'll add this file to our ``.gitignore``
to ensure we don't accidentally commit secrets, in this case our connection information,
to our version control system.

To add ``dotenv`` to our project and create the necessary files, enter the following
in your terminal:

.. code-block:: sh

  npm install --save dotenv
  touch .env
  echo ".env" >> .gitignore
  echo "MONGODB_URI=<your_atlas_uri>" >> .env



Add your Atlas Connection String
--------------------------------


Open your newly created ``.env`` file. You may have to set your system to display
hidden files. Once your ``.env`` is open, copy and paste your connection string
from Atlas, replacing ``<your_atlas_uri>``. Ensure you update ``<username>`` and
``<password>`` in your connection string.

Connect to your Cluster
-----------------------

The final step is to create a file in your project directory called ``index.js``.

.. code-block:: sh

  touch index.js

Open this file in your preferred editor, such as `Visual Studio Code <https://code.visualstudio.com/Download>`_, and
paste in the following code. This will serve as the base for other steps in this guide.

.. code-block:: js

  const { MongoClient } = require("mongodb");
  require("dotenv").config();

  if (!process.env.MONGODB_URI) {
    throw Error("MONGODB_URI not defined in a .env file. Did you set it up?");
  }

  const client = new MongoClient(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  });

  async function run() {
    try {
      // Connect the client to the server
      await client.connect();
      // Establish and verify connection
      await client.db("admin").command({ ping: 1 });
      console.log("Successfully connected to Atlas.");
      // your code after this comment

      // your code before this comment
    } finally {
      // Ensures that the client will close when you finish/error
      await client.close();
    }
  }
  run().catch(console.dir);

Run the script with the following command from your terminal:

.. code-block:: sh

  node index.js

You should see the output **Successfully connected to Atlas**
