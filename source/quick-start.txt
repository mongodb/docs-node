.. _node-quickstart:

===========
Quick Start
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This guide shows you how to create an application that uses the
{+driver-long+} to connect to a MongoDB cluster hosted on MongoDB Atlas. If
you prefer to connect to MongoDB using a different driver or programming
language, see our :driver:`list of official drivers <>`.

The {+driver-short+} is a library you can use to connect to and communicate
with MongoDB.

MongoDB Atlas is a fully managed cloud database service that hosts your
MongoDB servers. You can get started with your own free (no credit card
required) MongoDB instance with this guide.

Follow the steps below to connect a sample Node.js application to a MongoDB
instance on MongoDB Atlas.

Set up Your Project
-------------------

Install Node and npm
~~~~~~~~~~~~~~~~~~~~

Ensure you have Node.js v12 or later and npm (Node Package Manager) installed
in your development environment.

For information on how to install Node.js and npm, see
`downloading and installing Node.js and npm <https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`__.

Select the :guilabel:`Clone the Project` tab if you want to build your
project from a premade dependency file or the :guilabel:`Create the Project`
tab if you want to create the project dependency file yourself.

.. tabs::

   .. tab:: Clone the Project
      :tabid: clone the project

      Ensure you have git installed in your development environment.

      For information on how to install git, see `Git - Getting Started Guide <https://git-scm.com/book/en/v2/Getting-Started-Installing-Git>`__.

      Then, from your shell, clone the `js-starter repository
      <https://github.com/mongodb-university/js-starter>`__:

      .. code-block:: bash

         git clone --branch v{+version+} https://github.com/mongodb-university/js-starter.git

      Next, navigate into the repository:

      .. code-block:: bash

         cd js-starter

      Then, install the {+driver-short+}:

      .. code-block:: bash

         npm install

      This command performs the following actions:

      - Downloads and saves the ``mongodb`` package in a directory
        called ``node_modules``
      - Installs ``eslint``, which the project uses to identify and
        report issues in your code
      - Installs ``prettier``, which the project uses to format your code

   .. tab:: Create the Project
      :tabid: create the project

      First, in your shell, create a directory for your project:

      .. code-block:: bash

         mkdir node_quickstart

      Then, navigate into that directory:

      .. code-block:: bash

         cd node_quickstart

      Next, initialize your project:

      .. code-block:: bash

         npm init -y

      .. tip:: Why the -y?

         If you specify the ``-y`` option in the command, npm uses the
         default values for your project settings. If you want to
         interactively select your project settings, omit the ``-y`` flag.

      Then, install the {+driver-short+}:

      .. code-block:: bash

         npm install mongodb@{+version+}

      This command performs the following actions:

      - Downloads the ``mongodb`` package and the dependencies it requires
      - Saves the package in the ``node_modules`` directory
      - Records the dependency information in the ``package.json`` file

At this point, you are ready to use the {+driver-short+} with your
application.

.. procedure::
   :style: connected

   .. step:: Create a Free Tier Cluster in Atlas

      Create a free tier MongoDB cluster on MongoDB Atlas to store and manage
      your data. MongoDB Atlas hosts and manages your MongoDB database in the
      cloud. Complete the :atlas:`Get Started with Atlas </getting-started?tck=docs_driver_nodejs>`
      guide to set up a new Atlas account, a free tier cluster (a shared
      MongoDB instance) and load sample data into your cluster.

   .. step:: Connect to your Cluster

      You can connect to your MongoDB cluster by providing a
      **connection string** which instructs the driver on where and how to
      connect. The connection string includes information on the hostname
      or IP address and port of your cluster, the authentication mechanism,
      user credentials when applicable, and other connection options.

      To connect to an instance or cluster not hosted on Atlas, see
      :ref:`Other Ways to Connect to MongoDB <node-other-ways-to-connect>`.

      To retrieve your connection string for the cluster you created in
      the previous step, log into your Atlas account and navigate to the
      :guilabel:`Database` section and click the :guilabel:`Connect` button
      for the cluster that you want to connect to as shown below.

      .. figure:: /includes/figures/atlas_connection_select_cluster.png
         :alt: The connect button in the clusters section of the Atlas UI

      Proceed to the :guilabel:`Connect Your Application` section and select
      the {+driver-short+}. Select the :guilabel:`Connection String Only` tab
      and click the :guilabel:`Copy` button to copy the connection string to
      your clipboard as shown below.

      .. figure:: /includes/figures/atlas_connection_copy_string_node.png
         :alt: The connection string copy button in the Connection String Only tab of the Atlas UI

      Save your connection string to a safe location.

   .. step:: Create your Node.js Application

      Create a file to contain your application called ``index.js`` in your
      project directory. Add the following code, assigning the ``uri``
      variable the value of your connection string.


      .. code-block:: js

        const { MongoClient } = require("mongodb");

        // Replace the uri string with your connection string.
        const uri =
          "mongodb+srv://<user>:<password>@<cluster-url>?retryWrites=true&writeConcern=majority";

        const client = new MongoClient(uri);

        async function run() {
          try {
            const database = client.db('sample_mflix');
            const movies = database.collection('movies');

            // Query for a movie that has the title 'Back to the Future'
            const query = { title: 'Back to the Future' };
            const movie = await movies.findOne(query);

            console.log(movie);
          } finally {
            // Ensures that the client will close when you finish/error
            await client.close();
          }
        }
        run().catch(console.dir);

      .. tip::

         The preceding code example assigns the ``MongoClient`` variable using
         :mdn:`object destructuring <Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring>`,
         introduced in Node.js v6. You can create an instance of a
         ``MongoClient`` without using object destructuring as shown in the
         following code:

         .. code-block:: js

            const MongoClient = require("mongodb").MongoClient;

   .. step:: Run your Node.js Application

      Run the application you created from the previous step from the
      command line:

      .. code-block:: none

         node index.js

      You should see the details of the retrieved movie document in the output:

      .. code-block:: none

         {
           _id: ...,
           plot: 'A young man is accidentally sent 30 years into the past...',
           genres: [ 'Adventure', 'Comedy', 'Sci-Fi' ],
           ...
           title: 'Back to the Future',
           ...
         }

      If you encounter an error or no output, check whether you specified the
      proper connection string in the application code, and loaded the sample
      data set in your Atlas cluster.

      At this point, you should have a working application that uses
      the {+driver-short+} to connect to your MongoDB instance, runs a query
      on the sample data, and prints out the result.

Next Steps
----------

Learn how to read and modify data using the {+driver-short+} in our
:ref:`CRUD Operations <node-crud-landing>` guide or how to perform common
operations in our :ref:`Usage Examples <node-usage-examples>`.
