===========
Quick Start
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This guide shows you how to create an application that uses the Node.js
driver to connect to a MongoDB Atlas cluster.

Check for Node and NPM
----------------------

Ensure your system has Node version 8 or later and NPM (Node Package
Manager) installed. Run the following commands to check that you meet
these requirements:

First, check the version of Node:

.. code-block:: sh

   node -v

You should see output similar to the following:

.. code-block:: sh

   v12.14.1

Next, check the version of NPM:

.. code-block:: sh

   npm -v

You should see output similar to the following:

.. code-block:: sh

   6.13.4

If you do not see any output or encounter an error, you will need to
install Node and NPM. Visit `nodejs.org <https://nodejs.org>`_ for
installation instructions.

Initialize the Project
----------------------

Now that our system meets the Node driver's requirements, we can
create a new project.

First, create a directory for your project:

.. code-block:: sh

  mkdir node_quickstart

Then, navigate into that directory so you can work directly with your
project's files:

.. code-block:: sh

  cd node_quickstart

Finally, initialize npm:

.. code-block:: sh

  npm init -y

.. admonition:: Why the -y?
  :class: note

  Specifying ``-y`` tells NPM to use default values. You can omit the
  ``-y`` flag to proceed through an interactive selection process for
  common project settings.

Add MongoDB as a Dependency
---------------------------

Next, add the Node MongoDB driver as a project dependency. Use the
``--save`` flag to save the dependency to the ``package.json`` file that
was automatically generated in the previous step.

.. code-block:: sh

  npm install --save mongodb

NPM downloads the dependencies required for installation and saves them
into a directory called ``node_modules`` in your project directory.

Create a Free Tier Cluster in Atlas
-----------------------------------

You can easily get started with MongoDB with :atlas:`MongoDB Atlas
<tutorial/create-atlas-account>`, which offers instances of MongoDB
hosted in the cloud. Atlas doesn't require a credit card to
sign up, and offers free-tier deployments that are free for life. Follow
along with our :atlas:`steps to create and set up a free-tier cluster
<tutorial/create-atlas-account/>`, then :atlas:`load sample data
<sample-data/load-sample-data/>` to run the examples in this guide.

Store Configuration Separately
------------------------------

You can store your application configuration separately for security
and convenience. We use the `dotenv
<https://www.npmjs.com/package/dotenv>`_ NPM module to store our
configuration data in a separate local file called ``.env``. If you are
using git source control, add the ``.env`` file to your ``.gitignore``
entries to prevent accidentally sharing contents such as database
credentials.

First, add ``dotenv`` to your project:

.. code-block:: sh

  npm install --save dotenv

Next, create the ``.env`` file and add a variable called
``MONGODB_URI``:

.. code-block:: sh

  touch .env
  echo "MONGODB_URI=<connection_uri>" >> .env

Add your Atlas Connection String
--------------------------------

Open your newly created ``.env`` file. If you are unable to locate this
file in your project directory, you may need to set your system to
display hidden files. Once your ``.env`` is open, replace
``<connection_uri>`` with your connection string from Atlas. Ensure you
update ``<username>`` and ``<password>`` in your connection string.

Connect to your Cluster
-----------------------

For the final step, we'll write some code that tests your environment's
connection to your instance of MongoDB.

Create a file in your project directory called ``index.js``:

.. code-block:: sh

  touch index.js

Open this file and paste in the following code:

.. code-block:: js

  const { MongoClient } = require("mongodb");
  require("dotenv").config();

  if (!process.env.MONGODB_URI) {
    throw Error("MONGODB_URI not defined in a .env file. Did you set it up?");
  }

  const client = new MongoClient(process.env.MONGODB_URI, {
    useUnifiedTopology: true
  });

  async function run() {
    try {
      // Connect the client to the server
      await client.connect();
      // Establish and verify connection
      await client.db("admin").command({ ping: 1 });
      console.log("Successfully connected to Atlas.");
      // your code after this comment

      // your code before this comment
    } finally {
      // Ensures that the client will close when you finish/error
      await client.close();
    }
  }
  run().catch(console.dir);

Run the script with the following command from your terminal:

.. code-block:: sh

  node index.js

You should see the output **Successfully connected to Atlas.**

Next Steps
----------

Learn how to read and modify data in our :doc:`CRUD fundamentals
</fundamentals/crud>` guide, or how to perform common operations in our
:doc:`usage examples </usage-examples>`.
