.. _node-upgrade-driver:

=======================
Upgrade Driver Versions
=======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

On this page, you can learn about any changes you might need to make to
your application to upgrade your driver to a new version without loss of
functionality.

Before you upgrade, perform the following actions:

- Ensure the new driver version is compatible with the {+mdb-server+} version
  your application connects to and the version of Node.js that your
  application runs on. See the :ref:`<node-compatibility>`
  page for this information.
- Address any breaking changes between the version of the driver
  your application currently uses and your planned upgrade version in the
  :ref:`<node-breaking-changes>` section of this guide. To learn
  more about the {+mdb-server+} release compatibility changes, see the 
  :ref:`<node-server-support-changes>` section.

.. tip::

   You can minimize the amount of changes that you need to make to your
   application when upgrading driver versions by using the
   :ref:`{+stable-api+} <nodejs-stable-api>`.

.. _node-breaking-changes:

Breaking Changes
----------------

A breaking change is a modification in a convention or behavior in
a specific version of the driver that may prevent your application from
working as expected.

The breaking changes in this section are categorized by the major
version releases that introduced them. When upgrading driver versions,
address all the breaking changes between your current version and the
planned upgrade version.

.. _node-breaking-changes-v4.x:

Version 4.x Breaking Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Driver versions 4.x are not compatible with Node.js
  v12.8 or earlier. If you want to use this version of the driver, You must
  use Node.js v12.9 or greater.

- ``Cursor`` types no longer extend ``Readable`` directly.

- You cannot use a ``ChangeStream`` instance as an iterator after using
  it as an ``EventEmitter``. You also cannot do the reverseâ€”using an
  ``EventEmitter`` instance as an iterator after using it as a ``ChangeStream``.

- The following methods no longer accept a callback parameter:

  - ``Collection.find()``
  - ``Collection.aggregate()``
  - ``Db.aggregate()``

- The default value of the ``maxPoolSize`` connection option is now
  ``100``.

- The driver no longer supports the ``gssapiServiceName`` Kerberos
  option. Users should use ``authMechanismProperties.SERVICE_NAME`` instead.

- The driver no longer accepts non-boolean types, such as ``0`` or
  ``1``, for boolean options.

- The ``db.collection`` type no longer accepts a callback.

- The ``Db`` type is no longer an ``EventEmitter``. You can listen to
  any events directly from the ``MongoClient`` instance.

- The driver removes support for the ``Collection.group()`` helper.

- The driver no longer includes the deprecated ``GridStore`` API.

For more information about these changes, see
`the v4.0 changelog <https://github.com/mongodb/node-mongodb-native/blob/main/etc/notes/CHANGES_4.0.0.md>`__.

.. _node-server-support-changes:

Server Release Compatibility Changes
------------------------------------

A server release compatibility change is a modification
to the driver that discontinues support for a set of
{+mdb-server+} versions.

The driver discontinues support for a {+mdb-server+} version after it reaches
end-of-life (EOL).

To learn more about the MongoDB support for EOL products,
see the `Legacy Support Policy <https://www.mongodb.com/support-policy/legacy>`__.

Version 4.2 Server Release Support Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- The v4.2 driver drops support for {+mdb-server+} v3.4 and earlier.
  To use the v4.2 driver, your {+mdb-server+} must be v3.6 or later. To learn
  how to upgrade your {+mdb-server+} to v3.6, follow the link that corresponds
  to your MongoDB deployment configuration:

  - :ref:`<3.6-upgrade-replica-set>`
  - :ref:`<3.6-upgrade-standalone>`
  - :ref:`<3.6-upgrade-sharded-cluster>`