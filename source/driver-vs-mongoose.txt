.. _node-driver-vs-mongoose:

Comparing the Node.js Driver and Mongoose
=========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol


Overview
--------

On this page, you can learn about the comparison between
the official MongoDB Node.js driver and the third-party library called
Mongoose.

The MongoDB Node.js official driver is a library of functions used to
connect to and communicate with MongoDB. 

Moongoose is a popular community-developed Object-Document Mapper (ODM)
library that is built on top of the {+driver-short+}. Though you don't
need to use an ODM tool to work with MongoDB, some developers prefer
them as it is similar to working with a relational database. 

Schema Validation
-----------------

Both the {+driver-long+} and Mongoose let you apply schema validation
to your collection. However, the biggest difference between the two are
the way they each set and manage schema validation.

The {+driver-long+} applies the schema validation at the database
level. In comparison, Mongoose applies schema validation at the application level. In the
{+driver-short+} schema validation works on individual collections by
using either `JSON Schema Validation <https://www.mongodb.com/docs/manual/core/schema-validation/specify-json-schema/>`__
or `Schema Validation with Query Operators <https://www.mongodb.com/docs/manual/core/schema-validation/specify-query-expression-rules/>`__.
Validation with query operators is useful for dynamic validation rules
calculated at runtime. By contrast, JSON validation is useful for, among other
reasons, being an open standard which makes it easy to connect to
third-party libraries.

Mongoose applies the schema validation in a twofold procedure; firstly by telling your
application what data types and fields are allowed to be in a particular
collection, then it confirms the data matches the set criteria. Mongoose's
schema validation works on the application level, meaning MongoDB
doesn't know it exists.

.. tip::
   
   Though Mongoose can be more efficient to create schemas,
   the {+driver-long+} is generally twice as fast at reading and writing
   operations. This means for larger, more performance-intensive
   projects the {+driver-short+} is likely the better option.

Similarities
------------

As Mongoose is built upon the {+driver-long+}, they share many
capabilities. Even if you use Mongoose, you always have the option to
use any native function or command built into the {+driver-short+}
alongside Mongoose. Mongoose also offers its own methods that are quite
similar to the {+driver-short+}, such as ``updateOne()`` and
``replaceOne()``, though these methods work differently under the hood.

.. tip::
   
   There are many other Mongoose specific methods not discussed. For
   more information on how to use Mongoose, check out the official `Mongoose
   documentation <https://mongoosejs.com/docs/>`__.

Differences
-----------
Though MongoDB was designed with a flexible data model in mind, Mongoose
forces a semi-rigid ``schema`` from the beginning. With Mongoose, developers
must define a ``schema`` and ``model``. Moreover, the handling of read
and write operations differs between the two, resulting in the
{+driver-short+} generally running twice as fast as Mongoose. 

Conclusion
----------

Both Mongoose and the {+driver-long+} offer comparable features
and capabilities. Mongoose helps ease MongoDB development for
newcomers while the {+driver-long+} seamlessly integrates with your MongoDB
database, providing an exceptional and adaptable development experience.
By leveraging the driver, you enable your database to excel at its core
functionality.
   
.. tip::
   
   To learn how to start using the {+driver-long+}, visit the
   :ref:`Quick Start guide <node-quickstart>`. To learn how to get
   started with Mongoose, see the `Getting Started with MongoDB &
   Mongoose
   <https://www.mongodb.com/developer/languages/javascript/getting-started-with-mongodb-and-mongoose/>`__
   page and the `Mongoose ODM with MongoDB Learning Byte
   <https://learn.mongodb.com/learn/course/mongoose-odm-with-mongodb/learning-byte/learn>`__.