.. _node-aggregation:
.. _nodejs-aggregation:

===========
Aggregation
===========

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: node.js, code example, runnable app

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::

   Filtered Subset </aggregation/filtered-subset/>
   Group & Total </aggregation/group-total/>
   Unpack Arrays & Group </aggregation/unpack-arrays/>
   One-to-One Join </aggregation/one-to-one-join/>
   Multi-Field Join </aggregation/multi-field-join/>

.. _nodejs-aggregation-overview:

Overview
--------

In this guide, you can learn how to use the MongoDB Node.js Driver to perform
**aggregation operations**.

Aggregation operations process data in your MongoDB collections and return
reduced and summarized results. The MongoDB Aggregation framework is modeled on the 
concept of data processing pipelines. Documents enter a pipeline comprised of one or
more stages, and this pipeline transforms the documents into an aggregated result.

Analogy
~~~~~~~

The aggregation pipeline is similar to an automobile factory assembly line. An
assembly lines has stations with specialized tools that are used to perform
specific tasks. For example, when building a car, the assembly line begins with
a frame. As the car frame moves though the assembly line, each station adds a
new part. The factory transforms and assembles the initial parts, resulting in
finished cars.

The *aggregation pipeline* is the assembly line, the *aggregation stages* are
the assembly stations, and the *expression operators* are the specialized tools.

Compare Aggregation and Find Operations
---------------------------------------

The following table lists the different tasks you can perform with find
operations compared to what you can achieve with aggregation
operations. The aggregation framework provides expanded functionality
that allows you to transform and manipulate your data.

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Find Operations
     - Aggregation Operations

   * - | Select *certain* documents to return
       | Select *which* fields to return
       | Sort the results
       | Limit the results
       | Count the results
     - | Select *certain* documents to return
       | Select *which* fields to return
       | Sort the results
       | Limit the results
       | Count the results
       | Group the results
       | Rename fields
       | Compute new fields
       | Summarize data
       | Connect and merge data sets

Server Limitations
------------------

Consider the following :manual:`limitations </core/aggregation-pipeline-limits/>` when performing aggregation operations:

- Returned documents must not violate the :manual:`BSON document size limit </reference/limits/#mongodb-limit-BSON-Document-Size>`
  of 16 megabytes.

- Pipeline stages have a memory limit of 100 megabytes by default. If required,
  you can exceed this limit by enabling the `AllowDiskUse
  <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.AggregateOptions.AllowDiskUse.html#MongoDB_Driver_AggregateOptions_AllowDiskUse>`__
  property of the ``AggregateOptions`` object that you pass to the
  ``Aggregate()`` method. 

- The :manual:`$graphLookup </reference/operator/aggregation/graphLookup/>` stage has a strict memory
   limit of 100 megabytes and will ignore the ``AllowDiskUse`` property.

Aggregation Example
-------------------

To perform an aggregation, pass a list of aggregation stages to the
``collection.aggregate()`` method.

.. note::
  
   This example uses the ``sample_restaurants.restaurants`` collection
   from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
   free MongoDB Atlas cluster and load the sample datasets, see the :ref:`Get Started <node-get-started>` guide.

The following code example produces a count of the number of bakeries in each borough
of New York City. To do so, the aggregation pipeline uses the following aggregation stages:

- A :manual:`$match </reference/operator/aggregation/match/>` stage to filter
  for documents whose ``cuisine`` field contains the element ``Bakery``.

- A :manual:`$group </reference/operator/aggregation/group/>` stage to group the
  matching documents by the ``borough`` field, accumulating a count of documents
  for each distinct value in the ``borough`` field.

.. literalinclude:: /code-snippets/aggregation/agg.js
   :start-after: begin aggregation
   :end-before: end aggregation
   :language: javascript
   :dedent:

This example produces the following output:

.. code-block:: json
   :copyable: false

   { _id = Bronx, Count = 71 }
   { _id = Brooklyn, Count = 173 }
   { _id = Staten Island, Count = 20 }
   { _id = Missing, Count = 2 }
   { _id = Manhattan, Count = 221 }
   { _id = Queens, Count = 204 }

Additional information
----------------------

MongoDB Server Manual
~~~~~~~~~~~~~~~~~~~~~

To view a full list of expression operators, see 
:manual:`Aggregation Operators </reference/operator/aggregation/>`.

To learn more about assembling an aggregation pipeline and view examples, see
:manual:`Aggregation Pipeline </core/aggregation-pipeline/>`.

To learn more about creating pipeline stages and view examples, see 
:manual:`Aggregation Stages </reference/operator/aggregation-pipeline/>`.

To learn about explaining MongoDB aggregation operations, see
:manual:`Explain Results </reference/explain-results/>` and
:manual:`Query Plans </core/query-plans/>`.

API Documentation
~~~~~~~~~~~~~~~~~

For more information about the aggregation operations discussed in this guide, see the
following API documentation:

- `Collection() <https://mongodb.github.io/node-mongodb-native/api-generated/collection.html?highlight=match#:~:text=(index)%20%C2%BB-,Collection,-()%C2%B6>`__
- `aggregate() <https://mongodb.github.io/node-mongodb-native/api-generated/collection.html?highlight=aggregate#aggregate:~:text=%7D)%0A%20%20%7D)%3B%0A%7D)%3B-,aggregate,-%C2%B6>`__
.. try to find $match and $group api links ..