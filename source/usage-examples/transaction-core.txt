.. _node-usage-core-txn:

================
Use the Core API
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The {+driver-short+} provides the Core API and the Convenient
Transaction API to perform transactions. This usage example provides
sample code that uses the **Core API**.

.. seealso::
   
   To learn more about the performing transactions in the
   {+driver-short+}, see the :ref:`nodejs-transactions` guide.

   To learn how to use the Convenient Transaction API to perform transactions, see the
   :ref:`node-usage-convenient-txn` usage example.

.. _nodejs-transaction-examples:

Example
-------

Consider a situation in which a customer purchases items from your online
store. To record the purchase, your application must update
your inventory and the customer's orders. Your
application also needs to register the order details.

The following table describes the collections that store purchase data
and how a purchase changes the data in each collection.

.. list-table::
   :widths: 25 25 50
   :header-rows: 1

   * - Collection
     - Operation
     - Description of the Change

   * - ``orders``
     - insert
     - Insert a document that describes the order

   * - ``customers``
     - update or upsert
     - Append the ``_id`` from the order document to the order history
       in the customer document

   * - ``inventory``
     - update
     - Update the quantities of items available after a purchase

A purchase can fail for the following reasons:

- Insufficient inventory for an item
- An order could not be completed
- The system went offline

If the payment fails, you can perform a transaction that includes all of
the data changes to ensure you avoid making any partial updates that
might cause data consistency issues for future operations.

Sample Data
~~~~~~~~~~~

The code examples use the following sample data in the ``testdb``
database:

- Documents in the ``customers`` collection that describe customers and
  their past orders
- Documents in the ``inventory`` collection that include quantities and
  descriptions of all items

The following document is in the ``customers`` collection:

.. code-block:: json

   { _id: 98765, orders: [] }

The following documents are in the ``inventory`` collection:

.. code-block:: json

   { item: "sunblock", item_id: 5432, qty: 85 },
   { item: "beach towel", item_id: 7865, qty: 41 }

You store purchase records in the ``orders`` collection of the
``testdb`` database. This collection is empty, as there have been no
purchases.

The code examples use the ``cart`` and ``payment`` variables to represent
a sample list of items purchased and the order payment details. The
following code describes the contents of the ``cart`` and ``payment`` variables:

.. code-block:: javascript

   const cart = [
     { item: 'sunblock', item_id: 5432, qty: 1, price: 5.19 },
     { item: 'beach towel', item_id: 7865, qty: 2, price: 15.99 }
   ];
   const payment = { customer: 98765, total: 37.17 };

.. _nodejs-transaction-core-api-example:

Implementation
~~~~~~~~~~~~~~

The code example in this section demonstrates how to use the Core API to
perform a multi-document transaction in a session. In this example, the
transaction reflects the actions needed when a customer purchases items from
your store.

This example code performs a transaction through the following actions:

1. Calls the ``startSession()`` method to create a new session.

#. Calls the ``startTransaction()`` method with an options parameter to
   create a new transaction.

#. Performs the following operations within the transaction:

   * Inserts a document to the ``orders`` collection that contains information
     about the customer, items purchased, and order total.
   * Checks if there is sufficient inventory to fulfill the purchase.
   * Returns an error message if the items are not available or there
     are not enough items.
   * If the inventory is sufficient for the order, the code performs an
     update operation in the ``inventory`` collection to reduce the
     quantities of the items purchased.
   * Adds the ID of the order to the list of past orders for the customer.
   * Returns a message acknowledging that the transaction
     committed successfully with a copy of the purchase record.

#. Calls the ``commitTransaction()`` method to commit the transaction if
   all operations complete successfully.

#. Implements a ``catch`` block that contains error-handling logic.

#. Calls the ``abortTransaction()`` method to terminate the transaction.

#. Calls the ``endSession()`` method to terminate the session.

.. literalinclude:: /code-snippets/transactions/txn-core.js
   :language: javascript
   :linenos:
   :emphasize-lines: 2-6,8,10,19,33,44,46,50-54,58,60
   :start-after: start placeOrder
   :end-before: end placeOrder

.. _nodejs-transaction-example-payment-result:

Transaction Results
~~~~~~~~~~~~~~~~~~~

When your application completes the payment transaction, the collections
in the database should contain the customer and order updates. 
If an error interrupts the transaction, none of the changes should be
visible in your database.

The ``customers`` collection should contain the customer document with an
order ``_id`` appended to the orders field:

.. code-block:: json
   :copyable: false

   {
     "_id": 98765,
     "orders": [
       "61dc..."
     ]
   }

The ``inventory`` collection should contain updated quantities for the
items ``"sunblock"`` and ``"beach towel"``:

.. code-block:: json
   :copyable: false

   [
     {
       "_id": ...,
       "item": "sunblock",
       "item_id": 5432,
       "qty": 84
     },
     {
       "_id": ...,
       "item": "beach towel",
       "item_id": 7865,
       "qty": 39
     }
   ]

The ``orders`` collection should contain the order and payment
information:

.. code-block:: json
   :copyable: false

   [
     {
       "_id": "...",
       "customer": 98765,
       "items": [
         {
           "item": "sunblock",
           "item_id": 5432,
           "qty": 1,
           "price": 5.19
         },
         {
           "item": "beach towel",
           "item_id": 7865,
           "qty": 2,
           "price": 15.99
         }
       ],
       "total": 37.17
     }
   ]

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
usage example, see the following API Documentation:

- `TransactionOptions <{+api+}/interfaces/TransactionOptions.html>`__
- `ClientSession <{+api+}/classes/ClientSession.html>`__
- `startSession() <{+api+}/classes/MongoClient.html#startSession>`__
- `startTransaction() <{+api+}/classes/ClientSession.html#startTransaction>`__
- `commitTransaction() <{+api+}/classes/ClientSession.html#commitTransaction>`__
- `abortTransaction() <{+api+}/classes/ClientSession.html#abortTransaction>`__
- `endSession() <{+api+}/classes/ClientSession.html#endSession>`__
