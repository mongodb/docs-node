.. _node-usage-core-txn:

================
Use the Core API
================

The {+driver-short+} provides the Core API and the Convenient
Transaction API to perform transactions. This usage example provides
sample code that uses the **Core API**.

.. seealso::
   
   To learn more about the transaction APIs available in the
   {+driver-short+}, see the :ref:`nodejs-transactions` guide.

.. _nodejs-transaction-examples:

Example
-------

Consider a situation in which a customer purchases items from your online
store. To record the purchase, your application must update
your inventory and the customer's orders. Your
application also needs to register the order details.

The following table describes the collections that store purchase data
and how a purchase changes the data in each collection.

.. list-table::
   :widths: 25 25 50
   :header-rows: 1

   * - Collection
     - Operation
     - Description of the Change

   * - ``orders``
     - insert
     - Insert a document that describes the order

   * - ``customers``
     - update or upsert
     - Append the ``_id`` from the order document to the order history
       in the customer document

   * - ``inventory``
     - update
     - Update the quantities of items available after a purchase

A purchase can fail for the following reasons:

- Insufficient inventory for an item
- An order could not be completed
- The system went offline

If the payment fails, you can perform a transaction that includes all of
the data changes to ensure you avoid making any partial updates that
might cause data consistency issues for future operations.

Sample Data
~~~~~~~~~~~

The code examples use the following sample data in the ``testdb``
database:

- Documents in the ``customers`` collection that describe customers and
  their past orders
- Documents in the ``inventory`` collection that include quantities and
  descriptions of all items

The following document is in the ``customers`` collection:

.. code-block:: json

   { _id: 98765, orders: [] }

The following documents are in the ``inventory`` collection:

.. code-block:: json

   { item: "sunblock", item_id: 5432, qty: 85 },
   { item: "beach towel", item_id: 7865, qty: 41 }

You store purchase records in the ``orders`` collection of the
``testdb`` database. This collection is empty, as there have been no
purchases.

The code examples use the ``cart`` and ``payment`` variables to represent
a sample list of items purchased and the order payment details. The
following code describes the contents of the ``cart`` and ``payment`` variables:

.. code-block:: javascript

   const cart = [
     { item: 'sunblock', item_id: 5432, qty: 1, price: 5.19 },
     { item: 'beach towel', item_id: 7865, qty: 2, price: 15.99 }
   ];
   const payment = { customer: 98765, total: 37.17 };

.. _nodejs-transaction-core-api-example:

Implementation
~~~~~~~~~~~~~~

The code example in this section demonstrates how to use the Core API to
perform a multi-document transaction in a session. In this example, the
transaction reflects the actions needed when a customer purchases items from
your store.

This example code performs a transaction through the following actions:

1. Calls the ``withSession()`` method on the client to implicitly create
   the session and include the transaction within this session.

#. Calls the ``withTransaction()`` method on the session to create a
   transaction, run the specified operations, and commit the
   transaction. If the transaction fails, this method ends the
   transaction and returns an error message.

#. Performs the following operations within the transaction:

   * To process a predefined ``order`` variable that specifies the item and
     quantity that the customer wants, the first operation checks if there
     sufficient inventory to fulfill the purchase.
   * If the items are not available or there are not enough items, the
     transaction ends and the function returns an error message.
   * If the inventory is sufficient for the order, the code performs an
     update operation in the ``inventory`` collection to reduce the
     quantities of the items purchased.
   * The code inserts a record of the purchase to the ``records``
     collection that includes a timestamp, a list of the purchased
     items, and a total price for the purchase.
   * The code returns a message acknowledging that the transaction
     committed successfully with a copy of the purchase record.

#. Prints the return type of ``withSession()``, which is either the
   error message or the acknowledgment that the transaction completed.

.. literalinclude:: /code-snippets/transactions/txn-core.js
   :language: javascript
   :linenos:
   :emphasize-lines: 2-6,8,10,19,32,41,49,51,55-59,63,65
   :start-after: start placeOrder
   :end-before: end placeOrder

.. _nodejs-transaction-example-payment-result:

Results
~~~~~~~

When your application completes the payment transaction, the collections
in the database should contain the customer and order updates. 
If an error interrupts the transaction, none of the changes should be
visible in your database.

The ``customers`` collection should contain the customer document with an
order ``_id`` appended to the orders field:

.. code-block:: json
   :copyable: false

   {
     "_id": 98765,
     "orders": [
       "61dc..."
     ]
   }

The ``inventory`` collection should contain updated quantities for the
items ``"sunblock"`` and ``"beach towel"``:

.. code-block:: json
   :copyable: false

   [
     {
       "_id": ...,
       "item": "sunblock",
       "item_id": 5432,
       "qty": 84
     },
     {
       "_id": ...,
       "item": "beach towel",
       "item_id": 7865,
       "qty": 39
     }
   ]

The ``orders`` collection should contain the order and payment
information:

.. code-block:: json
   :copyable: false

   [
     {
       "_id": "...",
       "customer": 98765,
       "items": [
         {
           "item": "sunblock",
           "item_id": 5432,
           "qty": 1,
           "price": 5.19
         },
         {
           "item": "beach towel",
           "item_id": 7865,
           "qty": 2,
           "price": 15.99
         }
       ],
       "total": 37.17
     }
   ]

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
usage example, see the following API Documentation:

- `withSession() <{+api+}/classes/MongoClient.html#withSession>`__
- `withTransaction() <{+api+}/classes/ClientSession.html#withTransaction>`__
- `abortTransaction() <{+api+}/classes/ClientSession.html#abortTransaction>`__"