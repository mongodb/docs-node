=================
Delete a Document
=================

.. default-domain:: mongodb

.. note::
   If you specify a callback method, ``deleteOne()`` returns nothing. If you
   do not specify one, this method returns a ``Promise`` that resolves to the
   result object when it completes. See our guide on :doc:`Promises and
   Callbacks </fundamentals/promises>` for more information, or the
   :node-api-3.6:`API documentation <Collection.html#~deleteWriteOpResult>` for
   information on the result object.

You can delete a single document in a collection with
``collection.deleteOne()``.
The ``deleteOne()`` method uses a query document that you provide
to match the subset of the documents in the collection that match
the query. If you do not provide a query document (or if you provide an
empty document), MongoDB matches all documents in the collection and
deletes the first match.

You can specify additional query options using the
``options`` object passed as the second parameter of the
``deleteOne`` method. You can also pass a
:node-api-3.6:`callback method <Collection.html#~deleteWriteOpCallback>`
as an optional third parameter. For more information on this method,
see the
:node-api-3.6:`deleteOne() API documentation <Collection.html#deleteOne>`.

.. note::

  If your application requires the deleted document after deletion,
  consider using the
  :node-api-3.6:`collection.findOneAndDelete()
  <Collection.html#findOneAndDelete>`.
  method, which has a similar interface to ``deleteOne()`` but also
  returns the deleted document.

Example
-------

The following snippet deletes a single document from the ``movies``
collection. It uses a **query document** that configures the query
to match only movies with a title of type ``string``.

.. include:: /includes/connect-guide-note.rst

.. literalinclude:: /code-snippets/usage-examples/deleteOne.js
  :language: javascript
