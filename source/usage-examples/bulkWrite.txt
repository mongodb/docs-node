=======================
Perform Bulk Operations
=======================

.. default-domain:: mongodb

:node-api:`collection.bulkWrite <Collection.html#bulkWrite>` lets you
perform bulk write operations against a *single* collection. With
``collection.bulkWrite()``, you specify a list of operations to perform
and MongoDB then executes those operations in bulk. Bulk write supports
``insertOne``, ``updateOne``, ``updateMany``, ``deleteOne``,
``deleteMany``, and ``replaceOne`` operations. Refer to the method
documentation for full details.

``bulkWrite()`` accepts the following parameters:

- ``operations``: specifies the bulk operations to
  perform. Pass each operation to ``bulkWrite()`` as an object in
  an array.

- ``options``: *optional* settings that affect the execution
  of the operation, such as :manual:`write concern
  </reference/write-concern>` and order.

  By default, MongoDB executes bulk operations one-by-one in the
  specified order (i.e. serially). During an ordered bulk write, if
  an error occurs during the processing of an operation, MongoDB returns
  without processing the remaining operations in the list. In contrast,
  when ``ordered`` is ``false``, MongoDB continues to process remaining
  write operations in the list. Unordered operations are faster as
  MongoDB can execute the operations in parallel, but the results of the
  operation may vary. For example, a ``deleteOne`` operation run before
  an ``updateMany`` operation might have a different result from running
  it after the ``updateMany``. Refer to :manual:`Execution of Operations
  </reference/method/db.collection.bulkWrite/#execution-of-operations>`
  for more information.

- ``callback``: command result callback. Like other collection methods,
  ``bulkWrite()`` returns a Promise if you do not specify a callback.
  The Promise resolves to a :node-api:`bulkWriteOpCallback
  <Collection.html#~bulkWriteOpCallback>` object containing the
  result of the operation.

``bulkWrite()`` returns a ``BulkWriteResult`` object
that includes the number of updated or inserted documents, the ``_id``
of each document, and any ``writeError`` or ``writeConcernErrors``.
Refer to the documentation for :node-api:`BulkWriteResult
</BulkWriteResult>` for more information.

If you create an index with a :manual:`unique constraint
</core/index-unique>`, you might encounter a duplicate key write error
during an operation. The following example shows a duplicate key error
encountered when two of the users in the inserted sample dataset had the
same email address.

.. code-block:: sh

   Error during bulkWrite, BulkWriteError: E11000 duplicate key error collection: sample_mflix.users index: email_1 dup key: { : "rita_91@example.com" }

Similarly, if you attempt to perform a bulk write against a collection
that uses :manual:`schema validation </core/schema-validation>`, you may
encounter warnings or errors related to the formatting of inserted or
modified documents.

Example
-------

The following code sample performs a bulk write operation against the
``users`` collection in the ``sample_mflix`` database. Specifically, the
program formats the data from a ``users.json`` source file to perform a
series of ``insertOne`` operations with the ``bulkWrite()`` collection
method. Download the dataset here: `users.json
<https://raw.githubusercontent.com/mongodb-university/universal-driver-examples/master/users.json>`_.

Documents in the ``users`` collection have ``email``, ``password``,
and ``name`` fields, as well as the generated ``_id`` field.
``users.json`` contains an array of objects that map directly to the
existing fields in the collection, as in the following:

.. code-block:: javascript

   {
     "email" : "marieconrad@example.com",
     "password" : "450f6704710dcf8033157978f7fbdfde",
     "name" : "Marie Conrad"
   }

.. include:: /includes/connect-guide-note.rst

.. literalinclude:: /code-snippets/usage-examples/bulkWrite-example.js
   :language: javascript


