=======================
Perform Bulk Operations
=======================

.. default-domain:: mongodb

Overview
--------

MongoDB provides clients the ability to perform write operations in bulk.
Bulk operations affect a *single* collection.

The following code sample performs a bulk write operation against the
``users`` collection in the ``sample_mflix`` database. Specifically, the
program uses the :node-api:`collection.bulkWrite
<Collection.html#bulkWrite>` method and ``insertOne`` operations to write
the user information from a ``users.json`` file to the ``users``
collection. Download the dataset here: `users.json <https://raw.githubusercontent.com/mongodb-university/universal-driver-examples/master/users.json>`_

``bulkWrite()`` accepts the following parameters:

- ``operations`` (``Array.<object>``): specifies the bulk operations to
  perform. Each operation is passed to ``bulkWrite()`` as an object in
  an array.

- ``options`` (``object``): *optional* settings that affect the execution
  of the operation, such as :manual:`write concern
  </reference/write-concern>` and order.

  By default, MongoDB executes bulk operations in the specified order
  (i.e. serially). When executing operations in order, if an error occurs
  during the processing MongoDB returns without processing any of the
  remaining operations in the list. In contrast, when ``ordered`` is
  ``false``, MongoDB continues to process remaining write operations in
  the list. Unordered operations are faster as MongoDB can execute the
  operations in parallel, but the results of the operation may vary. For
  example, a ``deleteOne`` operation run before an ``updateMany``
  operation might have a different result from running it after the
  ``updateMany``. Refer to :ref:`Execution of Operations
  <bulkwrite-write-operations-executionofoperations>` for more
  information.

- ``callback`` (``bulkWriteOpCallback``): *optional* command result
  callback. If you do not pass a callback, the command returns a promise.

Example
-------

``users.json`` is an array of objects that resemble the following:

.. code-block:: javascript

   { 
     "email" : "marieconrad@example.com",
     "password" : "450f6704710dcf8033157978f7fbdfde",
     "name" : "Marie Conrad"
   }

The existing documents in the ``users`` collection also contain ``email``,
``password``, and ``name`` fields.

.. literalinclude:: /code-snippets/usage-examples/bulkWrite-example.js
   :language: javascript

The ``BulkWriteResult`` object returned includes the number of updated or
inserted documents, the ``_id`` of each document, and any ``writeError`` or
``writeConcernErrors``. Ordered operations stop after encountering a
write error. In this unordered example, if MongoDB encounters a write error,
MongoDB reports the error upon completion of the remaining items in the list.
Refer to the documentation for
:node-api:`BulkWriteResult </BulkWriteResult>` for more information.

If you create an index with a :ref:`unique constraint
<index-type-unique>`, you might encounter a duplicate key write error
during an operation. The following example shows a duplicate key error
encountered when two of the users in the inserted sample dataset had the
same email address. 

.. code-block:: sh

   Error during bulkWrite, BulkWriteError: E11000 duplicate key error collection: sample_mflix.users index: email_1 dup key: { : "rita_91@example.com" }

Similarly, if you attempt to perform a bulk write against a  collection
that uses :manual:`schema validation </core/schema-validation>`, you may
encounter warnings or errors related to the formatting of inserted or modified
documents.
