==================
Replace a Document
==================

.. default-domain:: mongodb

You can replace a single document using the
:node-api:`collection.replaceOne() <Collection.html#replaceOne>` method.
``replaceOne()`` accepts a query document and a replacement document. If
the query matches a document in the collection, it replaces the first
document that matches the query with the provided replacement document.
This operation removes all fields and values in the original document and
replaces them with the fields and values in the replacement document. The
value of the ``_id`` field remains the same unless you explicitly specify
a new value for ``_id`` in the replacement document.

You can specify additional options, such as ``upsert``, using the
optional ``options`` parameter. If you set the ``upsert`` option field to
``true`` the method inserts a new document if no document matches the query.

The ``replaceOne()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that resolves to an
:node-api:`updateWriteOpResult <Collection.html#~updateWriteOpResult>`
object. You can use the ``modifiedCount`` field in the
``updateWriteOpResult`` object to check the number of documents replaced
by the operation. Since ``replaceOne`` can only replace a single document
``modifiedCount`` can have a value of either ``0`` or ``1``. When you
specify the upsert option, the ``upsertedCount`` field indicates the number
of newly inserted documents. Use the ``upsertedId._id`` field if you need a
unique identifier for an upserted document.

The ``replaceOne()`` method throws an exception if an error occurs
during execution. For example, if you specify a value that violates a
unique index rule, ``replaceOne()`` throws a ``duplicate key error``.

.. note::

  If your application requires the document after updating,
  use the :node-api:`collection.findOneAndReplace()
  <Collection.html#findOneAndReplace>`
  method which has a similar interface to ``replaceOne()``.
  You can configure ``findOneAndReplace()`` to return either the
  original matched document or the replacement document.

Example
-------

.. include:: /includes/connect-guide-note.rst

.. literalinclude:: /code-snippets/usage-examples/replaceOne.js
  :language: javascript
  :linenos:
