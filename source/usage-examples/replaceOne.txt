==================
Replace a Document
==================

.. default-domain:: mongodb

You can replace a single document using the `replaceOne()
<https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#replaceOne>`_
method. ``replaceOne()`` accepts a query document and a replacement
document, and replaces the first document that matches the filter with
the provided replacement document.

You can specify additional options, such as ``upsert``, using the
optional ``options`` parameter. Configuring the ``upsert`` field to
``true`` in the options object causes the operation to insert a new
document if no document matches the query.

The ``replaceOne()`` method returns a `Promise
<https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_
that resolves to an `updateWriteOpResult
<https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#~updateWriteOpResult>`_.
You can use the ``modifiedCount`` field of this
object to determine whether or not a document was modified. If the
operation was configured to upsert a document, the ``upsertedCount``
field indicates the number of newly inserted documents. Use the
``upsertedId._id`` field if you need a unique identifier for an upserted
document.

The ``replaceOne()`` method will throw an exception if an error occurs
during execution. For example, attempting to update a field to a value
that would violate unique index rules will throw a
``duplicate key error``.

.. note::

  If your application requires the document after updating,
  consider using the
  `collection.findOneAndReplace() <https://mongodb.github.io/node-mongodb-native/3.3/api/Collection.html#findOneAndReplace>`_.
  method, which has a similar interface to ``replaceOne()`` but also
  returns the original or updated document.

.. literalinclude:: /code-snippets/usage-examples/replaceOne.js
  :language: javascript
  :linenos:


