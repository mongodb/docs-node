=============
Run a Command
=============

.. default-domain:: mongodb

.. note::
   If you specify a callback method, ``command()`` returns nothing. If you do
   not specify one, this method returns a ``Promise`` that resolves to the
   result object when it completes. See our guide on :doc:`Promises and
   Callbacks </fundamentals/promises>` for more information, or the
   `API documentation <{+node-api+}/Db.html#~resultCallback>`__ for
   information on the result object.

You can run all raw database operations using the `db.command()
<{+node-api+}/Db.html#~command>`__ method. Call the ``command()`` method with
your command object on an instance of a database for diagnostic and
administrative tasks such as fetching server stats or initializing a replica
set.

.. note::
    Use the :manual:`mongo shell </reference/mongo-shell>` for
    administrative tasks instead of the Node.js driver whenever possible.

You can specify additional options in the ``options`` object passed in
the second parameter of the ``command()`` method. For more information
on the options you can pass, see the
`db.command() API documentation <{+node-api+}/Db.html#~command>`__. You can
also pass a `callback method <{+node-api+}/Admin.html#~resultCallback>`__ as an
optional third parameter.

Example
-------

.. include:: /includes/connect-guide-note.rst

.. literalinclude:: /code-snippets/usage-examples/command.js
  :language: javascript
  :linenos:


When you run the above command, you should see output similar to the
following:

.. code-block:: javascript
   :copyable: false

   {
     db: 'sample_mflix',
     collections: 6,
     views: 0,
     objects: 75620,
     ...
   }
