.. _node-usage-convenient-txn:

==================================
Use the Convenient Transaction API
==================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The {+driver-short+} provides the Core API and the Convenient
Transaction API to perform transactions. This usage example provides
sample code that uses the **Convenient Transaction API**.

.. seealso::
   
   To learn more about the performing transactions in the
   {+driver-short+}, see the :ref:`nodejs-transactions` guide.

   To learn how to use the Core API to perform transactions, see the
   :ref:`node-usage-core-txn` usage example.

Example
-------

Consider a situation in which a customer purchases items from your store.
To record the purchase, your application must update
your inventory and record the order information.

The following table describes the collections that store purchase data
and how a purchase changes the data in each collection.

.. list-table::
   :widths: 25 25 50
   :header-rows: 1

   * - Collection
     - Operation
     - Description of the Change

   * - ``orders``
     - insert
     - Insert a document that describes the order

   * - ``inventory``
     - update
     - Update the quantities of items available after a purchase

A purchase can fail for the following reasons:

- Insufficient inventory for an item
- An order could not be completed
- The system went offline

If the payment fails, you can perform a transaction that includes all of
the data changes to ensure you avoid making any partial updates that
might cause data consistency issues for future operations.

Sample Data
~~~~~~~~~~~

Before any transactions, the ``inventory`` collection contains the
following documents:

.. literalinclude:: /code-snippets/transactions/txn-convenient.js
   :language: javascript
   :dedent:
   :copyable: false
   :start-after: start-inventory
   :end-before: end-inventory

You store purchase records in the ``orders`` collection of the
``testdb`` database. This collection is empty, as there have been no
purchases.

Implementation
~~~~~~~~~~~~~~

The code example in this section demonstrates how to use the Convenient
Transaction API to perform a multi-document transaction in a session. In
this example, the transaction reflects the actions needed when a
customer purchases items from your store.

This example code performs a transaction through the following actions:

1. Calls the ``withSession()`` method on the client to implicitly create
   the session and include the transaction within this session.

#. Calls the ``withTransaction()`` method on the session to create a
   transaction, run the specified operations, and commit the
   transaction. If the transaction fails, this method ends the
   transaction and returns an error message.

#. Performs the following operations within the transaction:

   * To process a predefined ``order`` variable that specifies the item and
     quantity that the customer wants, the first operation checks if
     there is sufficient inventory to fulfill the purchase.
   * If the items are not available or there are not enough items, the
     transaction ends and the function returns an error message.
   * If the inventory is sufficient for the order, the code performs an
     update operation in the ``inventory`` collection to reduce the
     quantities of the items purchased.
   * The code inserts a record of the purchase to the ``records``
     collection that includes a timestamp, a list of the purchased
     items, and a total price for the purchase.
   * The code returns a message acknowledging that the transaction
     committed successfully with a copy of the purchase record.

#. Prints the return type of ``withSession()``, which is either the
   error message or the acknowledgment that the transaction completed.

.. literalinclude:: /code-snippets/transactions/txn-convenient.js
   :language: javascript
   :linenos:
   :dedent:
   :start-after: start-transaction
   :end-before: end-transaction

Sample Orders and Transaction Results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When your application completes the payment transaction, the collections
in the database should contain the inventory and order updates. 
If an error interrupts the transaction, none of the changes should be
visible in your database.

Suppose a customer sends the following order:

.. literalinclude:: /code-snippets/transactions/txn-convenient.js
   :language: javascript
   :dedent:
   :copyable: false
   :start-after: start-order-successful
   :end-before: end-order-successful

Given this order, the code outputs the following result:

.. code-block:: none
   :copyable: false
   
   Order successfully completed and recorded!
   Receipt:
   {
     "date": "2023-08-25T20:06:52.564Z",
     "items": [
       { "item": "sunblock", "qty": 3 },
       { "item": "beach chair", "qty": 1 }
     ],
     "total": 43,
     "_id": "..."
   }

In the ``inventory`` collection, you should see that the quantity of
``"sunblock"`` is now ``82`` and the quantity of ``"beach chair"``
is ``29``. The ``records`` collection should contain the record of the
purchase.

Suppose a different customer sends the following order:

.. literalinclude:: /code-snippets/transactions/txn-convenient.js
   :language: javascript
   :dedent:
   :copyable: false
   :start-after: start-order-fail
   :end-before: end-order-fail

Given this order, the code outputs the following result:

.. code-block:: none
   :copyable: false
   
   Item not found or insufficient quantity.

You should not see any changes in the ``inventory`` collection, and the
``records`` collection should not have a new entry for this order.

API Documentation
-----------------

To learn more about any of the methods or types discussed in this
usage example, see the following API Documentation:

- `withSession() <{+api+}/classes/MongoClient.html#withSession>`__
- `withTransaction() <{+api+}/classes/ClientSession.html#withTransaction>`__
- `abortTransaction() <{+api+}/classes/ClientSession.html#abortTransaction>`__"