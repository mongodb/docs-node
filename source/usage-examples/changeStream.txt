=================
Watch for Changes
=================

.. default-domain:: mongodb

Open a Change Stream
--------------------

You can keep track of changes to data in MongoDB, such as changes to a
collection, database, or deployment, by opening a :manual:`change
stream</changeStreams/>`. A change stream allows applications to
watch for changes to data and react to those changes. You can open a
change stream by calling the :node-api:`Collection.watch()
</Collection.html#watch>`, :node-api:`Db.watch() </Db.html#watch>`, or
:node-api:`MongoClient.watch()</MongoClient.html#watch>`  method.

The ``watch()`` method  optionally takes a :manual:`pipeline
</reference/operator/aggregation-pipeline/>`, an array of
:manual:`stages </changeStreams/#modify-change-stream-output>`, as the
first parameter to filter and transform the :manual:`change events
</reference/change-events/>` output. ``watch()`` accepts an additional
options object as the second parameter. By default, change streams only
return the fields modified by an update operation, instead of the entire
updated document. You can configure your change stream to also
return the most current version of a document by setting the
``fullDocument`` field of the options object to ``"updateLookup"``.

Process the Change Stream Events
--------------------------------

You can capture events from a change stream with a listener
function. Call the ``watch()`` command to get a ``ChangeStream`` instance.
Add your listener function by calling the `EventEmitter.on()
<https://nodejs.org/api/events.html#events_emitter_on_eventname_listener>`_
method on that instance. Pass the string ``change`` as the first parameter
and add your :mdn:`callback function <Glossary/Callback_function>` as
the second parameter.  The callback triggers when a change event is
emitted, providing the next available document. You can specify logic in
the callback to process the event document when it is received.

Call the :node-api:`close() </ChangeStream.html#close>` method on the
``ChangeStream`` instance to stop processing change events. This method
closes the change stream and frees resources.

Example
-------

The following example opens a change stream on the ``movies``
collection. We create a listener function to receive and print change
events that occur.

To emit a change event, we perform a change to the collection, such as
insertion with ``insertOne()``. To prevent ``insertOne()`` from
executing before the listener function can register, we create a timer
that uses :mdn:`setTimeout <Web/API/WindowOrWorkerGlobalScope/setTimeout>`
to wait 1 second. When you insert a document, the listener receives the
corresponding event.

After that, we create a second timer to wait an additional second after
the insertion of the document to close the ``ChangeStream`` instance
using ``changeStream.close()``.

.. include:: /includes/connect-guide-note.rst

.. literalinclude:: /code-snippets/usage-examples/changeStream.js
  :language: javascript :linenos:
