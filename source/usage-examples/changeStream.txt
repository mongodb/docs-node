=================
Watch for Changes
=================

.. default-domain:: mongodb

Open a Change Stream
--------------------

You can watch for changes to a single collection, a database, or an entire deployment in MongoDB with **Change Streams**.
Open a change stream by calling the ``watch()`` method on a ``Collection``, ``Db``, or ``MongoClient`` object. The
change stream emits **change event** documents when they occur.

The ``watch()`` method optionally takes an **aggregation pipeline** which consists of an array of **aggregation stages**
as the first parameter. The aggregation stages filter and transform the change events.

In the example below, the ``$match`` stage will match all change event documents with a ``runtime`` value of less than
15, filtering all others out.

.. code-block:: javascript

   const pipeline = [ { $match: { runtime: { $lt: 15 } } } ];
   const changeStream = collection.watch(pipeline);

The ``watch()`` method accepts an ``options`` object as the second parameter. Refer to the links at the end of this
section for more information on the settings you can configure with this object.

The ``watch()`` method returns an instance of a :node-api-4.0:`ChangeStream </classes/changestream.html>`. You can read events from
change streams by iterating over them or listening for events. Select the tab that corresponds to the way you want to
read events from the change stream below.

.. warning::

   Avoid mixing both the iterative and event-based approach of reading from change streams as it can cause unexpected
   behavior.

.. tabs::

   .. tab::
      :tabid: Iterative

      You can call methods on the ``ChangeStream`` object such as:

      - ``hasNext()`` to check for remaining documents in the stream
      - ``next()`` to request the next document in the stream
      - ``close()`` to close the ChangeStream


   .. tab::
      :tabid: Event

      You can attach listener functions to the ``ChangeStream``  object by calling the ``on()`` method. This method is inherited from the Javascript
      ``EventEmitter`` class. Pass the string ``"change"`` as the first parameter and your callback function as the
      second parameter as shown below:

      .. code-block:: javascript

         changeStream.on("change", (changeEvent) => { /* your callback function */ });

      The callback function triggers when a change event is emitted. You can specify logic in the callback to process
      the change event document when it is received.


      You can control the change stream by calling ``pause()`` to stop emitting events or ``resume()`` to continue to emit events.

      To stop processing change events, call the :node-api-4.0:`close() </classes/changestream.html#close>` method on the
      ``ChangeStream`` instance. This closes the change stream and frees resources.

      .. code-block:: javascript

         changeStream.close();

Visit the following resources for additional material on the classes and
methods presented above:

- :manual:`Change streams </changeStreams/>`
- :manual:`Change events </reference/change-events/>`
- :manual:`Aggregation pipeline </reference/operator/aggregation-pipeline/>`
- :manual:`Aggregation stages </changeStreams/#modify-change-stream-output>`
- :node-api-4.0:`ChangeStream class API documentation </classes/changestream.html>`
- :node-api-4.0:`Collection.watch() </classes/collection.html#watch>`,
- :node-api-4.0:`Db.watch() </classes/db.html#watch>`,
- :node-api-4.0:`MongoClient.watch() API documentation </classes/mongoclient.html#watch>`

.. note::

   Change events that contain information on update operations only return the modified
   fields by default rather than the full updated document. You can configure
   your change stream to also return the most current version of the document
   by setting the ``fullDocument`` field of the options object to
   ``"updateLookup"`` as follows:

   .. code-block:: javascript

      const changeStream = collection.watch();
      const options = { fullDocument: "updateLookup" };
      changeStream.on("change", callbackFunction, options);

Example
-------

The following example opens a change stream on the ``movies`` collection in
the ``sample_mflix`` database. Let's create a listener function to receive and
print change events that occur on the collection.

First, open the change stream on the collection and then define a callback
on the change stream using the ``on()`` method. Once set, generate a change
event to be emitted by performing a change to the collection.

To generate the change event on the collection, let's use ``insertOne()``
method to add a new document. Since the ``insertOne()`` may run before the
listener function can register, we use a timer, declared with ``setTimeout()``
to wait one second before executing the insert.

We also use a second timer to wait an additional second after the insertion of
the document to provide ample time for the change event to be received and
the for the callback to complete its execution before closing the
``ChangeStream`` instance using the ``close()`` method.

The timers used in this example are only necessary for this demonstration
to make sure there is enough time to register listener and have the
callback process the event before exiting.

.. include:: /includes/connect-guide-note.rst

.. literalinclude:: /code-snippets/usage-examples/changeStream.js
  :language: javascript

If you run the example above, you should see output similar to the
following:

.. code-block:: javascript

   received a change to the collection: 	 {
     _id: {
       _data: '825EC...'
     },
     operationType: 'insert',
     clusterTime: Timestamp { ... },
     fullDocument: { _id: 5ec3..., test: 'sample movie document' },
     ns: { db: 'sample_mflix', coll: 'movies' },
     documentKey: { _id: 5ec3... },
   }
