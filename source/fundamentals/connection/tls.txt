.. _node-connect-tls:

==========================
Enable TLS on a Connection
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to connect to MongoDB instances with the
:wikipedia:`TLS </Transport_Layer_Security>`
security protocol. To configure your connection to use TLS, enable
the TLS settings in either your connection string or the
`MongoClientOptions <{+api+}/interfaces/MongoClientOptions.html>`__
for your client.

.. _node-enable-tls:

Enable TLS
----------

You can enable TLS on a connection to your MongoDB instance
in the following ways:

- Setting the ``tls`` option to ``true`` in your ``MongoClientOptions``
- Setting the ``tls`` option to ``true`` in your connection string

.. tabs::

   .. tab:: MongoClientOptions
      :tabid: mongoclientoptions

      To enable TLS on a connection by using an option in a
      ``MongoClientOptions`` instance, set the property ``tls`` to
      ``true`` and pass the options object to the ``MongoClient`` constructor:
      
      .. code-block:: js
         :emphasize-lines: 2

         var myClientSettings = {
           tls: true,
           ...
         };
         
         const client = new MongoClient(uri, myClientSettings);

   .. tab:: Connection String
      :tabid: connection string

      To enable TLS on a connection by using a connection string option,
      set the parameter ``tls`` to ``true`` in the connection string
      that you pass to the ``MongoClient`` constructor:

      .. code-block:: js
         :emphasize-lines: 1

         const uri = "mongodb://<hostname>:<port>?tls=true";
         const client = new MongoClient(uri, myClientSettings);

.. _node-configure-tls-certificates:

Configure Certificates
----------------------

To successfully initiate a TLS request, an application must prove its
identity by referencing cryptographic certificates. To connect to
MongoDB with TLS, your certificates must be stored as wikipedia:`PEM
files </Privacy-Enhanced_Mail>`.

.. important::

   For production use, your MongoDB deployment should use valid
   certificates generated and signed by the same certificate authority.
   For testing, you can use self-signed certificates.

Configure TLS Client Options
----------------------------

In addition to the ``tls`` option, the driver provides client options
that you can use to configure TLS on your connection.

The following table describes the client options that you can
specify to reference your certificates and connect to MongoDB with TLS
enabled. The first column describes Node.js options that you can specify
when creating a :ref:`SecureContext <node-tls-securecontext>`. The second column describes
equivalent driver client options, and the third column provides a
description of each option. The table entries include the accepted type
for each option.

.. list-table::
   :header-rows: 1
   :widths: 1 1 1

   * - Node.js Option
     - Driver Option
     - Description

   * - **Name**: ``ca``, **Type**: ``Buffer``
     - | **Name**: ``tlsCAFile``, **Type**: ``string``
       |
       | **Name**: ``ca``, **Type**: ``Buffer``
     - Specifies either one or more certificate authorities to
       trust when making a TLS connection.

   * - **Name**: ``cert``, **Type**: ``Buffer``
     - | **Name**: ``tlsCertificateFile``, **Type**: ``string``
       |
       | **Name**: ``tlsCertificateKeyFile``, **Type**: ``string``
       |
       | **Name**: ``cert``, **Type**: ``Buffer``
     - Specifies the client certificate file or the client
       private key file.

   * - **Name**: ``key``, **Type**: ``Buffer``
     - | **Name**: ``tlsCertificateKeyFile``, **Type**: ``string``
       |
       | **Name**: ``key``, **Type**: ``Buffer``
     - Specifies the client private key file.

   * - **Name**: ``passphrase``, **Type**: ``string``
     - **Name**: ``tlsCertificateKeyFilePassword``, **Type**: ``string``
     - Specifies the password to decrypt the client private key.

.. note:: Additional TLS Client Options
   
   For **testing purposes**, you can set the ``tlsAllowInvalidHostnames``,
   ``tlsAllowInvalidCertificates``, and ``tlsInsecure`` client options.
   
   Setting the ``tlsAllowInvalidHostnames`` option to ``true`` disables
   hostname verification, and setting the
   ``tlsAllowInvalidCertificates`` to ``true`` disables certificate
   validation. Setting the ``tlsInsecure`` option to ``true`` disables
   both certificate and hostname validation.
   
   Specifying any of these options in a production environment makes
   your application insecure and potentially
   vulnerable to expired certificates and to foreign processes posing
   as valid client instances.

For a full list of client options, see :ref:`node-connection-options`.

.. _node-client-tls-connect:

Reference Certificates in a Client
----------------------------------

You must reference your certificates in your ``MongoClientOptions`` so
that the server can validate them before the client connects. You can
reference your certificates in the following ways:

- Create a ``SecureContext`` object to store certificates *(Recommended)*
- Provide filepath strings that point to your certificates
- Create ``Buffer`` objects to store certificates

.. _node-tls-securecontext:

Create a ``SecureContext`` Object to Store Certificates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We recommend that you use the ``secureContext`` option to connect with
the TLS protocol. By using a ``SecureContext`` object to store your
certificates, you use the Node.js framework for TLS that is independent of the
driver. When you use this option, you keep all TLS options in a
reusable object. This is the most organized way to set up
TLS for your application.

To create a ``SecureContext`` object, you must first install the ``tls``
package and use it in your application. Next, call the ``tls.createSecureContext()``
method and pass the contents of your certificates in the options parameter.
This method returns a ``SecureContext`` object that you can set as an option 
in your ``MongoClientOptions`` object.

The following code shows how to create a ``SecureContext`` object by
calling the ``tls.createSecureContext()`` method and set the
``secureContext`` client option:

.. code-block:: js
   :emphasize-lines: 2-6, 10
   
   // Create a SecureContext object
   var sc = tls.createSecureContext({
     ca: fs.readFileSync(`<path to CA certificate>`),
     cert: fs.readFileSync(`<path to client certificate>`),
     key: fs.readFileSync(`<path to client certificate>`),
   });
   
   // Pass the SecureContext as a client option
   const client = new MongoClient(uri, {
     secureContext: sc,
   });

To learn more about the ``tls.createSecureContext()`` method and the
``tls`` package, see the `Node.js TLS API documentation
<https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions>`__.

For a runnable example that uses the ``secureContext`` client option, see
the :ref:`SecureContext Example <node-securecontext-full-example>`.

Provide Certificate Filepaths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can include the filepaths for your certificates as client options to
retrieve your certificates while connecting with TLS.

The following code shows how to specify the ``tlsCAFile`` and
``tlsCertificateKeyFile`` client options with certificate filepaths: 

.. code-block:: js
   :emphasize-lines: 3-4
   
   // Pass filepaths to client options
   const client = new MongoClient(uri, {
     tlsCAFile: `<path to CA certificate>`,
     tlsCertificateKeyFile: `<path to client certificate>`,
   });

Create ``Buffer`` Objects to Store Certificates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can pass the contents of your certificate files as ``Buffer``
objects in your client options to connect with TLS.

The following code shows how to read the contents of your certificate
files and pass the resulting ``Buffer`` objects to the ``ca``, ``cert``, and
``key`` client options:

.. code-block:: js
   :emphasize-lines: 2-4, 8-10
   
   // Read file contents
   const ca = fs.readFileSync(`<path to CA certificate>`);
   const cert = fs.readFileSync(`<path to client certificate>`);
   const key = fs.readFileSync(`<path to client certificate>`);

   // Pass Buffers to client options
   const client = new MongoClient(uri, {
     ca: ca,
     cert: cert,
     key: key,
   });

.. _node-securecontext-full-example:

``SecureContext`` Example
-------------------------

This example shows how to create a ``SecureContext`` object and
a ``MongoClient`` instance that includes TLS options. The example
connects to MongoDB and executes a find query:

.. code-block:: js
   
   const { MongoClient } = require("mongodb");
   const fs = require("fs");
   const tls = require("tls");
   
   // Replace the uri string with your connection string.
   const uri = "<connection uri>";
   
   // Replace the filepaths with your certificate filepaths.
   var sc = tls.createSecureContext({
     ca: fs.readFileSync(`<path to CA certificate>`),
     cert: fs.readFileSync(`<path to client certificate>`),
     key: fs.readFileSync(`<path to client certificate>`),
   });
   
   const client = new MongoClient(uri, {
     tls: true,     
     secureContext: sc,
   });
   
   async function run() {
     try {
       const db = client.db("myDB");
       const myColl = database.collection("myColl");
       const doc = await myColl.findOne({});   
       console.log(doc);
     } finally {
       await client.close();
     }
   }
   run().catch(console.dir);

Additional Information
----------------------

For more information about enabling TLS on a connection, see the
following Server manual documentation:

- :manual:`TLS/SSL (Transport Encryption) </core/security-transport-encryption/>`
- :manual:`TLS/SSL Configuration for Clients </tutorial/configure-ssl-clients/>`

API Documentation
~~~~~~~~~~~~~~~~~

- `MongoClientOptions <{+api+}/interfaces/MongoClientOptions.html>`__
- `MongoClient <{+api+}/classes/MongoClient.html>`__
- `tlsAllowInvalidHostnames client option <{+api+}/interfaces/MongoClientOptions.html#tlsAllowInvalidHostnames>`__
- `tlsAllowInvalidCertificates client option <{+api+}/interfaces/MongoClientOptions.html#tlsAllowInvalidCertificates>`__
- `secureContext client option <{+api+}/interfaces/MongoClientOptions.html#secureContext>`__
- `tlsCAFile client option <{+api+}/interfaces/MongoClientOptions.html#tlsCAFile>`__
- `tlsCertificateKeyFile client option <{+api+}/interfaces/MongoClientOptions.html#tlsCertificateKeyFile>`__
- `ca client option <{+api+}/interfaces/MongoClientOptions.html#ca>`__
- `cert client option <{+api+}/interfaces/MongoClientOptions.html#cert>`__
- `key client option <{+api+}/interfaces/MongoClientOptions.html#key>`__
