.. _node-connect-tls:

==========================
Enable TLS on a Connection
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to connect to MongoDB instances with
the TLS security protocol. For more information on TLS, see the
Wikipedia entry on :wikipedia:`Transport Layer Security <Transport_Layer_Security>`.

To configure your connection to use TLS, enable
the TLS option and provide your certificates for validation.

.. _node-enable-tls:

Enable TLS
----------

You can enable TLS on a connection to your MongoDB instance
in the following ways:

- Setting the ``tls`` option to ``true`` in your ``MongoClientOptions``
- Setting the ``tls`` option to ``true`` in your connection string

.. tabs::

   .. tab:: MongoClientOptions
      :tabid: mongoclientoptions

      To enable TLS on a connection by using an option in a
      ``MongoClientOptions`` instance, set the property ``tls`` to
      ``true`` and pass the options object to the ``MongoClient`` constructor:
      
      .. code-block:: js
         :emphasize-lines: 2

         var myClientSettings = {
           tls: true,
           ...
         };
         
         const client = new MongoClient(uri, myClientSettings);

   .. tab:: Connection String
      :tabid: connection string

      To enable TLS on a connection by using a connection string option,
      set the parameter ``tls`` to ``true`` in the connection string
      that you pass to the ``MongoClient`` constructor:

      .. code-block:: js
         :emphasize-lines: 1

         const uri = "mongodb://<hostname>:<port>?tls=true";
         const client = new MongoClient(uri, myClientSettings);

In addition to the ``tls`` client option, the driver provides additional
options to configure TLS on your connection. For **testing purposes**,
you can set the ``tlsAllowInvalidHostnames``,
``tlsAllowInvalidCertificates``, and ``tlsInsecure`` client options.

Setting the ``tlsAllowInvalidHostnames`` option to ``true`` disables
hostname verification, and setting the
``tlsAllowInvalidCertificates`` to ``true`` disables certificate
validation. Setting the ``tlsInsecure`` option to ``true`` disables
both certificate and hostname validation.
   
.. warning::

   Specifying any of these options in a production environment makes
   your application insecure and potentially
   vulnerable to expired certificates and to foreign processes posing
   as valid client instances.

For a full list of client options, see :ref:`node-connection-options`.

.. _node-configure-tls-certificates:

Configure Certificates
----------------------

To successfully initiate a TLS request, an application must prove its
identity by referencing cryptographic certificates. To connect to
MongoDB with TLS, your certificates must be stored as PEM
files. For more information on the PEM format, see the Wikipedia entry
on :wikipedia:`Privacy-Enhanced Mail <Privacy-Enhanced_Mail>`.

.. important::

   For production use, your MongoDB deployment should use valid
   certificates generated and signed by the same certificate authority.
   For testing, you can use self-signed certificates.

The following list describes the components that you need to establish
a connection with TLS:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - TLS Component
     - Description

   * - Certificate Authority (CA)
     - Either one or more certificate authorities to
       trust when making a TLS connection.

   * - Client Certificate
     - A digital certificate and key that allow the server to verify the identity
       of your application to establish an encrypted network connection.

   * - Certificate Key
     - The client certificate private key file. This key is often
       included within the certificate file itself.

   * - Passphrase
     - The password to decrypt the client private key if it is encrypted.

.. _node-client-tls-connect:

Reference Certificates in a Client
----------------------------------

You must reference your certificates in your ``MongoClientOptions`` so
that the server can validate them before the client connects. You can
reference your certificates in the following ways:

- Create a ``SecureContext`` object to store certificates *(Recommended)*
- Provide filepath strings that point to your certificates
- Create ``Buffer`` objects to store certificates

.. _node-tls-securecontext:

Create a ``SecureContext`` Object to Store Certificates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We recommend that you use the ``secureContext`` option to configure
your TLS connection. ``SecureContext`` objects are native to Node.js
and allow you to keep all your TLS options in a single reusable object.

To create a ``SecureContext`` object, you must first install the ``tls``
package and use it in your application. Next, call the ``tls.createSecureContext()``
method and pass the contents of your certificates in the options parameter.
This method returns a ``SecureContext`` object that you can set as an option 
in your ``MongoClientOptions`` object.

The following code shows how to create a ``SecureContext`` object by
calling the ``tls.createSecureContext()`` method and set the
``secureContext`` client option:

.. code-block:: js
   :emphasize-lines: 2-6, 10
   
   // Create a SecureContext object
   var sc = tls.createSecureContext({
     ca: fs.readFileSync(`<path to CA certificate>`),
     cert: fs.readFileSync(`<path to client certificate>`),
     key: fs.readFileSync(`<path to client certificate>`),
   });
   
   // Pass the SecureContext as a client option
   const client = new MongoClient(uri, {
     secureContext: sc,
   });

To learn more about the ``tls.createSecureContext()`` method and the
``tls`` package, see the `Node.js TLS API documentation
<https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions>`__.

For a runnable example that uses the ``secureContext`` client option, see
the :ref:`SecureContext Example <node-securecontext-full-example>`.

Provide Certificate Filepaths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can include the filepaths for your certificates as client options to
retrieve your certificates while connecting with TLS.

The following code shows how to specify the ``tlsCAFile`` and
``tlsCertificateKeyFile`` client options with certificate filepaths: 

.. code-block:: js
   :emphasize-lines: 3-4
   
   // Pass filepaths to client options
   const client = new MongoClient(uri, {
     tlsCAFile: `<path to CA certificate>`,
     tlsCertificateKeyFile: `<path to client certificate>`,
   });

Create ``Buffer`` Objects to Store Certificates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can pass the contents of your certificate files as ``Buffer``
objects in your client options to connect with TLS.

The following code shows how to read the contents of your certificate
files and pass the resulting ``Buffer`` objects to the ``ca``, ``cert``, and
``key`` client options:

.. code-block:: js
   :emphasize-lines: 2-4, 8-10
   
   // Read file contents
   const ca = fs.readFileSync(`<path to CA certificate>`);
   const cert = fs.readFileSync(`<path to client certificate>`);
   const key = fs.readFileSync(`<path to client certificate>`);

   // Pass Buffers to client options
   const client = new MongoClient(uri, {
     ca: ca,
     cert: cert,
     key: key,
   });

.. _node-securecontext-full-example:

``SecureContext`` Example
-------------------------

This example shows how to create a ``SecureContext`` object and
a ``MongoClient`` instance that includes TLS options. The example
connects to MongoDB and executes a find query:

.. code-block:: js
   
   const { MongoClient } = require("mongodb");
   const fs = require("fs");
   const tls = require("tls");
   
   // Replace the uri string with your connection string.
   const uri = "<connection uri>";
   
   // Replace the filepaths with your certificate filepaths.
   var sc = tls.createSecureContext({
     ca: fs.readFileSync(`<path to CA certificate>`),
     cert: fs.readFileSync(`<path to client certificate>`),
     key: fs.readFileSync(`<path to client certificate>`),
   });
   
   const client = new MongoClient(uri, {
     tls: true,     
     secureContext: sc,
   });
   
   async function run() {
     try {
       const db = client.db("myDB");
       const myColl = database.collection("myColl");
       const doc = await myColl.findOne({});   
       console.log(doc);
     } finally {
       await client.close();
     }
   }
   run().catch(console.dir);

Additional Information
----------------------

For more information about enabling TLS on a connection, see the
following Server manual documentation:

- :manual:`TLS/SSL (Transport Encryption) </core/security-transport-encryption/>`
- :manual:`TLS/SSL Configuration for Clients </tutorial/configure-ssl-clients/>`

API Documentation
~~~~~~~~~~~~~~~~~

- `MongoClientOptions <{+api+}/interfaces/MongoClientOptions.html>`__
- `MongoClient <{+api+}/classes/MongoClient.html>`__
- `tlsAllowInvalidHostnames client option <{+api+}/interfaces/MongoClientOptions.html#tlsAllowInvalidHostnames>`__
- `tlsAllowInvalidCertificates client option <{+api+}/interfaces/MongoClientOptions.html#tlsAllowInvalidCertificates>`__
- `secureContext client option <{+api+}/interfaces/MongoClientOptions.html#secureContext>`__
- `tlsCAFile client option <{+api+}/interfaces/MongoClientOptions.html#tlsCAFile>`__
- `tlsCertificateKeyFile client option <{+api+}/interfaces/MongoClientOptions.html#tlsCertificateKeyFile>`__
- `ca client option <{+api+}/interfaces/MongoClientOptions.html#ca>`__
- `cert client option <{+api+}/interfaces/MongoClientOptions.html#cert>`__
- `key client option <{+api+}/interfaces/MongoClientOptions.html#key>`__
