=======
Logging
=======

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: code example, log, information, monitor

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecols

Overview
--------

In this guide, you can learn how to configure logging options with the
{+driver-short+}. The driver allows you to log information that are categorized
by following severity levels:

- ``emergency``
- ``alert``
- ``critical``
- ``error``
- ``warn``
- ``notice``
- ``info``
- ``debug``
- ``trace``
- ``off``

The preceding list is ordered by decreasing severity level. Specifying a severity
level also logs all messages with higher severity levels. For example, setting
the log level to ``critical`` also logs messages with severity levels of
``emergency`` and ``alert``.

The lower the severity level you specify, the more information the driver logs,
which impacts performance of your application. For the best performance, ensure
that you set the severity to the highest severity level that provides the information
your application needs.

Configuration
-------------

You can configure logging in the {+driver-short+} without code changes by
specifying environment variables. You can also configure logging
programmatically by specifying client options in the ``MongoClient``
constructor.

.. note::

   Because connection strings are often shared among a deployment of different
   appications that might have different logging support, we do not recommend
   using a connection string to configure logging.

Environment Variables
~~~~~~~~~~~~~~~~~~~~~

You can configure logging for different components of the driver by specifying
a severity level in one or more of the following environment variables:

- ``MONGODB_LOG_COMMAND``
- ``MONGODB_LOG_TOPOLOGY``
- ``MONGODB_LOG_SERVER_SELECTION``
- ``MONGODB_LOG_CONNECTION``
- ``MONGODB_LOG_CLIENT``

If you don't specify any of the preceding environment variables, the driver uses
the value of ``MONGODB_LOG_ALL``, which if not specified, is implicitly set to
``off``.

.. tip::

   Logging at the command level is the most performance-heavy logging option
   due to the frequency in which commands are sent to the server. Only
   specify this option if necessary for your application.

The following example sets the log level for all components to ``debug`` except
for ``MONGODB_LOG_COMMAND``:

.. code-block:: bash

   export MONGODB_LOG_ALL="debug"
   export MONGODB_LOG_COMMAND="off"

You can specify whether the driver logs to ``stderr`` or ``stdout`` by setting
the ``MONGODB_LOG_PATH`` environment variable to ``"stderr"`` or ``"stdout"``.
By default, the driver logs to ``stdout``.

The driver stringifies logged documents by using EJSON, which limits strings to
1000 characters by default. You can specify a maximum document length for your
logger by specifying the ``MONGODB_LOG_MAX_DOCUMENT`` environment variable. Set
this variable to ``0`` to perform no truncation.

Client Options
~~~~~~~~~~~~~~

You can configure logging programmatically by specifying client options in the
``MongoClient`` constructor. Because client options take precedence over environment
variables, only specify them in the client if you want to override any
environment variables.

.. tip::

   If your application relies on the format of ``stdout`` or ``stderr``, we
   recommend configuring logging by using client options to avoid conflicts with
   your application user's environment variables.

You can specify which component to configure logging for by specifying one or more of the
following client options:

- ``all``
- ``command``
- ``topology``
- ``serverSelection``
- ``connection``
- ``client``
- ``default``

To specify a log level for a component, set the
``mongodbLogComponentSeverities`` option to an object that contains the
component and your desired severity level. The following example sets the log
level for all components to ``debug`` except for ``command``:

.. literalinclude:: /includes/fundamentals/logging.js
   :language: javascript
   :start-after: start-logger-client-options
   :end-before: end-logger-client-options

You can specify whether the driver logs to ``stderr`` or ``stdout`` by setting
the ``mongodbLogPath`` option to ``"stderr"`` or ``"stdout"``. You can also
specify a custom log destination. The following example creates a custom log
destination:

.. literalinclude:: /includes/fundamentals/logging.js
   :language: javascript
   :start-after: start-custom-logger
   :end-before: end-custom-logger

If your function throws an error in the write operation, the thrown error
ends the logger. Because of this, we recommend that you handle errors by
making the write function a no-op rather than throwing an error, as shown in
the preceding example.

.. note::

   Logging can exhaust disk space if the proper log rotation system is not in
   place. We recommend that you connect your custom write function to a known
   logging library.

The driver stringifies logged documents by using EJSON, which limits strings to
1000 characters by default. You can specify a maximum document length for your
logger by specifying the ``mongodbLogMaxDocumentLength`` option. Set
this option to ``0`` to perform no truncation.

Additional Information
----------------------

For more information about monitoring with the {+driver-short+}, see the
following monitoring guides:

- :ref:`Command Monitoring <node-command-monitoring>`
- :ref:`Cluster Monitoring <node-cluster-monitoring>`
- :ref:`Connection Pool Monitoring <node-connection-pool-monitoring>`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the options or types discussed in this guide, see the
following API documentaion:

- `MongoClientOptions <{+api+}/interfaces/MongoClientOptions.html>`__
- `mongodbLogComponentSeverities <{+api+}/interfaces/MongoClientOptions.html#mongodbLogComponentSeverities>`__
- `mongodbLogMaxDocumentLength <{+api+}/interfaces/MongoClientOptions.html#mongodbLogMaxDocumentLength>`__
- `mongodbLogPath <{+api+}/interfaces/MongoClientOptions.html#mongodbLogPath>`__