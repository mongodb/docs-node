.. _nodejs-transactions:

============
Transactions
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Read this guide to learn how to perform **transactions** in MongoDB using the
Node.js driver. A transaction is a unit of work, composed of a series of
operations that you want either to succeed together or fail together when one
or more of the operations fail which a property called **atomicity**.
Atomicity is a property in which transactions composed of one or more
operations occur all at once, such that no other client can observe them as
separate operations, and that it leaves no changes if one of the operations
fails.

Since all write operations on a single document in MongoDB are atomic, you
may benefit most from transactions when you need to make an atomic change that
modifies multiple documents, which is called a multi-document transaction.
You can use the driver's transaction API to perform multi-document
transactions.

.. note::

   You can use multi-document transactions in MongoDB version 4.0 and later.

   For a detailed list of limitations, see the :manual:`Transactions and
   Operations </core/transactions/#transactions-and-operations>` section in
   the server manual.

Learn more about how to use the driver to run multi-document transactions on
MongoDB in the following sections of this guide:

- :ref:`Transaction APIs <nodejs-transaction-apis>`
- :ref:`Transaction Settings <nodejs-transaction-settings>`
- :ref:`Core API Example <nodejs-transaction-core-api-example>`
- :ref:`Callback API Example <nodejs-transaction-callback-api-example>`

In MongoDB, multi-document transactions run within a **client session**.
A client session is a grouping of related operations that guarantees
consistency between sequential read or write operations in certain
conditions. For more information about client sessions, see the
:manual:`Client Sessions and Causal Consistency Guarantees </core/read-isolation-consistency-recency/#std-label-sessions>`
Server manual guide.

.. _nodejs-transaction-apis:

Transaction APIs
----------------

The Node.js driver provides two APIs for managing transactions: the **Core
API** and the **Callback API**.

Core API
~~~~~~~~

The Core API features methods to start, cancel, or commit a transaction.
When you commit the transaction, you are sending a request to the server
to make the changes from your operations atomically. When using this API,
you must handle certain transaction errors returned by the server manually.

See
:manual:`TransientTransactionError </core/transactions-in-applications/#std-label-transient-transaction-error>`
and
:manual:`UnknownTransactionCommitResult <https://docs.mongodb.com/manual/core/transactions-in-applications/#-unknowntransactioncommitresult->`
for more information on these errors.

To start, cancel, or commit your transaction, you can call the corresponding
method on the ``Session`` object:

- ``startTransaction()``
- ``commitTransaction()``
- ``abortTransaction()``

See the :ref:`Core API example <nodejs-transaction-core-api-example>` for
a sample transaction implementation.

Callback API
~~~~~~~~~~~~

The Callback API enables you to run a transaction by passing a callback
function that encapsulates the series of operations that make up the
transaction. This API automatically handles certain transaction errors
returned by the server.

See
:manual:`TransientTransactionError </core/transactions-in-applications/#std-label-transient-transaction-error>`
and
:manual:`UnknownTransactionCommitResult <https://docs.mongodb.com/manual/core/transactions-in-applications/#-unknowntransactioncommitresult->`
for more information on these errors.

To create a transaction, pass a callback function that encapsulates your
transaction logic to the ``withTransaction()`` method on a ``Session``
object. The driver automatically retries the transaction when it encounters
certain errors reported by the server.

See the :ref:`Callback API example <nodejs-transaction-callback-api-example>`
for a sample transaction implementation.

.. _nodejs-transaction-settings:

Transaction Settings
--------------------

When you instantiate a transaction, you can specify the following options to
set the default behavior for that transaction:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Setting
     - Description

   * - ``readConcern``
     - Specifies how to check for the consistency of the data that the
       read operations retrieve from replica sets.

       See :manual:`Read Concern </reference/read-concern/>` in the server
       manual for more information.

   * - ``writeConcern``
     - Specifies conditions in which to acknowledge the write.
       See :manual:`Write Concern </reference/write-concern/>` in the
       server manual for more information.

   * - ``readPreference``
     - See :manual:`Read Preference <core/read-preference/#read-preference>`
       in the server manual for more information.

   * - ``maxCommitTimeMS`` https://mongodb.github.io/node-mongodb-native/4.2/interfaces/TransactionOptions.html#maxCommitTimeMS
     - Maximum amount of time to allow a commit action on a transaction to
       run in milliseconds.

If you do not provide values, the driver uses the client settings.

You can specify the transaction options in the Core API using code that
resembles the following:

.. code-block:: javascript

   const transactionOptions = {
     readConcern: ...,
     ...
   };
   session.startTransaction(transactionOptions);

You can specify the transaction options in the Callback API using code that
resembles the following:

.. code-block:: javascript

   const transactionOptions = {
     readConcern: ...,
     ...
   };
   await session.withTranssaction(<callback function>, transactionOptions);

.. _nodejs-transaction-example:

Example
-------

Consider a scenario in which a customer purchases items from your online
store. To track the purchase, you need to record the following information:

- Inventory updates
- Customer orders
- Payment receipts

You might organize the data updates required for a purchase as follows:

.. list-table::
   :widths: 25 25 50
   :header-rows: 1

   * - Collection
     - Operation
     - Description of the Change

   * - ``orders``
     - insert
     - Record the purchase information

   * - ``customers``
     - update
     - Append the order id to associate it with the customer

   * - ``inventory``
     - update
     - Subtract quantity of ordered items

A purchase can fail several ways such as if there's insufficient quantity of
the item in inventory, if the order couldn't be completed, or if your
payment system is offline.

If the payment fails for any reason, you can use a transaction to make sure
that you don't expose any partial updates that might cause data consistency
issues for other operations that depend on that data.

Sample Data
~~~~~~~~~~~

The code examples require the following sample data in the ``testdb``
database to successfully run the multi-document payment transaction:

A document that represents a customer and associated orders in a collection
called ``customers``.

.. code-block:: json

   { _id: 98765, orders: [] }

Documents that track inventory items in a collection called ``inventory``.

.. code-block:: json

   [
    { name: "sun screen", sku: 5432, qty: 85 },
    { name: "beach towel", sku: 7865, qty: 41 }
   ]

The code examples also perform operations on the ``orders`` collection, but
do not require any prior sample documents.

.. important::

   The following examples require that you create the collections outside of
   the transaction or are using MongoDB4.4 or later. For more information on
   creating collections inside a transaction, see the
   :manual:`Create Collections and Indexes in a Transaction </core/transactions/#std-label-transactions-create-collections-indexes>`
   server guide.

.. _nodejs-transaction-core-api-example:

Core API Implementation
~~~~~~~~~~~~~~~~~~~~~~~

To call


.. literalinclude:: /code-snippets/transactions/txn-core.js
   :start-after: start-session
   :end-before: end-session

The code to place the order including the calls to start and end the
transaction

.. literalinclude:: /code-snippets/transactions/txn-core.js
   :start-after: start-transaction
   :end-before: end-transaction



.. _nodejs-transaction-callback-api-example:

Callback API Implementation
~~~~~~~~~~~~~~~~~~~~~~~~~~~

