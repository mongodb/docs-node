.. _nodejs-transactions:

============
Transactions
============

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the
{+driver-short+} to perform **transactions**. Transactions allow you
to run a series of operations that do not change any data until the
entire transaction is committed. If any operation in the transaction fails, the 
driver ends the transaction and discards all data changes before they
ever become visible. This feature is called **atomicity**.

Since all write operations on a single document in MongoDB are atomic, you
might want to use transactions to make an atomic change that
modifies multiple documents. This situation would require a multi-document transaction.
Multi-document transactions are **ACID compliant** because MongoDB
guarantees that the data involved in your transaction operations remains
consistent, even if the driver encounters unexpected errors.

To learn more about ACID compliance and transactions, see our :website:`article on
ACID transactions </basics/acid-transactions>`.

.. note::

   To execute a multi-document transaction, you must be connected to a
   deployment running MongoDB Server version 4.0 or later.

   For a detailed list of limitations, see the :manual:`Transactions and
   Operations </core/transactions/#transactions-and-operations>` section in
   the Server manual.

In MongoDB, multi-document transactions run within a **client session**.
A client session is a grouping of related read or write operations that
you want to execute sequentially. We recommend you reuse
your client for multiple sessions and transactions instead of
instantiating a new client each time.

When combined with ``majority`` read and
write concerns, the driver guarantees causal consistency between the
operations. To learn more, see :manual:`Client Sessions and Causal Consistency Guarantees
</core/read-isolation-consistency-recency/#client-sessions-and-causal-consistency-guarantees>` in the
Server manual.

Learn more about how to use the driver to perform multi-document
transactions in the following sections of this guide:

- :ref:`Transaction APIs <nodejs-transaction-apis>`
- :ref:`Transaction Settings <nodejs-transaction-settings>`
- :ref:`Core API Examples <nodejs-transaction-examples>`

.. _nodejs-transaction-apis:

Transaction APIs
----------------

The driver provides two APIs for performing transactions, the **Core
API** and **Convenient Transaction API**.

In the :ref:`Core API <node-txn-core-api>`, you must handle the
creation and termination of sessions, and the creation, committing, and
termination of transactions. You must also implement error handling for
error types such as ``TransientTransactionError`` and
``UnknownTransactionCommitResult``.

In the :ref:`Convenient Transaction API
<node-txn-convenient-api>`, you can perform a transaction
without being responsible for ensuring the transaction was committed or
ended. This API automatically incorporates error handling logic for
error types such as ``TransientTransactionError`` and
``UnknownTransactionCommitResult``.

.. tip::
   
   To learn more about the ``TransientTransactionError`` error, see the
   :manual:`TransientTransactionError description
   </core/transactions-in-applications/#transienttransactionerror>` on
   the Driver API page in the Server manual.

   To learn more about the ``UnknownTransactionCommitResult`` error, see the
   :manual:`UnknownTransactionCommitResult description
   </core/transactions-in-applications/#unknowntransactioncommitresult>` on
   the Driver API page in the Server manual.

.. _node-txn-core-api:

Core API
~~~~~~~~

The Core API provides methods to start, cancel, and commit transactions.
When you commit a transaction, the API sends a request to the server to
make the changes from your operations atomically.

To perform a transaction, you must first create a ``Session`` instance
by calling the ``startSession()`` method on your client.

Then, you can call the following methods on the ``Session`` instance to start,
cancel, or commit your transaction:

- `startTransaction() <{+api+}/classes/ClientSession.html#startTransaction>`__
- `commitTransaction() <{+api+}/classes/ClientSession.html#commitTransaction>`__
- `abortTransaction() <{+api+}/classes/ClientSession.html#abortTransaction>`__

To see an example that uses this API, see the :ref:`Example
<nodejs-transaction-examples>` section of this guide.

.. _node-txn-convenient-api:

Convenient Transaction API
~~~~~~~~~~~~~~~~~~~~~~~~~~

The {+driver-short+} provides the following helper methods to perform a
transaction by using the Convenient Transaction API:

- `withSession() <{+api+}/classes/MongoClient.html#withSession>`__: Runs
  a given operation within a session. You do not 
  have to handle the creation or termination of the session.
- `withTransaction() <{+api+}/classes/ClientSession.html#withTransaction>`__: Starts a
  transaction and runs a provided
  function. This method ensures that the ``commitTransaction()`` method
  is called when all of the operations in the function finish.

These methods return the value that the provided function returns.

For example, if a function you provide to the ``withTransaction()``
method returns a ``Document`` type, then the ``withTransaction()``
method returns that object. Furthermore, if you perform this
transaction within the function you provide to the ``withSession()``
method, then the ``withSession()`` method also returns the
``Document`` object.

If you structure your code in this way, you can propagate return
values out of the session and work with them elsewhere in your code.

.. important::
   
   You must implement the following code patterns when using this API:

   - You must pass the session instance to each operation that
     you want to run in that session.
   - You must use the async ``await`` syntax for each operation in the
     session.
   - You cannot use parallelism, such as calling the
     ``Promise.all()`` method. This is because you cannot use sessions
     in parallel, as this usually leads to server errors.

To see an example that uses this API, see the
:ref:`node-usage-convenient-txn` usage example.

.. _nodejs-transaction-settings:

Transaction Options
-------------------

You can pass a ``TransactionOptions`` instance to the
``startTransaction()`` and ``withTransaction()`` methods to configure
how the driver performs a transaction. When you specify these options,
they override the values of the settings you might have set on your
``MongoClient`` instance.

The following table describes some of the options that you can specify
in a ``TransactionOptions`` instance:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Setting
     - Description

   * - ``readConcern``
     - | Specifies read operation consistency from the replica set.
       | To learn more, see :manual:`Read Concern
         </reference/read-concern/>` in the Server manual.

   * - ``writeConcern``
     - | Specifies the write operation level of acknowledgment from a replica set.
       | To learn more, see :manual:`Write Concern
         </reference/write-concern/>` in the Server manual.

   * - ``readPreference``
     - | Specifies how to route read operations to members of a replica set.
       | To learn more, see :manual:`Read Preference
         </core/read-preference/#read-preference>` in the Server manual.

   * - ``maxCommitTimeMS``
     - Specifies the length of time that a commit action on a
       transaction can run, in milliseconds.

For a full list of options, see the API documentation for
`TransactionOptions <{+api}/interfaces/TransactionOptions.html>`__.

.. note::
   
   If you do not specify options at the transaction level, the transaction
   inherits settings from your ``MongoClient`` instance.

The following code shows how to define and pass transaction options to
the ``startTransaction()`` method:

.. code-block:: javascript

   const txnOpts = {
     readPreference: 'primary',
     readConcern: { level: 'local' },
     writeConcern: { w: 'majority' },
     maxCommitTimeMS: 1000
   };
   session.startTransaction(txnOpts);

.. _nodejs-transaction-examples:

Example
-------

Consider a situation in which a customer purchases items from your online
store. To record the purchase, your application must update
your inventory and the customer's orders. Your
application also needs to register the order details.

The following table describes the collections that store purchase data
and how a purchase changes the data in each collection.

.. list-table::
   :widths: 25 25 50
   :header-rows: 1

   * - Collection
     - Operation
     - Description of the Change

   * - ``orders``
     - insert
     - Insert a document that describes the order

   * - ``customers``
     - update or upsert
     - Append the ``_id`` from the order document to the order history
       in the customer document

   * - ``inventory``
     - update
     - Update the quantities of items available after a purchase

A purchase can fail for the following reasons:

- Insufficient inventory for an item
- An order could not be completed
- The system went offline

If the payment fails, you can perform a transaction that includes all of
the data changes to ensure you avoid making any partial updates that
might cause data consistency issues for future operations.

Sample Data
~~~~~~~~~~~

The code examples use the following sample data in the ``testdb``
database:

- A document in the ``customers`` collection that describes a customer and
  their orders.
- Documents in the ``inventory`` collection that include quantities and
  descriptions of all items.

The following document is in the ``customers`` collection:

.. code-block:: json

   { _id: 98765, orders: [] }

The following documents are in the ``inventory`` collection:

.. code-block:: json

   { item: "sunblock", item_id: 5432, qty: 85 },
   { item: "beach towel", item_id: 7865, qty: 41 }

The code examples also perform operations on the ``orders`` collection, but
this collection does not contain any data before the transaction is
performed.

The code examples use the ``cart`` and ``payment`` variables to represent
a sample list of items purchased and the order payment details. The
following code describes the contents of the ``cart`` and ``payment`` variables:

.. code-block:: javascript

   const cart = [
     { item: 'sunblock', item_id: 5432, qty: 1, price: 5.19 },
     { item: 'beach towel', item_id: 7865, qty: 2, price: 15.99 }
   ];
   const payment = { customer: 98765, total: 37.17 };

.. important::
   
   If you are connected to a deployment running MongoDB Server version
   4.2 or earlier, you can perform write operations in a transaction
   only on collections that already exist. Starting in Server version 4.4, the
   server automatically creates collections when you perform operations
   on them in a transaction. To learn more about this behavior,
   see :manual:`Create Collections and Indexes in a Transaction
   </core/transactions/#create-collections-and-indexes-in-a-transaction>`
   in the Server manual.

.. _nodejs-transaction-core-api-example:

Core API Implementation
~~~~~~~~~~~~~~~~~~~~~~~

The code example in this section demonstrates how to use the Core API to
perform a multi-document transaction in a session. In this example, the
transaction reflects the actions needed when a customer purchases items from
your store.

This example shows how to perform the following actions:

1. Start a session
#. Start a transaction with transaction options
#. Perform read and write operations in the session to record the purchase
#. Commit the transaction, or end it if the driver encounters an error
#. End the session

.. literalinclude:: /code-snippets/transactions/txn-core.js
   :language: javascript
   :linenos:
   :emphasize-lines: 2-6,8,10,19,32,41,49,51,55-59,63,65
   :start-after: start placeOrder
   :end-before: end placeOrder

You must pass the session object to each CRUD operation that
you want to run in that session.

.. important:: Use a Session with the Client That Started It
   
   Starting in version 6.0 of the {+driver-short+}, the driver 
   throws an error if you provide a session from one ``MongoClient``
   instance to a different client instance.

   For example, the following code generates an
   ``MongoInvalidArgumentError`` error because it creates
   a ``ClientSession`` instance from the ``client1`` client, but provides
   this session to the ``client2`` client for a write operation:

   .. code-block:: js
      :emphasize-lines: 2
      
      const session = client1.startSession();
      client2.db('myDB').collection('myColl').insertOne({ name: 'Jane Eyre' }, { session });

The code and comments in the ``catch`` block demonstrate how you can identify
the server transaction errors and where you can place your logic to handle
them. Make sure to import the ``MongoError`` type from the driver
package as shown in the following sample import statement:

.. code-block:: javascript

   const { MongoError, MongoClient } = require('mongodb');

The :ref:`Transaction Result <nodejs-transaction-example-payment-result>`
section describes what data your collections should contain after you
successfully perform the transaction.

.. tip::
   
   To view an example that uses the Convenient Transaction API, see the
   :ref:`node-usage-convenient-txn` usage example.

.. _nodejs-transaction-example-payment-result:

Transaction Result
~~~~~~~~~~~~~~~~~~

When your application completes the payment transaction, the collections
in the database should contain the customer and order updates. 
If an error interrupts the transaction, none of the changes should be
visible in your database.

The ``customers`` collection should contain the customer document with an
order ``_id`` appended to the orders field:

.. code-block:: json
   :copyable: false

   {
     "_id": 98765,
     "orders": [
       "61dc..."
     ]
   }

The ``inventory`` collection should contain updated quantities for the
items ``"sunblock"`` and ``"beach towel"``:

.. code-block:: json
   :copyable: false

   [
     {
       "_id": ...,
       "item": "sunblock",
       "item_id": 5432,
       "qty": 84
     },
     {
       "_id": ...,
       "item": "beach towel",
       "item_id": 7865,
       "qty": 39
     }
   ]

The ``orders`` collection should contain the order and payment
information:

.. code-block:: json
   :copyable: false

   [
     {
       "_id": "...",
       "customer": 98765,
       "items": [
         {
           "item": "sunblock",
           "item_id": 5432,
           "qty": 1,
           "price": 5.19
         },
         {
           "item": "beach towel",
           "item_id": 7865,
           "qty": 2,
           "price": 15.99
         }
       ],
       "total": 37.17
     }
   ]

