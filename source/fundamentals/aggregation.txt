===========
Aggregation
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use **aggregation operations** in
the MongoDB Node.js driver.

Aggregation operations function to process data in your MongoDB
collections and return computed results. MongoDB's aggregation framework
allows you to create a pipeline that consists of one or more stages,
each of which executes a specific operation on your data.

You can think of the aggregation framework as similar to an automobile factory.
Automobile manufacturing requires the use of assembly lines that are
comprised of assembly stations. Each station is equipped with specialized tools, such as
drills, welders, or other machinery. The factory transforms and
assembles the initial raw parts and materials into finished products.

The **aggregation pipeline** is the assembly line, **aggregation stages** are the assembly stations, and
**operator expressions** are the specialized tools.

Aggregation vs. Find Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using ``find`` operations, you can:

- select *which documents* to return
- select *which fields* to return
- sort the results

Using ``aggregation`` operations, you can:

- perform all ``find`` operations
- rename fields
- calculate fields
- summarize data
- group values

The aggregation framework includes a wide array of computational and
descriptive operators that allow you to produce computed results,
whereas ``find`` operations provide a very limited number of data
processing tools. 

Note that aggregation operations have some :manual:`limitations </core/aggregation-pipeline-limits/>`:

- Returned documents must not violate the :manual:`BSON-document size limit </reference/limits/#mongodb-limit-BSON-Document-Size>`
  of 16 megabytes.

- Pipeline stages have a memory limit of 100 megabytes by default. If required, you may exceed this limit by setting the ``allowDiskUse``
  property of ``AggregateOptions`` to ``true``. See the
  :node-api-4.0:`AggregateOptions API documentation <interfaces/aggregateoptions.html>`
  for more details.

.. important:: ``$graphLookup`` exception

   The :manual:`$graphLookup
   </reference/operator/aggregation/graphLookup/>` stage has a strict
   memory limit of 100 megabytes and will ignore ``allowDiskUse``.

Useful References
~~~~~~~~~~~~~~~~~

- :manual:`Aggregation pipeline </core/aggregation-pipeline/>`
- :manual:`Aggregation stages </meta/aggregation-quick-reference/#stages>`
- :manual:`Operator expressions </meta/aggregation-quick-reference/#operator-expressions>`

Runnable Examples
-----------------

Base Setup
~~~~~~~~~~

Create a new Node.js file called ``AggTour.js`` and include the following statements:

.. code-block:: javascript

   const MongoClient = require('mongodb').MongoClient;
   const assert = require('assert');

Connect to a MongoDB Deployment
+++++++++++++++++++++++++++++++

.. code-block:: javascript

   // Connect to your MongoDB deployment.
   const uri = 'mongodb://localhost:27017';

   // Create or select an existing database.
   const dbName = 'aggregationTest';

   // Create a new MongoClient.
   const client = new MongoClient(uri);

   // Use connection method to connect to the Server.
   client.connect(function(err, client) {
        assert.equal(null, err);
        console.log("Connected correctly to server");
   });

.. tip::

   For information on connecting to your MongoDB deployment, see the :ref:`Connection Guide <connection>`.

Insert Sample Data
++++++++++++++++++

The examples in this guide use a collection of documents corresponding
to information about 10 dining establishments. Insert the sample data
into the ``restaurants`` collection of the ``aggregationTest`` database:

.. code-block:: javascript

   // Select a database for use. 
   const db = client.db(dbName);

   // Select or create a collection.
   const coll = db.collection("restaurants");
   
   // Create an array of documents to insert.
   const docs = [
        { "name": "Sun Bakery Trattoria", "contact": { "phone": "386-555-0189", "email": "SunBakeryTrattoria@example.org", "location": [-74.0056649, 40.7452371] }, "stars": 4, "categories": ["Pizza", "Pasta", "Italian", "Coffee", "Sandwiches"] },
        { "name": "Blue Bagels Grill", "contact": { "phone": "786-555-0102", "email": "BlueBagelsGrill@example.com", "location": [-73.92506, 40.8275556] }, "stars": 3, "categories": ["Bagels", "Cookies", "Sandwiches"] },
        { "name": "Hot Fresh Bagels", "contact": { "phone": "435-555-0190", "email": "HotFreshBagels@example.net", "location": [-74.0707363, 40.59321569999999] }, "stars": 4, "categories": ["Bagels", "Sandwiches", "Coffee"] },
        { "name": "Cafe au Late", "contact": { "phone": "264-555-0171", "email": "CafeauLate@example.net", "location": [-73.96485799999999, 40.761899] }, "stars": 4, "categories": ["Bakery", "Cafe", "Coffee", "Dessert"] },
        { "name": "Green Feast Pizzeria", "contact": { "phone": "840-555-0102", "email": "GreenFeastPizzeria@example.com", "location": [-74.1220973, 40.6129407] }, "stars": 2, "categories": ["Pizza", "Italian"] },
        { "name": "Go Pasta", "contact": { "phone": "769-555-0152", "email": "GoPasta@example.com", "location": [-73.9446421, 40.7253944] }, "stars": 0, "categories": ["Pasta", "Italian", "Buffet", "Cafeteria"] },
        { "name": "Liz's Coffee Bar", "contact": { "phone": "644-555-0193", "email": "LizCoffeeBar@example.net", "location": [-74.0166091, 40.6284767] }, "stars": 5, "categories": ["Coffee", "Cafe", "Bakery", "Chocolates"] },
        { "name": "Oak Steakhouse", "contact": { "phone": "990-555-0165", "email": "OakSteakhouse@example.com", "location": [-73.9365108, 40.8497077] }, "stars": 0, "categories": ["Steak", "Seafood"] },
        { "name": "Petit Cookie", "contact": { "phone": "604-555-0149", "email": "PetitCookie@example.org", "location": [-73.8850023, 40.7494272] }, "stars": 4, "categories": ["Bakery", "Cookies", "Cake", "Coffee"] },
        { "name": "Modern Eats", "contact": { "phone": "229-555-0197", "email": "ModernEats@example.org", "location": [-73.9799932, 40.7660886] }, "stars": 3, "categories": ["Steak", "Salad", "American"] }
    ];

    // This option prevents additional documents from being inserted if one fails.
    const options = { ordered: true };

    const result = await coll.insertMany(docs, options);

Basic Aggregation Example
~~~~~~~~~~~~~~~~~~~~~~~~~

To perform an aggregation, pass a list of aggregation stages to the 
``collection.aggregate()`` method.

In the following example, the aggregation pipeline:

- Uses a :manual:`$match </reference/operator/aggregation/match/>` stage to filter for documents whose
  ``categories`` array field contains the element ``Bakery``.

- Uses a :manual:`$group </reference/operator/aggregation/group/>` stage to group the matching documents by the ``stars``
  field, accumulating a count of documents for each distinct value of ``stars``.

.. code-block:: javascript
   
   const pipeline = [
            {
                '$match': {
                    'categories': 'Bakery'
                }
            }, {
                '$group': {
                    '_id': '$stars',
                    'count': {
                        '$sum': 1
                    }
                }
            }
        ];

   const aggCursor = coll.aggregate(pipeline);
   await aggCursor.forEach(doc => console.log(doc));

This operation should produce the following results:

.. code-block:: none
   :copyable: false

   {"_id": 5, "count": 1}
   {"_id": 4, "count": 2}
   
For more information, see the :node-api-4.0:`aggregate() API documentation <classes/collection.html#aggregate>`.

Additional Aggregation Examples
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can find another `aggregation framework example
<https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-analyze-data-using-the-aggregation-framework>`_
in the Quick Start tutorials. 