===========
Aggregation
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use **aggregation operations** in
the MongoDB Node.js driver.

Aggregation operations are expressions that you can execute against data in your MongoDB
collections to return summarized and computed results. MongoDB's aggregation framework
allows you to create a pipeline that consists of one or more stages,
each of which performs a specific operation on your data.

You can think of the aggregation framework as similar to an automobile factory.
Automobile manufacturing requires the use of assembly stations organized
into assembly lines. Each station has specialized tools, such as
drills, welders, or other machinery. The factory transforms and
assembles the initial parts and materials into finished products.

The **aggregation pipeline** is the assembly line, **aggregation stages** are the assembly stations, and
**operator expressions** are the specialized tools.

Aggregation vs. Query Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using ``find`` operations, you can:

- select *which documents* to return
- select *which fields* to return
- sort the results

Using ``aggregation`` operations, you can:

- perform all ``find`` operations
- rename fields
- calculate fields
- summarize data
- group values

The aggregation framework uses a variety of :manual:`expression
operators </reference/operator/aggregation/>` that 
allow you to group and modify data to produce a single result.

Aggregation operations have some :manual:`limitations </core/aggregation-pipeline-limits/>`:

- Returned documents must not violate the :manual:`BSON-document size limit </reference/limits/#mongodb-limit-BSON-Document-Size>`
  of 16 megabytes.

- Pipeline stages have a memory limit of 100 megabytes by default. If necessary, you may exceed this limit by setting the ``allowDiskUse``
  property of ``AggregateOptions`` to ``true``. See the
  :node-api-4.0:`AggregateOptions API documentation <interfaces/aggregateoptions.html>`
  for more details.

.. important:: ``$graphLookup`` exception

   The :manual:`$graphLookup
   </reference/operator/aggregation/graphLookup/>` stage has a strict
   memory limit of 100 megabytes and will ignore ``allowDiskUse``.

Useful References
~~~~~~~~~~~~~~~~~

- :manual:`Aggregation pipeline </core/aggregation-pipeline/>`
- :manual:`Aggregation stages </meta/aggregation-quick-reference/#stages>`
- :manual:`Operator expressions </meta/aggregation-quick-reference/#operator-expressions>`

Runnable Examples
-----------------

Create a new Node.js file called ``AggTour.js`` and connect to your
MongoDB deployment to follow this example.

.. tip::

   For information on connecting to your MongoDB deployment, see the :ref:`Connection Guide <connection>`.
   
Insert Sample Data
~~~~~~~~~~~~~~~~~~

The example uses a collection of documents corresponding
to information about 10 dining establishments. Insert the sample data
into the ``restaurants`` collection of the ``aggregationTest`` database:

.. code-block:: javascript

   const db = client.db("aggregationTest");
   const coll = db.collection("restaurants");
   
   const docs = [
        { "name": "Sun Bakery Trattoria", "stars": 4, "categories": ["Pizza", "Pasta", "Italian"] },
        { "name": "Blue Bagels Grill", "stars": 3, "categories": ["Bagels", "Cookies", "Sandwiches"] },
        { "name": "Hot Fresh Bagels", "stars": 4, "categories": ["Bagels", "Sandwiches", "Coffee"] },
        { "name": "Cafe au Late", "stars": 4, "categories": ["Bakery", "Cafe", "Coffee", "Dessert"] },
        { "name": "Green Feast Pizzeria", "stars": 2, "categories": ["Pizza", "Italian"] },
        { "name": "Go Pasta", "stars": 0, "categories": ["Pasta", "Italian", "Cafeteria"] },
        { "name": "Liz's Coffee Bar", "stars": 5, "categories": ["Coffee", "Cafe", "Bakery"] },
        { "name": "Oak Steakhouse", "stars": 0, "categories": ["Steak", "Seafood"] },
        { "name": "Petit Cookie", "stars": 4, "categories": ["Bakery", "Cookies", "Cake", "Coffee"] },
        { "name": "Modern Eats", "stars": 3, "categories": ["Steak", "Salad", "American"] }
    ];

    // This option prevents additional documents from being inserted if one fails.
    const options = { ordered: true };

    const result = await coll.insertMany(docs, options);

Aggregation Example
~~~~~~~~~~~~~~~~~~~

To perform an aggregation, pass a list of aggregation stages to the 
``collection.aggregate()`` method.

In the following example, the aggregation pipeline makes use of the
following aggregation stages:

- A :manual:`$match </reference/operator/aggregation/match/>` stage to filter for documents whose
  ``categories`` array field contains the element ``Bakery``.

- A :manual:`$group </reference/operator/aggregation/group/>` stage to group the matching documents by the ``stars``
  field, accumulating a count of documents for each distinct value of ``stars``.

.. code-block:: javascript
   
   const pipeline = [
       {
           '$match': {
               'categories': 'Bakery'
           }
       }, {
           '$group': {
               '_id': '$stars',
               'count': {
                   '$sum': 1
               }
           }
       }
   ];

   const aggCursor = coll.aggregate(pipeline);
   await aggCursor.forEach(doc => console.log(doc));

This operation should produce the following results:

.. code-block:: json
   :copyable: false

   {"_id": 5, "count": 1}
   {"_id": 4, "count": 2}
   
For more information, see the :node-api-4.0:`aggregate() API documentation <classes/collection.html#aggregate>`.

Additional Aggregation Examples
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can find another aggregation framework example `in this MongoDB Blog
post <https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-analyze-data-using-the-aggregation-framework>`_. 
