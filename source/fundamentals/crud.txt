===============
CRUD Operations
===============

.. default-domain:: mongodb

.. toctree::
   :caption: CRUD Operations

   /fundamentals/crud/read-operations
   /fundamentals/crud/write-operations
   /fundamentals/crud/query-document
   /fundamentals/crud/compound-operations

Overview
--------

CRUD (Create, Read, Update, Delete) operations allow you to work with
the data stored inside of MongoDB. CRUD operations fall into two
categories: `read operations <crud-read-operations>`_ and
`write operations <crud-write-operations>`_.

.. note::

   CRUD operations execute **asynchronously** because the driver
   communicates with MongoDB over the network, which is subject to
   latency, timeouts, and other complications that can delay execution
   during synchronous communication. As a result, each CRUD
   method returns a Promise that resolves to the output of that
   operation. A common method of Promise resolution uses
   ``async``/``await`` syntax.

.. _crud-read-operations:

Read Operations
---------------

Read operations find and return documents stored within MongoDB.
There are multiple types of read operation that allow you to
access data in different ways. While some read operations focus on
allowing you to view data that exists in the database, other operations
let you monitor the database for new data that matches certain criteria,
and still other read operations let you apply a series of
transformations and filters to all documents in a collection before
returning a result set. The driver offers methods for each variant of
read operation:

Find
~~~~

If you want to view documents already in a collection, you can use
:doc:`find() </usage-examples/find>` and
:doc:`findOne() </usage-examples/findOne>`. These methods accept a
query document that describes the documents you would like to view.
While ``findOne()`` returns a single document, ``find()`` returns a
:doc:`cursor </fundamentals/crud/read-operations/cursor>` that you can
use to navigate matched documents.

.. example::

   A pizza restaurant wants to find all pizzas ordered by Lemony Snicket
   yesterday. They run the following ``find()`` query on the
   ``orders`` collection:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start find crud example
      :end-before: end find crud example
      :dedent: 4

Aggregate
~~~~~~~~~

If you want to create custom processing pipelines for documents in a
collection, you can use ``aggregate()``. This method accepts a
pipeline of aggregation commands that are run in sequence. These
commands let you filter, summarize, and augment documents in a
collection into a result set for viewing.

.. example::

   A pizza restaurant wants to run a status report on-demand to
   summarize pizza orders over the past week. They run the following
   ``aggregate()`` query on the ``orders`` collection:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start aggregate crud example
      :end-before: end aggregate crud example
      :dedent: 4

Watch / Subscribe
~~~~~~~~~~~~~~~~~

If you want to monitor a collection for new, update, replace, and
deleted documents that match a certain criteria, you can use
``watch()``. This method takes a pipeline of aggregation commands that
are run in sequence on new data whenever write operations are run on
the collection.

.. example::

   A pizza restaurant wants to get a notification whenever a new pizza
   order comes in. They run the following ``watch()`` query on the
   ``orders`` collection:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start watch crud example
      :end-before: end watch crud example
      :dedent: 4

.. note::

   You can customize read operations to
   :doc:`skip </fundamentals/crud/read-operations/skip>` a certain
   number of documents at the beginning of the collection of matched
   documents, :doc:`limit </fundamentals/crud/read-operations/limit>`
   the number of returned documents, and :doc:`sort
   </fundamentals/crud/read-operations/sort>` returned documents in a
   particular order.

.. _crud-write-operations:

Write Operations
----------------

CRUD write operations add, modify, and remove data in MongoDB. Sometimes
this means putting entirely new data into a collection, but other times
it involves changing data that already exists, or even removing it
entirely. There are three distinct write operations: create, update, and
delete. The driver offers methods for each variant of write operation:

Insert
~~~~~~

If you want to add new documents to a collection, you can use
:doc:`insertOne() </usage-examples/insertOne>` or
:doc:`insertMany() </usage-examples/insertMany>`. These methods accept a
single document or a collection of documents respectively. Note that the
driver will generate a unique ``_id`` field automatically for any
inserted documents that lack such a field.

.. example::

   A pizza restaurant creates an order every time a customer requests
   a pizza. They run the following ``insertOne()`` query on the
   ``orders`` collection:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start insert crud example
      :end-before: end insert crud example
      :dedent: 4

Update / Replace
~~~~~~~~~~~~~~~~

If you want to alter existing documents in a collection, you can use
:doc:`updateOne() </usage-examples/updateOne>`,
:doc:`replaceOne() </usage-examples/replaceOne>`, or
:doc:`updateMany() </usage-examples/updateMany>`. These methods
accept a query document that describes the documents you would like to
change and an `update document <updateDocument>`_ that describes
the changes you would like to apply to matched documents.
``replaceOne()`` uses a `replacement document
<replacementDocument>`_ that describes an entirely new document instead
of an update document. You can configure any update operation to behave
as an :doc:`upsert </fundamentals/crud/write-operations/upsert>` instead
of an update.

.. example::

   A pizza restaurant wants to modify the delivery address for an order
   that already exists. They run the following ``updateOne()`` query on
   the ``orders`` collection:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start update crud example
      :end-before: end update crud example
      :dedent: 4

Delete
~~~~~~

If you want to remove existing documents from a collection, you can
use :doc:`deleteOne() </usage-examples/deleteOne>` or
:doc:`deleteMany() </usage-examples/deleteMany>`. These methods accept a
query document that describes the documents you would like to delete.
Delete operations will delete either one (in the case of
``deleteOne()``) or all (in the case of ``deleteMany()``) documents that
match the query.

.. example::

   A pizza restaurant wants to delete a cancelled order. They run the
   following ``deleteOne()`` query on the ``orders`` collection:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start delete crud example
      :end-before: end delete crud example
      :dedent: 4

.. note::

   You can customize write operations to
   :doc:`upsert </fundamentals/crud/write-operations/upsert>` instead of
   update, time out if the method fails to complete within a certain
   period of time, and write with varying levels of resilience in a
   replica set.

Compound operations
-------------------

Some operations combine aspects of read and write operations. Consult
:doc:`compound operations </fundamentals/crud/compound-operations>` to
learn more about these hybrid methods.
