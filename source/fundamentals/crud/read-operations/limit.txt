====================================
Limit the Number of Returned Results
====================================

.. default-domain:: mongodb

Use ``limit`` to cap the number of documents that can be returned from a
read operation. ``limit`` functions as a cap on the maximum number of
documents that the operation can return, but the operation can return
a smaller number of documents if there are not enough documents present
to reach the limit. If ``limit`` is used with the
:doc:`skip </fundamentals/crud/read-operations/skip>` method, the skip applies
first and the limit only applies to the documents left over after
the skip.

Follow the instructions in the examples below to insert data into
a collection and return only certain results from a query using a sort,
a skip, and a limit. Consider a collection containing documents that
describe books. To insert this data into a collection, run the following
operation:

.. code-block:: javascript

   await books.insertMany([
     { "_id": 1, "name": "The Brothers Karamazov", "author": "Dostoyevsky", "length": 824 },
     { "_id": 2, "name": "Les Misérables", "author": "Hugo", "length": 1462 },
     { "_id": 3, "name": "Atlas Shrugged", "author": "Rand", "length": 1088 },
     { "_id": 4, "name": "Infinite Jest", "author": "Wallace", "length": 1104 },
     { "_id": 5, "name": "Cryptonomicon", "author": "Stephenson", "length": 918 },
     { "_id": 6, "name": "A Dance With Dragons", "author": "Tolkein", "length": 1104 },
   ]);

Pass the following sort document to a read operation to ensure that the
operation returns books with longer lengths before books with shorter
lengths. Apply a limit of ``3`` causes this operation to return only the
``3`` longest books:

.. code-block:: javascript
   :emphasize-lines: 4

   // define an empty query document
   const query = {};
   // sort in descending (-1) order by length
   const sort = { length: -1 };
   const limit = 3;
   const cursor = collection.find(query).sort(sort).limit(limit);
   await cursor.forEach(console.dir);

``find()`` returns the following documents sorted from longest length
to shortest length:

.. code-block:: javascript

   { "_id": 2, "title": "Les Misérables", "author": "Hugo", "length": 1462 }
   { "_id": 6, "title": "A Dance With Dragons", "author": "Martin", "length": 1104 }
   { "_id": 4, "title": "Infinite Jest", "author": "Wallace", "length": 1104 }

To see the next three longest books, combine the previous operation with
a skip of ``3``:

.. code-block:: javascript
   :emphasize-lines: 4

   // define an empty query document
   const query = {};
   // sort in ascending (1) order by length
   const sort = { length: 1, author: 1 };
   const limit = 3;
   const skip = 3;
   const cursor = collection.find(query).sort(sort).limit(limit).skip(skip);
   await cursor.forEach(console.dir);

This operation returns the following documents:

.. code-block:: javascript

   { "_id": 3, "title": "Atlas Shrugged", "author": "Rand", "length": 1088 }
   { "_id": 5, "title": "Cryptonomicon", "author": "Stephenson", "length": 918 }
   { "_id": 1, "title": "The Brothers Karamazov", "author": "Dostoyevsky", "length": 824 }

You can combine skip and limit in this way to implement paging for your
collection, allowing users to view only small "slices" of the
collection at once.
