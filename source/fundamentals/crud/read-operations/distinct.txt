.. _node-fundamentals-distinct:

========================
Retrieve Distinct Values
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Use the ``distinct()`` method to retrieve all distinct values for a specified field 
across a collection.

Sample Documents
~~~~~~~~~~~~~~~~

Follow the instructions in the examples below to insert data into a collection and
return the unique values of a given field. Consider the following collection of 
documents that describe restaurants: 

.. code-block:: json

   [
      { "_id": 1, "restaurant": "White Bear", "borough": "Queens", "cuisine": "Chinese" },
      { "_id": 2, "restaurant": "Via Carota", "borough": "Manhattan", "cuisine": "Italian" },
      { "_id": 3, "restaurant": "Borgatti's", "borough": "Bronx", "cuisine": "Italian" },
      { "_id": 4, "restaurant": "Tanoreen", "borough": "Brooklyn", "cuisine": "Middle Eastern" },
      { "_id": 5, "restaurant": "Äpfel", "borough": "Queens", "cuisine": "German" },
      { "_id": 6, "restaurant": "Samba Kitchen", "borough": "Manhattan", "cuisine": "Brazilian" },
   ]

.. include:: /includes/access-cursor-note.rst

Distinct
--------

Use a document field name as a parameter for the ``distinct()`` method to return a 
list of the field's unique values. Optionally, you can specify a ``query`` 
parameter to narrow down your results or an ``options`` parameter to set the 
string comparison language.

Example
```````

Some boroughs, like "``Queens``", are represented multiple times in the restaurant 
documents. However, the following example retrieves only the unique values of the 
``borough`` field: 

.. code-block:: javascript

   // specify "borough" as the field to return values for
   const cursor = collection.distinct("borough");
   await cursor.forEach(console.dir);

This code outputs the following ``borough`` values:

.. code-block:: json
   :copyable: false

   [ "Bronx", "Brooklyn", "Manhattan", "Queens" ]

Query Parameter
~~~~~~~~~~~~~~~

You can define a query parameter to prevent the ``distinct()`` method from returning 
certain distinct values.

Visit :doc:`Specify a Query </fundamentals/crud/query-document>` for more information 
on constructing a query filter.

Example
```````

The following example outputs the distinct values of the ``cuisine`` field but 
excludes restaurants in "``Brooklyn``":

.. code-block:: javascript

   // exclude Brooklyn restaurants from the output
   const query = { borough: { $ne: "Brooklyn" }};

   // find the filtered distinct values of "cuisine"
   const cursor = collection.distinct("cuisine", query);
   await cursor.forEach(console.dir);

In this case, the query filter prevents the ``distinct()`` method from matching a 
"``Middle Eastern``" Brooklyn restaurant. The code outputs the following ``cuisine`` 
values:

.. code-block:: json
   :copyable: false

   [ "Brazilian", "Chinese", "German", "Italian" ]

Options Parameter
~~~~~~~~~~~~~~~~~

You can specify the language collation of the ``distinct()`` method by defining a 
``collation`` field as an ``options`` parameter. This field allows you to set 
language-specific rules for string ordering and comparisons. 

See :doc:`Collations </fundamentals/collations>` for instructions on applying 
collations.

.. note::

   When using the ``options`` parameter, you must also specify a ``query`` parameter. If
   you don't want to use a query filter, define the query as ``{}``.

Example
```````

The following example uses a ``collation`` field to specify German language ordering 
conventions when outputting the distinct ``restaurant`` values:

.. code-block:: javascript

   // define an empty query document
   const query = {};
   // specify German string ordering conventions
   const options = { collation: { locale: "de" }};

   const cursor = collection.distinct("restaurant", query, options);
   await cursor.forEach(console.dir);

In this case, German string ordering conventions place words beginning with "Ä" before
those beginning with "B". The code outputs the following:

.. code-block:: json
   :copyable: false

   [ "Äpfel", "Borgatti's", "Samba Kitchen", "Tanoreen", "Via Carota", "White Bear" ]

Without specifying a ``collation`` field, the output order would follow default
binary collation rules. These rules place words beginning with "Ä" after the those
with unaccented first letters:

.. code-block:: json
   :copyable: false

   [ "Borgatti's", "Samba Kitchen", "Tanoreen", "Via Carota", "White Bear", "Äpfel" ]

Additional Information
----------------------

For a runnable example of retrieving distinct values, see :ref:`node-usage-distinct`.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the ``distinct()`` method and its parameters, you can visit the 
`API documentation <{+api+}/classes/Collection.html#distinct>`__.


