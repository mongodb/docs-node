.. _node-crud-write-read-pref:

===============================================
Specify How CRUD Operations Run on Replica Sets
===============================================

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :keywords: node.js, customize, preferences, replica set, consistency

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the **write concern**, **read concern**, and
**read preference** configurations to modify the way that MongoDB executes
create, read, update, and delete (CRUD) operations on replica sets.

You can set write concern, read concern, and read preference options at the following
levels:

- Client, which sets the *default for all operation executions* unless overridden
- Session
- Transaction
- Database
- Collection

These options allow you to customize the consistency and availability of the data in your
replica sets.

Write Concern
-------------

The write concern specifies the level of acknowledgement requested from MongoDB for write
operations, such as an insert or update, before the operation successfully returns.
Operations that do not specify an explicit write concern inherit the global default write
concern settings.

For more information, see :manual:`Write Concern </reference/write-concern/>` in the
Server manual. For more detailed API descriptions, see the `WriteConcern API documentation
<{+api+}/classes/WriteConcern.html>`__.

A ``WriteConcern`` accepts the following parameters:

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Parameter
     - Description
  
   * - ``w`` *(optional)*
     - | Requests acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags 
       | **Type:** `W <{+api+}/types/W.html>`__

   *  - ``wtimeoutMS`` *(optional)*
      - | Specifies a time limit to prevent write operations from blocking indefinitely 
        | **Type:** number

   * - ``journal`` *(optional)*
     - | Requests acknowledgment that the write operation has been written to the on-disk journal 
       | **Type:** boolean

Example: Set the Write Concern for a Single Write Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This code uses custom ``WriteConcern`` settings while creating new a document:

.. code-block:: js

   myDB.myCollection.insertOne( 
      {
        name: "anotherDocumentName"
      }, {
        writeConcern: { w: 2, wtimeoutMS: 5000 }
      } 
   );

Example: Create and Use a New Write Concern using the fromOptions and apply Methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
This code use the ``fromOptions`` method to construct a ``WriteConcern`` from the options of an
existing database, ``myDB``. Note that ``myDB`` could be replaced with any entity that
includes a write concern option.

.. code-block:: js

   const newWriteConcern = WriteConcern.fromOptions(myDB);
   const myDoc { name: "New Document" };
   WriteConcern.apply(myDoc,newWriteConcern);

Read Concern
------------

The read concern specifies:

- the level of `consistency <https://www.mongodb.com/docs/current/core causal-consistency-read-write-concerns/>`__ across replica sets

- the `isolation
  <https://www.mongodb.com/docs/current/core/read-isolation-consistency-recency/>`__
  guarantees maintained during a query 

Lower consistency requirements may reduce latency. The default read concern level is
``local``. This means that the client returns the data from the replica set member that the
client is connected to, with no guarantee that the data has been written to all replica set members.

For more information about read concerns or read concern levels, see 
:manual:`Read Concern </reference/read-concern/>` in the Server manual. For more detail on
the ``ReadConcern`` type and definitions of the read concern levels, see the `ReadConcern <{+api+}/classes/ReadConcern.html>`__ in
the API documentation.

Example: Set the Read Concern Level of an Aggregation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This code sets the read concern level of an an aggregation to ``"majority"``:

.. code-block:: js

   const pipeline = [
      {"$match": {
        category: "KITCHENWARE",
      }},
      {"$unset": [
        "_id",
        "category",
      ]}
    ]; 
   
   result = await myDB.collection("mycollection")
      .aggregate(
        pipeline, 
        { readConcern: {
          level: "available" 
          } 
        } 
      );

For more information about aggregates, see the :ref:`nodejs-aggregation` page.
   
Example: Change the Read Concern of a Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This code changes the read concern level of a database to ``"local"``:

.. code-block:: js

   const options = { readConcern: { level: "local" } };
   const myDB = client.db("db_name", options);

Read Preference
---------------

The read concern determines which member of a replica set MongoDB reads when executing a
query. The default mode, ``primary``, specifies that operations are read from the primary member of the replica set.

Read Preference Options
~~~~~~~~~~~~~~~~~~~~~~~

``mode``
`````````
The preference modes are defined by an enumerable set of the following options. For
descriptions of the available modes, see :manual:`Read Preference
</core/read-preference/#read-preference-modes-1>` in the Server manual.

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Mode
     - Description

   * - ``"primary"``
     - All operations read from the primary member of the replica set.

   * - ``"primaryPreferred"``
     - Most operations read from the primary member. However, if the primary member is
       busy, the operation reads from a secondary member that meets the
       :ref:`<read_preference_options>` criteria.

   * - ``"secondary"``
     - All operations read from a secondary member of the replica set. If a
       :ref:`read_preference_options` value is defined, it will be used to determine an
       appropriate member. We recommend setting a ``maxStalenessSeconds`` value to avoid
       returning stale data.

   * - ``"secondaryPreferred"``
     - Most operations read from a secondary member of the replica set. If a
       :ref:`read_preference_options` value is defined, it will be used to determine an
       appropriate member. If none of the secondary members meet the staleness criteria,
       the operation reads from the primary.

   * - ``"nearest"``
     - Operations read from a member that has a latency within the acceptable range.
       Whether a member is primary or secondary is not considered. We recommend setting a
       :ref:`read_preference_options` value to avoid returning stale data.

``tags`` *(optional)*
`````````````````````

A list of tags used to prioritize secondary members by using tags associated with each
member. Tags cannot be used with  ``"primary"`` mode. For more information about tag sets
or managing member tags, see :manual:`Read Preference Tag Set Lists
</core/read-preference-tags/#read-preference-tag-set-lists/>`.

.. _read_preference_options:

``options`` *(optional)*
````````````````````````

The following options may be sent as a `ReadPreferenceOptions
<{+api+}/interfaces/ReadPreferenceOptions.html>`__ object:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Mode
     - Description

   * - ``hedge``
     - | Sends each query to multiple shards and returns the first response. 
       | For more information, see :manual:`Hedged Read Option </core/read-preference-hedge-option/>`.

   * - ``maxStalenessSeconds``
     - | The maximum number of seconds a secondary member can lag behind the primary member before the data is considered stale. We recommend setting this option for ``secondary``, ``secondaryPreferred``, and ``nearest`` modes to avoid returning stale data. 
       | For more information, see :manual:`Read Preference maxStalenessSeconds </core/read-preference-staleness/>`.

Example: Set Read Preference and Concerns for a Transaction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This code sets the read preference, read concern, and write concern of a transaction:

.. code-block:: js

   const transactionOptions = {
      readPreference: "primary",
      readConcern: { level: "local" },
      writeConcern: { w: "majority" },
   };

   const session = client.startSession();
   session.startTransaction(transactionOptions);
    ...
   await session.commitTransaction();
   await session.endSession();

For more information about transactions, see :ref:`nodejs-transactions`.

Example: Set the Read Preference of a Cluster in the Connection String
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This code sets the read preference mode of a existing cluster to ``"secondary"``:

.. code-block:: js

   const uri = "mongodb+srv://<user>:<password>@@<cluster-url>?readPreference=secondary&maxStalenessSeconds=120";
   const client = new MongoClient(uri);

This example also sets the ``maxStalenessSeconds`` option. For more information about connection string options, see the :manual:`Connection String Options </reference/connection-string/#connection-string-options>`
section in the manual.

API Documentation
-----------------

To learn more about the methods and types mentioned in this guide, see the following API
documentation:

- `API WriteConcern <{+api+}/classes/WriteConcern.html>`__
- `API ReadConcern <{+api+}/classes/ReadConcern.html>`__
- `API ReadPreference <{+api+}/classes/ReadPreference.html>`__