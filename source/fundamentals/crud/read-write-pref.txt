.. _node-crud-write-read-pref:

===============================================
Specify How CRUD Operations Run on Replica Sets
===============================================

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :keywords: node.js, customize, preferences, replica set, consistency

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the **write concern**, **read concern**, and
**read preference** configurations to modify the way that the {+driver-long+} executes
create, read, update, and delete (CRUD) operations on replica sets.

You can set write concern, read concern, and read preference options at the following
levels:

- Client, which sets the *default for all operation executions* unless overridden
- Session
- Transaction
- Database
- Collection

These options allow you to customize the consistency and availability of the data in your
replica sets.

Write Concern
-------------

The write concern specifies the level of acknowledgement requested from MongoDB for write
operations, such as an insert or update, before the operation successfully returns.
Operations that do not specify an explicit write concern inherit the global default write
concern settings.

For more information, see :manual:`Write Concern </reference/write-concern/>` in the
server manual. For more detailed API descriptions, see the `WriteConcern API documentation
<{+api+}/classes/WriteConcern.html>`__.

A ``WriteConcern`` accepts the following parameters:

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Parameter
     - Description
  
   * - ``w`` *(optional)*
     - | request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags 
       | **Type:** `W <{+api+}/types/W.html>`__

   *  - ``wtimeoutMS`` *(optional)*
      - | specify a time limit to prevent write operations from blocking indefinitely 
        | **Type:** number

   * - ``journal`` *(optional)*
     - | request acknowledgment that the write operation has been written to the on-disk journal 
       | **Type:** boolean

Example: Set a ``WriteConcern`` for a Single Write Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This code uses custom ``WriteConcern`` settings while creating new a document. Note that
in this case, the parameters are included as a Hash, rather than in an instantiated object:

.. code-block:: js

   db.myCollection.insertOne( 
      {
        name: 'anotherDocumentName'
      }, {
        writeConcern: { w: 2, wtimeoutMS: 5000 }
      } 
   )

Example: Create a New ``WriteConcern`` from an Existing Database's ``WriteConcern``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
Use the ``fromOptions`` method to construct a ``WriteConcern`` from an existing set of
options or ``WriteConcern``:

.. code-block:: js

  newWriteConcern = WriteConcern.fromOptions(db.writeConcern)


Read Concern
------------

The read concern determines the level of `consistency
<https://www.mongodb.com/docs/current/core/causal-consistency-read-write-concerns/>`__
across replica sets and the `isolation
<https://www.mongodb.com/docs/current/core/read-isolation-consistency-recency/>`__
guarantees maintained during a query. You can specify your read concern level by
constructing an instance of a ``ReadConcern`` or by specifying the options in an object. 

Lower consistency requirements may reduce latency. The default read concern level is
``local``. This means that the client returns the data from the local instance, with no
guarantee that the data has been written to all replica set members.

For more information about read concerns or read concern levels, see 
:manual:`Read Concern </reference/read-concern/>` in the server manual. For more detailed 
API descriptions, see the `ReadConcern API documentation <{+api+}/classes/ReadConcern.html>`__.
   
The levels are defined by an enumerable set of the following options:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - ReadConcernLevel
     - Description

   * - ``'local'``
     - | The query returns the instance’s most recent data. 
       | For more information, see the :rapid:`Read Concern specification </reference/read-concern-local/#mongodb-readconcern-readconcern.-local->`.

   * - ``'available'``
     - The query returns data from the instance with no guarantee that the data has been
       written to a majority of the replica set members. 
       | For more information, see the :rapid:`Read Concern specification </reference/read-concern-available/#mongodb-readconcern-readconcern.-available->`.

   * - ``'majority'``
     - | The query returns the instance’s most recent data acknowledged as having been written to a majority of members in the replica set. 
       | For more information, see the :rapid:`Read Concern specification </reference/read-concern-majority/#mongodb-readconcern-readconcern.-majority->`.

   * - ``'linearizable'``
     - | The query returns data that reflects all successful writes issued that had a write concern of ``majority`` and were acknowledged before the start of the read operation. 
       | For more information, see the :rapid:`Read Concern specification </reference/read-concern-linearizable/#mongodb-readconcern-readconcern.-linearizable->`.

   * - ``'snapshot'``
     - | The query returns a complete copy of the data in a ``mongod`` instance at a specific point in time. Only available for operations within multi-document transactions. 
       | For more information, see the :rapid:`Read Concern specification </reference/read-concern-snapshot/#mongodb-readconcern-readconcern.-snapshot->`.

Example: Set the read concern level of a Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This code sets the read concern level of an existing cluster to ``'majority'``:

.. code-block:: js

   atlas clusters advancedSettings update myCluster --readConcern 'majority'

Example: Set the read concern level of an Aggregation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This code sets the read concern level of an an aggregation to ``'majority'``:

.. code-block:: js

   const pipeline = [
      {"$match": {
        category: "KITCHENWARE",
      }},
      {"$unset": [
        "_id",
        "category",
      ]}
    ]; 
   
   result = await db.collection("mycollection").aggregate(pipeline, { readConcern: { level: 'available' } } );

Read Preference
---------------

The read concern determines which member of a replica set is read. The default mode is to
read from the primary member of a replica set.

Read Preference Options
~~~~~~~~~~~~~~~~~~~~~~~

``mode``
`````````
The preference modes are defined by an enumerable set of the following options. More
detailed descriptions can be found in the :manual:`Read Preference Modes guide
</core/read-preference/#read-preference-modes-1>`

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Mode
     - Description

   * - ``'primary'``
     - All operations read from the primary member of the replica set.

   * - ``'primaryPreferred'``
     - Most operations read from the primary member. However, if the primary member is
       busy, the operation reads from a secondary member that meets the
       :ref:`<read_preference_options>` criteria.

   * - ``'secondary'``
     - All operations read from a secondary member of the replica set. If a
       :ref:`read_preference_options` value is defined, it will be used to determine an
       appropriate member. We recommend setting a ``maxStalenessSeconds`` value to avoid
       returning stale data.

   * - ``'secondaryPreferred'``
     - Most operations read from a secondary member of the replica set. If a
       :ref:`read_preference_options` value is defined, it will be used to determine an
       appropriate member. If none of the secondary members meet the staleness criteria,
       the operation reads from the primary.

   * - ``'nearest'``
     - Operations read from a member that has a latency within the acceptable range.
       Whether a member is primary or secondary is not considered. We recommend setting a
       :ref:`read_preference_options` value to avoid returning stale data.

``tags`` *(optional)*
`````````````````````

A list of tags used to prioritize secondary members by using tags associated with each
member. Tags cannot be used with  ``'primary'`` mode. For more information about tag sets
or managing member tags, see :manual:`Read Preference Tag Set Lists
</core/read-preference-tags/#read-preference-tag-set-lists/>`.

.. _read_preference_options:

``options`` *(optional)*
````````````````````````

The following options may be sent as a `ReadPreferenceOptions
<{+api+}/interfaces/ReadPreferenceOptions.html>`__ object:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Mode
     - Description

   * - ``hedge``
     - | Sends each query to multiple shards and returns the first response. 
       | For more information, see :manual:`Hedged Read Option </core/read-preference-hedge-option/>`.

   * - ``maxStalenessSeconds``
     - | The maximum number of seconds a secondary member can lag behind the primary member before the data is considered stale. We recommend setting this option for ``secondary``, ``secondaryPreferred``, and ``nearest`` modes to avoid returning stale data. 
       | For more information, see :manual:`Read Preference maxStalenessSeconds </core/read-preference-staleness/>`.

Example: Set the ``ReadPreferences`` for a Session 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This code sets the read preference mode of a session to ``'secondaryPreferred'``:

.. code-block:: js

    const session = client.startSession({ 
        defaultTransactionOptions: { readConcern: { level: 'secondaryPreferred' } } 
    });
    session.withTransaction(
      async () => {
        const collection = client.db('test').collection('mycollection');
        const result = await collection.findOne({ name: 'John Doe' }).withReadPreference('secondary');
        console.log(result);
    });


API Documentation
-----------------

To learn more about the methods and types mentioned in this guide, see the following API
documentation:

- `API WriteConcern <{+api+}/classes/WriteConcern.html>`__
- `API ReadConcern <{+api+}/classes/ReadConcern.html>`__
- `API ReadPreference <{+api+}/classes/ReadPreference.html>`__