.. _node-crud-write-read-pref:

===================================
Modify Execution of CRUD Operations
===================================

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :keywords: node.js, customize, preferences, replica set, consistency

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to modify the way that the {+driver-long+} executes create, read, update, and delete (CRUD) operations using **write concern**, **read concern**, and **read preference** configurations for replica sets.

You can set write concern, read concern, and read preference options at
the following levels:

- Client level, which sets the *default for all operation executions*
  unless overridden
- Session level
- Transaction level
- Database level
- Collection level

These options allow you to customize the consistency and availability of the data in your replica sets.

Write Concern
-------------

A write concern describes the level of acknowledgement requested from MongoDB for write operations, such as an insert or update, before the operation is returned as successful. 
Operations which do not specify an explicit write concern inherit the global default write concern settings.

For more information, see :manual:`Write Concern </reference/write-concern/>`. For more detailed API descriptions, see `API WriteConcern <{+api+}classes/WriteConcern.html>`__

Constructor
~~~~~~~~~~~

A ``WriteConcern`` can define all, some or none of its accepted parameters:

.. code-block:: js

   new WriteConcern(w, wtimeoutMS, journal): WriteConcern

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Parameter
     - Description
  
   * - ``w`` *(optional)*
     - | request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags 
       | **Type:** `W ***************** <{+api+}/types/W.html>`__

   *  - ``wtimeoutMS`` *(optional)*
      - | specify a time limit to prevent write operations from blocking indefinitely
        | **Type:** number

   * - ``journal`` *(optional)*
     - | request acknowledgment that the write operation has been written to the on-disk journal
       | **Type:** boolean

``apply`` Method *(static)*
````````````````````````````

This method defines or updates the ``WriteConcern`` of a command document.

.. code-block:: js

   apply(command, writeConcern): Document

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Parameter
     - Description

   * - ``command``
     - | **Type:** Document

   * - ``writeConcern``
     - | **Type:** WriteConcern

Update a ``WriteConcern`` for an existing document
``````````````````````````````````````````````````

This code updates the write concern of an existing document:

.. code-block:: js

   document = {}
   writeConcern = new WriteConcern(2, 30, true)
   WriteConcern.apply(document, writeConcern)


.. tip::
   
   Use the ``fromOptions`` method to construct a ``WriteConcern`` from an existing set of options or ``WriteConcern``:

   .. code-block:: js

      writeConcern2 = WriteConcern.fromOptions(writeConcern1)


Read Concern
------------

The read concern determines the level of consistency across replica sets will be maintained during a query during a query. Lower consistency requirements may reduce latency. The default read concern level is ``local``, meaning that the client returns the instance’s most recent data, with no guarantee that the data has been written to a majority of the replica set members.

For more information, see :manual:`Read Concern </reference/read-concern/>`. For more detailed API descriptions, see `API ReadConcern <{+api+}/classes/ReadConcern.html>`__

Constructor
~~~~~~~~~~~

A new ``ReadConcern`` takes a ``ReadConcernLevel`` string as a parameter. 

.. code-block:: js

   new ReadConcern(readConcernLevel): ReadConcern
   
The levels are defined by an enumerable set of the following options:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - ReadConcernLevel
     - Description

   * - ``'local'``
     - | The query returns the instance’s most recent data.
       | For more information, see the :rapid:`Read Concern specification </reference/read-concern-local/#mongodb-readconcern-readconcern.-local->`.

   * - ``'available'``
     - The query returns data from the instance with no guarantee that the data has been written to a majority of the replica set members. 
       | For more information, see the :rapid:`Read Concern specification </reference/read-concern-available/#mongodb-readconcern-readconcern.-available->`.

   * - ``'majority'``
     - | The query returns the instance’s most recent data acknowledged as having been written to a majority of members in the replica set.  
       | For more information, see the :rapid:`Read Concern specification </reference/read-concern-majority/#mongodb-readconcern-readconcern.-majority->`.

   * - ``'linearizable'``
     - | The query returns data that reflects all successful writes issued with a write concern of ``majority`` and acknowledged prior to the start of the read operation. 
       | For more information, see the :rapid:`Read Concern specification </reference/read-concern-linearizable/#mongodb-readconcern-readconcern.-linearizable->`.

   * - ``'snapshot'``
     - | The query returns a complete copy of the data in a ``mongod`` instance at a specific point in time. Only available for operations within multi-document transactions.  
       | For more information, see the :rapid:`Read Concern specification </reference/read-concern-snapshot/#mongodb-readconcern-readconcern.-snapshot->`.

Specify a ``ReadConcern`` for a collection
``````````````````````````````````````````

This code specifies the read concern level of an existing collection to ``'majority'``:

.. code-block:: js

   rc = new ReadConcern('majority')
   db.collection.find({}).options{ readConcern: rc }

Read Preference
---------------

The read concern determines how queries are routed (i.e. which member of a replica set is read). The default mode is to read from the primary member of a replica set.

Constructor
~~~~~~~~~~~

.. code-block:: js

   new ReadPreference(mode, tags?, options?): ReadPreference

``mode``
`````````

The preference modes are defined by an enumerable set of the following options. More detailed descriptions can be found in the :manual:`Read Preference Modes guide </core/read-preference/#read-preference-modes-1>`

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Mode
     - Description

   * - ``'primary'``
     - All operations read from the primary member of the replica set.

   * - ``'primaryPreferred'``
     - Most operations read from the primary member. However, if the primary member is busy, the operation reads from a secondary member that meets the :ref:`<read_preference_options>` criteria.

   * - ``'secondary'``
     - All operations read from a secondary member of the replica set. If a :ref:`read_preference_options` value is defined, it will be used to determine an appropriate member. We recommend setting a ``maxStalenessSeconds`` value to avoid returning stale data.

   * - ``'secondaryPreferred'``
     - Most operations read from a secondary member of the replica set. If a :ref:`read_preference_options` value is defined, it will be used to determine an appropriate member. If none of the secondary members meet the staleness criteria, the operation reads from the primary.

   * - ``'nearest'``
     - Operations read from a member that has a latency within the acceptable range. Whether a member is primary or secondary is not considered. We recommend setting a :ref:`read_preference_options` value to avoid returning stale data.

``tags`` *(optional)*
`````````````````````

A list of tags used to prioritize secondary members using tags associated with each member. Tags cannot be used with  ``'primary'`` mode.
For more information about tag sets or managing member tags, see :manual:`Read Preference Tag Set Lists </core/read-preference-tags/#read-preference-tag-set-lists/>`.

.. _read_preference_options:

``options`` *(optional)*
````````````````````````

The following options additional are available:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Mode
     - Description

   * - ``hedge``
     - | Sends each query to multiple shards and returns the first response. 
       | For more information, see :manual:`Hedged Read Option </core read-preference-hedge-option/>`.

   * - ``maxStalenessSeconds``
     - | The maximum number of seconds a secondary member can lag behind the primary member before the data is considered stale. We recommend using this option for ``secondary``, ``secondaryPreferred``, and ``nearest`` modes to avoid returning stale data.
       | For more information, see :manual:`Read Preference maxStalenessSeconds </core/read-preference-staleness/>`.

Setting Global Read Preferences 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This code sets the read preference mode to ``'secondaryPreferred'``:

.. code-block:: js

   TBD

API Documentation
-----------------

- `API WriteConcern <{+api+}classes/WriteConcern.html>`__
- `API ReadConcern <{+api+}/classes/ReadConcern.html>`__
- `API ReadPref <{+api+}/mongo/readpref#ReadPref>`__