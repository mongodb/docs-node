=================
Insert a Document
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
   
Overview
--------

In this guide, you can learn how to insert documents into MongoDB.

You can use MongoDB to retrieve, update and delete information. To
perform any of those operations, that information, such as user profiles
and orders, needs to exist in MongoDB. For that information to exist,
you need to first perform an **insert operation**. 

An insert operation inserts a single or multiple documents in MongoDB
using the ``insertOne()``, ``insertMany()`` and ``bulkWrite()`` methods.

The following sections focus on ``insertOne()`` and ``insertMany()``. For an
example on how to use the ``bulkWrite()`` method, see our runnable :doc:`Bulk
Operations Example </usage-examples/bulkWrite>`. 

A Note About ``_id``
--------------------

When inserting a document, MongoDB enforces one constraint on your
documents by default. Each document *must* contain a unique ``_id``
field. 

There are two ways to manage this field:

- You can manage this field yourself, ensuring each value you use is unique.
- You can let the driver automatically generate unique ObjectId values.

Unless you have provided strong guarantees for uniqueness, we recommend
you let the driver automatically generate ``_id`` values. 

.. note::

   Duplicate ``_id`` values violate unique index constraints, resulting
   in a ``WriteError``. 
 
For additional information about ``_id``, see the Server Manual Entry on
:manual:`Unique Indexes </core/index-unique/>`.

Insert a Single Document
------------------------

Use the ``insertOne()`` method when you want to insert a single
document. 

On successful insertion, the method returns an
``insertOneWriteOpResultObject`` instance representing the number of
documents inserted and the ``_id`` of the new document. 

Example
~~~~~~~

The following example creates and inserts a document using the
``insertOne()`` method: 

.. code-block:: javascript

   const doc = { name: "Neapolitan pizza", shape: "round" };
   const result = await collection.insertOne(doc);
   console.log(
      `${result.insertedCount} document was inserted with the _id: ${result.insertedId}`,
   );

Your output should look something like this:

.. code-block:: json
   :copyable: false

   1 document was inserted with the _id: 60c79c0f4cc72b6bb31e3836

For additional information on the classes and methods mentioned in this
section, see the following resources: 

- API Documentation on :node-api-3.6:`insertOne() <Collection.html#insertOne>` 
- API Documentation on :node-api-3.6:`insertOneWriteOpResultObject <Collection.html#~insertOneWriteOpResult>`
- Server Manual Entry on :manual:`insertOne() </reference/method/db.collection.insertOne/>`
- Runnable :doc:`Insert a Document Example </usage-examples/insertOne>`

Insert Multiple Documents
-------------------------

Use the ``insertMany()`` method when you want to insert multiple
documents. This method inserts documents in the order specified until an
exception occurs, if any.

For example, assume you want to insert the following documents:

.. code-block:: json
   :copyable: false

   { "_id": 1, "color": "red" }
   { "_id": 2, "color": "purple" }
   { "_id": 1, "color": "yellow" }
   { "_id": 3, "color": "blue" }

If you attempt to insert these documents, a ``WriteError`` occurs at the
third document and the documents prior to the error get inserted into
your collection. 

.. note::

   Use a try-catch block to get an acknowledgment for successfully
   processed documents before the error occurs:

   .. code-block:: javascript
      
      try {
        const docs = [
            { "_id": 1, "color": "red"},
            { "_id": 2, "color": "purple"},
            { "_id": 1, "color": "yellow"},
            { "_id": 3, "color": "blue"}
        ];
        
        const insertManyresult = await collection.insertMany(docs);
    
        console.log(`${insertManyresult.insertedCount} documents were inserted with the _ids: ${insertManyresult.insertedIds}`);
      } catch(e) {
        console.log(`A MongoBulkWriteException occurred, but there are successfully processed documents with the following ids:`);
        console.log(e.result.result.insertedIds);
        console.log(`Number of documents inserted: ${e.result.result.nInserted}`);
      }
   
   The output consists of documents MongoDB can process and should look
   something like this:

   .. code-block:: 
      :copyable: false
      
      A MongoBulkWriteException occurred, but there are successfully 
      processed documents with the following ids:
      [
         { index: 0, _id: 1 },
         { index: 1, _id: 2 },
         { index: 2, _id: 1 },
         { index: 3, _id: 3 }
      ]
      Number of documents inserted: 2
   
   If you look inside your collection, you see the following documents:
   
   .. code-block:: json
      :copyable: false

      { "_id": 1, "color": "red" }
      { "_id": 2, "color": "purple" }

On successful insertion, the method returns an
``insertWriteOpResult`` instance representing the number of
documents inserted and the ``_id`` of the new document. 

Example
~~~~~~~

The following example creates and adds three documents using the
``insertMany()`` method: 

.. code-block:: javascript

   const docs = [
        { name: "Sicilian pizza", shape: "square" },
        { name: "New York pizza", shape: "round" },
        { name: "Grandma pizza", shape: "square" }
    ];
    
    const insertManyresult = await collection.insertMany(docs);

    console.log(`${insertManyresult.insertedCount} documents were inserted with the _ids:`);
    console.log(insertManyresult.insertedIds);

Your output should look something like this:

.. code-block:: json
   :copyable: false

   3 documents were inserted with the _ids:
   {
   '0': 60c7ab27294e5a70d3ca43a5,
   '1': 60c7ab27294e5a70d3ca43a6,
   '2': 60c7ab27294e5a70d3ca43a7
   }

For additional information on the classes and methods mentioned in this
section, see the following resources: 

- API Documentation on :node-api-3.6:`insertMany() <Collection.html#insertMany>`
- API Documentation on :node-api-3.6:`insertWriteOpResult <Collection.html#~insertWriteOpResult>`
- Server Manual Entry on :manual:`insertMany() </reference/method/db.collection.insertMany/>`
- Runnable :doc:`Insert Multiple Documents Example </usage-examples/insertMany>`
