.. _node-fundamentals-update-array:

===========================
Update Arrays in a Document
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the following array update
operators to modify an array embedded within a document:

- :ref:`Positional Operator <first-match-operator>`: ``$``
- :ref:`All Positional Operator <all-match-operator>`: ``$[]``
- :ref:`Filtered Positional Operator <filtered-positional-operator>`: ``$[<identifier>]``

For a list of array update operators, see :manual:`Update Operators
</reference/operator/update-array/>` in the Server
Manual documentation.

Specifying Array Elements
-------------------------

Positional operators specify which array elements to update. Using these
operators, you can apply updates to the first element, all elements, or
certain elements that match a criteria.

To specify elements in an array with positional operators, use **dot
notation**. Dot notation is a property access syntax for navigating BSON
objects. To learn more, see :manual:`dot notation
</core/document/#std-label-document-dot-notation>`.

.. _first-match-operator:

The First Matching Array Element
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update the first array element of each document that matches your
query, use the positional operator ``$``.

The positional operator ``$`` references the array matched by the query.
You cannot use this operator to reference a nested array. If you want to
access a nested array, use the :ref:`filtered positional operator <filtered-positional-operator>`.

.. important::

   Do not use the ``$`` operator in an ``upsert`` call because the
   driver treats ``$`` as a field name in the insert document.

Example
```````

This example shows how to update the first matching array element in the
following sample document, which describes callers to a radio station:

.. code-block:: javascript
   :copyable: false

   {
     _id: ...,
     date: "5/15/2023",
     callers: [
       { time: "6:08 am", name: "Sandy Kane" },
       { time: "6:11 am", name: "TJ La", phoneNumber: 2545550179 },
       { time: "6:36 am", name: "Diya Patel", phoneNumber: 4255550100 }
     ]
   }

The following code shows how to add a field to the first array entry that
matches a query. The query matches the radio show on ``"5/15/2023"`` and 
callers that left a phone number. The update adds the ``contestWinner``
field to the first matching caller.

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start firstArrayElement example
   :end-before: end firstArrayElement example
   :dedent:

After you run the update operation, the document resembles the following:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 6

   {
     _id: ...,
     date: "5/15/2023",
     callers: [
       { time: "6:08 am", name: "Sandy Kane" },
       { time: "6:11 am", name: "TJ La", phoneNumber: 2545550179, contestWinner: true },
       { time: "6:36 am", name: "Diya Patel", phoneNumber: 4255550100 }
     ]
   }

The example includes both the ``date`` and ``callers.phoneNumber`` fields in the
query to match the array that the ``$`` operator applies an update to. If you
omit the ``callers.phoneNumber`` field from the query while using the
``$`` operator in an update, the driver raises the following error:

.. code-block:: none
   :copyable: false

   The positional operator did not find the match needed from the query.

.. _all-match-operator:

Matching All Array Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To perform the update on all of the array elements of each document that
matches your query, use the all positional operator ``$[]``.

Example
```````

This example shows how to update the all matching array elements in the
following sample document, which describes callers to a radio station:

.. code-block:: javascript
   :copyable: false

   {
     _id: ...,
     date: "5/15/2023",
     callers: [
       { time: "6:08 am", phoneNumber: 7325550159, duration: 67 },
       { time: "6:11 am", phoneNumber: 2545550179, duration: 121 },
       { time: "6:36 am", phoneNumber: 4255550100, duration: 102 }
     ]
   }

The following code shows how to remove the ``duration`` field from
all of the entries in the array:

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start allArrayElement example
   :end-before: end allArrayElement example
   :dedent:

After you run the update operation, the document resembles the following:

.. code-block:: javascript
   :copyable: false
   
   {
     _id: ...,
     date: "5/15/2023",
     callers: [
       { time: "6:08 am", phoneNumber: 7325550159 },
       { time: "6:11 am", phoneNumber: 2545550179 },
       { time: "6:36 am", phoneNumber: 4255550100 }
     ]
   }

.. _filtered-positional-operator:

Matching Multiple Array Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To perform an update on all embedded array elements of each document
that matches your query, use the filtered positional operator
``$[<identifier>]``.

The filtered positional operator ``$[<identifier>]`` specifies the
matching array elements in the update document. To identify which array
elements to match, pair this operator with ``<identifier>`` in an
``arrayFilters`` object.

The ``<identifier>`` value is a placeholder you assign that represents
an element of the array field. This value must start with a lowercase
letter and contain only alphanumeric characters.

Usage
`````

Include a query, an update document, and
optionally, an options object as parameters in an update operation.

The following steps describe how to use a filtered positional operator
in an update operation:

1. Format your update document as follows:
   
   .. code-block:: javascript
   
      { $<operator>: { "<array>.$[<identifier>].<arrayField>": <value> } }

   This update document contains the following placeholders:
   
   - ``$<operator>``: The array update operator
   - ``<array>``: The array in the document to update
   - ``<identifier>``: The identifier for the filtered positional operator
   - ``<arrayField>``: The field in the ``<array>`` array element to update
   - ``<updateParameter>``: The value that describes the change

#. Add the matching criteria in the ``arrayFilters`` object. This object
   is an array of queries that specify which array elements to include
   in the update. Use this object in an ``options`` parameter:

   .. code-block:: javascript
      
      arrayFilters: [
        { "<identifier>.<arrayField1>": <updateParameter1> },
        { "<identifier>.<arrayField2>": <updateParameter2> },
        ...
      ]

#. Pass the query document, the update document, and options to an
   update method. The following sample code shows how to call the
   ``updateOne()`` method with these parameters:

   .. code-block:: javascript
   
      await myColl.updateOne(query, updateDocument, options);

Example
```````

This example shows how to update certain matching array elements in the
following sample document, which describes callers to a radio station:

.. code-block:: javascript
   :copyable: false

   {
     _id: ...,
     date: "5/15/2023",
     callers: [
       { phoneNumber: 7325550159, state: "New Jersey", contestEntries: 1 },
       { phoneNumber: 5805550179, state: "Oklahoma", contestEntries: 1 },
       { state: "New Jersey", contestEntries: 1 },
       { phoneNumber: 2545550179, state: "Texas", contestEntries: 1 }
     ]
   }

Suppose the radio station is running a contest, and callers that match
the following criteria receive extra entries:

- The caller is from ``"New Jersey"`` or ``"Texas"``.
- The caller left a phone number.

To increase the ``contestEntries`` field by ``1`` in the matching array
entries, use the filtered positional operator as shown in the following
code:

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start arrayFiltersIdentifier example
   :end-before: end arrayFiltersIdentifier example
   :emphasize-lines: 3-5, 8-13
   :dedent:

After you run the update operation, the document resembles the
following. The update incremented the ``contestEntries`` field for
all callers that matched the criteria. The caller from ``"New Jersey"``
who did not leave a phone number did not match the criteria in
the ``arrayFilters`` object and therefore was excluded from the update.

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 5, 8

   {
     _id: ...,
     date: "5/15/2023",
     callers: [
       { phoneNumber: 7325550159, state: "New Jersey", contestEntries: 2 },
       { phoneNumber: 5805550179, state: "Oklahoma", contestEntries: 1 },
       { state: "New Jersey", contestEntries: 1 },
       { phoneNumber: 2545550179, state: "Texas", contestEntries: 2 }
     ]
   }
