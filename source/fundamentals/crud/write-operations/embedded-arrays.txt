.. _node-fundamentals-update-array:

===========================
Update Arrays in a Document
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the following array update
operators to modify an array embedded within a document:

- :ref:`Positional Operator <first-match-operator>`: ``$``
- :ref:`All Positional Operator <all-match-operator>`: ``$[]``
- :ref:`Filtered Positional Operator <filtered-positional-operator>`: ``$[<identifier>]``

See the MongoDB Server guide on
:manual:`Update Operators </reference/operator/update-array/#update-operators>`
for a complete list of operators.

Sample Documents
~~~~~~~~~~~~~~~~

To follow along with the examples in this guide, use the following code
snippet to insert documents that describe fruits into the ``test.salonClients``
collection:

.. code-block:: javascript

   const database = client.db("test");
   const myColl = database.collection("salonClients");

   await myColl.insertMany([
     {
       name: "Sandy Kane",
       appointments: [
         {
           date: "April 7 3:00 PM",
           services: ["haircut", "styling", "color"],
           cost: 275,
           stylist: "Francine",
         },
         {
           date: "August 7 3:00 PM",
           services: ["haircut", "styling"],
           cost: 115,
           stylist: "Janna",
         },
         {
           date: "October 10 3:00 PM",
           services: ["styling"],
           cost: 75,
           stylist: "Janna",
         },
       ],
     },
     {
       name: "Dennis Roberts",
       appointments: [
         {
           date: "June 19 4:30 PM",
           services: ["haircut", "styling"],
           cost: 85,
           stylist: "Francine",
         },
         {
           date: "July 10 5:00 PM",
           services: ["beard trim"],
           cost: 35,
           stylist: "Colin",
         },
       ],
     },
   ]);

The collection contains documents that describe the clients of a salon
and their upcoming appointments.

Specifying Array Elements
-------------------------

You can specify which array elements to update using a positional
operator. Positional operators can specify the first, all, or certain
array elements to apply updates to.

To specify elements in an array with positional operators, use **dot
notation**. Dot notation is a property access syntax for navigating BSON
objects. To learn more, see :manual:`dot notation
</core/document/#std-label-document-dot-notation>`.

.. _first-match-operator:

The First Matching Array Element
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update the first array element of each document that matches your
query, use the positional operator ``$``.

The positional operator ``$`` references the array matched by the query.
You cannot use this operator to reference a nested array. For cases in
which you want to access a nested array, use the
:ref:`filtered positional operator <filtered-positional-operator>`.

.. important::

   Do not use the ``$`` operator in an ``upsert`` call because the
   driver treats ``$`` as a field name in the insert document.

Example
```````

The following code snippet shows how to add an item to the
``services`` field of the first appointment that a customer named
"Sandy Kane" had with the stylist "Janna".

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start firstArrayElement example
   :end-before: end firstArrayElement example

The query matches all documents whose ``appointments`` array contains an
entry that has the ``stylist`` field with the value "Janna".
The ``updateDocument`` adds the "wash" item to the ``services`` field of
the first array element match in the ``appointments`` array.

After you run the update operation, the document for the client named
"Sandy Kane" resembles the following:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 13

   {
     _id: ...,
     name: "Sandy Kane",
     appointments: [
       {
         date: "April 7 3:00 PM",
         services: ["haircut", "styling", "color"],
         cost: 275,
         stylist: "Francine",
       },
       {
         date: "August 7 3:00 PM",
         services: ["haircut", "styling", "wash"],
         cost: 115,
         stylist: "Janna",
       },
       {
         date: "October 10 3:00 PM",
         services: ["styling"],
         cost: 75,
         stylist: "Janna",
       },
     ],
   }

There are two array entries where the ``stylist`` value is "Janna", but
only the first entry has the new "wash" item in the ``services`` array.

We included both the ``name`` and ``appointments.stylist`` fields in the
query to match the array to which we apply the ``$`` operator. If we
omit the ``appointments.stylist`` field from the query and specify the
``$`` operator in our update, the driver raises the following error:

.. code-block:: none
   :copyable: false

   The positional operator did not find the match needed from the query.

.. _all-match-operator:

Matching All Array Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To perform the update on all of the array elements of each document that
matches your query, use the all positional operator ``$[]``.

Example
```````

The following code snippet reduces the ``cost`` field by ``15`` for all of
the appointments for a client named "Dennis Roberts", since he has a
salon voucher.

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start allArrayElement example
   :end-before: end allArrayElement example

After you run the update operation, the document for the client "Dennis
Roberts" resembles the following:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 8, 14
   
   {
     _id: ...,
     name: "Dennis Roberts",
     appointments: [
       {
         date: "June 19 4:30 PM",
         services: ["haircut", "styling"],
         cost: 70,
         stylist: "Francine",
       },
       {
         date: "July 10 5:00 PM",
         services: ["beard trim"],
         cost: 20,
         stylist: "Colin",
       },
     ],
   }

The ``cost`` field for every appointment is ``15`` less than the
original value.

.. _filtered-positional-operator:

Matching Multiple Array Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To perform an update on all embedded array elements of each document
that matches your query, use the filtered positional operator
``$[<identifier>]``.

The filtered positional operator ``$[<identifier>]`` specifies the
matching array elements in the update document. To identify which array
elements to match, pair this operator with ``<identifier>`` in an
``options.arrayFilters`` object.

The ``<identifier>`` value is a placeholder you assign that represents
an element of the array field name that prefixes it. This value must
start with a lowercase letter and contain only alphanumeric characters.

Usage
`````

To use an update operator on specified array elements, format your
update document as follows:

.. code-block:: json

   { $<operator>: { "<array>.$[<identifier>].<arrayField>": <value> } }

This update document has the following components:

- ``$<operator>``: the update operator
- ``<array>``: the array in the document to update
- ``<identifier>``: the identifier for the filtered positional operator
- ``<arrayField>``: the field in the ``<array>`` array element to update
- ``<value>``: the value that the update operator applies

Next, add the matching criteria in your ``arrayFilters`` object in your update
operation's ``options`` parameter. This object is an array of queries
that specify which array elements to include in the update. To apply
your update to only certain array elements, pass the
following ``arrayFilters`` with your matching criteria:

.. code-block:: javascript

   arrayFilters: [
     { "<identifier>.<arrayField1>": <value1> },
     { "<identifier>.<arrayField2>": <value2> }
   ]

Example
```````

Suppose the client named "Sandy Kane" wants to set up a payment plan for
any appointment that costs more than ``100``. To find the matching
documents and add a new ``paymentPlan`` field, use
the filtered positional operator as follows:

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start arrayFiltersIdentifier example
   :end-before: end arrayFiltersIdentifier example

After you run the update operation, the document for the client named
"Sandy Kane" resembles the following:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 10-14, 21-25

   {
     _id: ...,
     name: "Sandy Kane",
     appointments: [
       {
         date: "April 7 3:00 PM",
         services: ["haircut", "styling", "color"],
         cost: 275,
         stylist: "Francine",
         paymentPlan: {
           payment1: 50,
           payment2: 50,
           payment3: "remaining balance",
         },
       },
       {
         date: "August 7 3:00 PM",
         services: ["haircut", "styling"],
         cost: 115,
         stylist: "Janna",
         paymentPlan: {
           payment1: 50,
           payment2: 50,
           payment3: "remaining balance",
         },
       },
       {
         date: "October 10 3:00 PM",
         services: ["styling"],
         cost: 75,
         stylist: "Janna",
       },
     ],
   }

The entries in the ``appointments`` array that have a ``cost`` field
that is at least ``100`` now have the ``paymentPlan`` field.
