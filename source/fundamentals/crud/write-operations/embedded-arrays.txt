===========================
Update Arrays in a Document
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

To modify an array embedded within a document, use an
array update operator in your update method call. In this guide, we
explain and show examples on how to update the following:

- :ref:`first-match-operator`
- :ref:`All Matching Array Elemetns <all-match-operator>`
- :ref:`Multiple Matching Array Elements <filtered-positional-operator>`

See the MongoDB server guide on
:manual:`Update Operators </reference/operator/update-array/#update-operators>`
for a complete list.

Sample Documents
~~~~~~~~~~~~~~~~

The following examples use the ``test.pizza`` collection. The collection
contains documents that describe the customers and their pizza orders
as array elements in field called ``items``. The following examples
update this sample document:

.. code-block:: javascript

   [{
      name: "Steve Lobsters",
      address: "731 Yexington Avenue",
      items: [
        { type: "beverage", name: "Water", size: "17oz", },
        { type: "pizza", size: "large", toppings: ["pepperoni"], },
        { type: "pizza", size: "medium", toppings: ["mushrooms", "sausage", "green peppers"], comment: "Extra green peppers please!", },
        { type: "pizza", size: "large", toppings: ["pineapple, ham"], comment: "red pepper flakes on top", },
        { type: "calzone", fillings: ["canadian bacon", "sausage", "onion"], },
        { type: "beverage", name: "Diet Pepsi", size: "16oz", },
      ],
    },
    {
      name: "Popeye",
      address: "1 Sweethaven",
      items: [
        { type: "pizza", size: "large", toppings: ["garlic, spinach"], },
        { type: "calzone", toppings: ["ham"], },
      ],
    }]

Specifying Array Elements
-------------------------

You can specify which array elements to update using a positional
operator. Positional operators can specify the first, all, or certain
array elements to update. 

To specify elements in an array with positional operators, use **dot
notation**. Dot notation is a property access syntax for navigating BSON
objects. To learn more, see :manual:`dot notation
</core/document/#std-label-document-dot-notation>`.

.. _first-match-operator:

The First Matching Array Element
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update the first array element of each document that matches your
query document, use the positional ``$`` operator. 

The positional ``$`` operator references the array matched by the query
filter. You cannot use this operator to reference a nested array. For
cases in which you want to access a nested array, use the
:ref:`filtered positional operator <filtered-positional-operator>`.

.. important::

   Do not use the ``$`` operator in an ``upsert`` call because the
   driver treats ``$`` as a field name in the insert document.

Example
```````

The following code snippet shows how to update the size of the first
pizza order item to "extra large" for the customer named Steve Lobsters.

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start firstArrayElement example
   :end-before: end firstArrayElement example

The query filter matches all documents that contain an element embedded in
the ``items`` array that contain a value of ``pizza`` in the ``type`` field.
The ``updateDocument`` specifies the update operation to set the
first array element match in ``items`` to "extra large".

After you run the update method, your customer document for Steve
Lobsters resembles the following:

.. code-block:: javascript

   {
     name: "Steve Lobsters",
     address: "731 Yexington Avenue",
     items: [
       { type: "pizza", size: "extra large", ... },
       ... 
     ]
   }

Note that we included both ``name`` and ``items.type`` fields in the query
filter in order to match the array in which we apply the ``$`` operator. If we
omit the ``items.type`` field from the query and specify the ``$`` operator
in our update, we encounter the following error:

.. code-block:: none
   :copyable: false

   The positional operator did not find the match needed from the query.

.. _all-match-operator:

Matching All Array Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To perform the update on all of the array elements of each document that
matches your query document, use the all positional ``$[]`` operator.

Example
```````

The following code snippet adds "fresh mozzarella" to the toppings of
all of Popeye's order items.

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start allArrayElement example
   :end-before: end allArrayElement example

After you run the update method, your customer document for Popeye
resembles the following:

.. code-block:: json
   :copyable: false

   {
     "name":"Popeye",
     "address": "1 Sweethaven",
     "items": [
       { "type": "pizza", ... , "toppings": ["garlic", "spinach", "fresh mozzarella"], },
       { "type": "calzone", ... , "toppings":["ham", "fresh mozzarella"], },
     ]
   }

.. _filtered-positional-operator:

Matching Multiple Array Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To match all embedded array elements that match our specified criteria,
use the filtered positional ``$[<identifier>]`` operator. 

The filtered positional ``$[<identifier>]`` operator specifies the
matching array elements in the update document. To identify which array
elements to match, pair this operator with ``<identifier>`` in an
``options.arrayFilters`` object.

The ``<identifier>`` term is a placeholder value you assign that represents
an element of the array field name that prefixes it. This value must
start with lowercase letter and contain only alphanumeric characters.

Example
```````

For example, to add a "garlic" topping to certain order items using this
operator, format your update document as follows:

.. code-block:: javascript

   { $push: { items.$[orderItem].toppings: "garlic" } }

This update document specifies the following:

- ``$push``: the update operator
- ``items``: the array in the document to update
- ``orderItem``: the identifier for the filtered positional operator
- ``toppings``: the field on the ``items`` array element to update
- ``garlic``: the value to push onto the ``toppings`` array

Next, add the matching criteria in your ``arrayFilters`` object in your update
operation's ``options`` parameter. This object is an array of query filters
that specify which array elements to include in the update. To add the
"garlic" topping to order items of type "pizza" and "large size", pass the
following ``arrayFilters``:

.. code-block:: javascript

   arrayFilters: [
     { orderItem.type: "pizza" },
     { orderItem.size: "large" }
   ]

The following snippet shows the complete update method for this example:

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start arrayFiltersOne example
   :end-before: end arrayFiltersOne example

After you run the method, your customer document for Steve
Lobsters resembles the following:

.. code-block:: javascript
   :copyable: false

   {
     name: "Steve Lobsters",
     address: "731 Yexington Avenue",
     items: [
       { type: "pizza", size: "large", toppings: ["pepperoni", "garlic"] },
       { type: "pizza", size: "large", toppings: ["pineapple", "ham", "garlic"], ...},
       ...
     ]
   }

Example
```````

Let's run through another example. Suppose Steve Lobsters wants to
adjust their order to add "salami" as a topping to all pizzas that
have pepperoni. To perform the update, use the filtered positional
operator as follows:

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start arrayFiltersTwo example
   :end-before: end arrayFiltersTwo example

After you run the update method, your customer document for Steve
Lobsters resembles the following:

.. code-block:: javascript
   :copyable: false

   {
     name: "Steve Lobsters",
     address: "731 Yexington Avenue",
     items: [
       { type: "pizza", size: "large", toppings: ["pepperoni", "salami"], },
       { type: "pizza", size: "medium", toppings: ["mushrooms", "sausage", "green peppers"], comment: "Extra green peppers please!", },
       { type: "pizza", size: "large", toppings: ["pineapple, ham"], comment: "red pepper flakes on top", },
       { type: "calzone", fillings: ["canadian bacon", "sausage", "onion"], },
       { type: "beverage", name: "Diet Pepsi", size: "16oz", },
     ],
   }
