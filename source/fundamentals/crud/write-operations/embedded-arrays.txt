.. _node-fundamentals-update-array:

===========================
Update Arrays in a Document
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the following array update
operators to modify an array embedded within a document:

- :ref:`Positional Operator <first-match-operator>`: ``$``
- :ref:`All Positional Operator <all-match-operator>`: ``$[]``
- :ref:`Filtered Positional Operator <filtered-positional-operator>`: ``$[<identifier>]``

For a list of array update operators, see :manual:`Update Operators
</reference/operator/update-array/> in the Server
Manual documentation.

Specifying Array Elements
-------------------------

Positional operators specify which array elements to update. Using these
operators, you can apply updates to the first element, all elements, or
certain elements that match a criteria.

To specify elements in an array with positional operators, use **dot
notation**. Dot notation is a property access syntax for navigating BSON
objects. To learn more, see :manual:`dot notation
</core/document/#std-label-document-dot-notation>`.

.. _first-match-operator:

The First Matching Array Element
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update the first array element of each document that matches your
query, use the positional operator ``$``.

The positional operator ``$`` references the array matched by the query.
You cannot use this operator to reference a nested array. For cases in
which you want to access a nested array, use the
:ref:`filtered positional operator <filtered-positional-operator>`.

.. important::

   Do not use the ``$`` operator in an ``upsert`` call because the
   driver treats ``$`` as a field name in the insert document.

Example
```````

This example applies an update to the following sample document, which
describes the upcoming salon appointments for a client:

.. code-block:: javascript
   :copyable: false
   
   {
     _id: ...,
     clientName: "Sandy Kane",
     appointments: [
       { date: "May 12 5:00pm", services: ["haircut", "styling"], stylist: "Francine" },
       { date: "Jul 12 5:00pm", services: ["haircut", "hair coloring"], stylist: "Janna" },
       { date: "Sep 12 5:00pm", services: ["haircut"], stylist: "Janna" },
     ],
   }

This example shows how to update a field in the first array element that
matches a query. The query matches the client named ``"Sandy Kane"`` and any
appointments they have with the stylist named ``"Janna"``. The update adds
the ``"shampoo"`` array item into the ``services`` array
of the first matching appointment entry.

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start firstArrayElement example
   :end-before: end firstArrayElement example
   :dedent:

After you run the update operation, the document resembles the following:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 6

   {
     _id: ...,
     clientName: "Sandy Kane",
     appointments: [
       { date: "May 12 5:00pm", services: ["haircut", "styling"], stylist: "Francine" },
       { date: "Jul 12 5:00pm", services: ["haircut", "color", "shampoo"], stylist: "Janna" },
       { date: "Sep 12 5:00pm", services: ["haircut"], stylist: "Janna" },
     ],
   }

We included both the ``clientName`` and ``appointments.stylist`` fields in the
query to match the array that the ``$`` operator applies to. If we
omit the ``appointments.stylist`` field from the query when using the
``$`` operator in an update, the driver raises the following error:

.. code-block:: none
   :copyable: false

   The positional operator did not find the match needed from the query.

.. _all-match-operator:

Matching All Array Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To perform the update on all of the array elements of each document that
matches your query, use the all positional operator ``$[]``.

Example
```````

This example applies an update to the following sample document, which
describes the upcoming salon appointments for a client:

.. code-block:: javascript
   :copyable: false
   
   {
     _id: ...,
     clientName: "Dennis Roberts",
     appointments: [
       { date: "May 17 11:00am", services: ["haircut"], cost: 45 },
       { date: "Jul 17 11:00am", services: ["haircut", "beard grooming"], cost: 60 },
     ],
   }

The following code snippet reduces the ``cost`` field by ``15`` for all of
the appointments for the client named ``"Dennis Roberts"``, since he has a
salon voucher.

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start allArrayElement example
   :end-before: end allArrayElement example
   :dedent:

After you run the update operation, the document resembles the following:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 5-6
   
   {
     _id: ...,
     clientName: "Dennis Roberts",
     appointments: [
       { date: "May 17 11:00am", services: ["haircut"], cost: 30 },
       { date: "Jul 17 11:00am", services: ["haircut", "beard grooming"], cost: 45 },
     ],
   }

.. _filtered-positional-operator:

Matching Multiple Array Elements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To perform an update on all embedded array elements of each document
that matches your query, use the filtered positional operator
``$[<identifier>]``.

The filtered positional operator ``$[<identifier>]`` specifies the
matching array elements in the update document. To identify which array
elements to match, pair this operator with ``<identifier>`` in an
``options.arrayFilters`` object.

The ``<identifier>`` value is a placeholder you assign that represents
an element of the array field name that prefixes it. This value must
start with a lowercase letter and contain only alphanumeric characters.

Usage
`````

The following steps describe how to use a filtered positional operator
in an update operation:

1. Format your update document as follows:
   
   .. code-block:: javascript
   
      { $<operator>: { "<array>.$[<identifier>].<arrayField>": <value> } }

   This update document contains the following placeholders:
   
   - ``$<operator>``: The array update operator
   - ``<array>``: The array in the document to update
   - ``<identifier>``: The identifier for the filtered positional operator
   - ``<arrayField>``: The field in the ``<array>`` array element to update
   - ``<value>``: The value that describes the change

#. Add the matching criteria in the ``arrayFilters`` object. This object
   is an array of queries that specify which array elements to include
   in the update. Use this object in an ``options`` parameter:

   .. code-block:: javascript
      
      const options = {
        arrayFilters: [
          { "<identifier>.<arrayField1>": <value1> },
          { "<identifier>.<arrayField2>": <value2> },
          ...
        ]
      };

 #. Pass the options and the update document to an
    update method.

Example
```````

This example applies an update to the following sample document, which
describes the upcoming salon appointments for a client:

.. code-block:: javascript
   :copyable: false
   
   {
     _id: ...,
     clientName: "Sandy Kane",
     appointments: [
       {
         date: "May 12 11:00am",
         stylist: "Janna",
         cost: 115
       },
       {
         date: "Jul 12 11:00am",
         stylist: "Francine",
         cost: 200
       },
       {
         date: "Sep 12 11:00am",
         stylist: "Claire",
         cost: 60
       },
       {
         date: "Oct 12 11:00am",
         stylist: "Janna",
         cost: 130
       },
     ],
   }

Suppose the client named ``"Sandy Kane"`` wants to set up a payment plan for
any appointment that costs more than ``100``. However, only the stylist
named ``"Janna"`` accepts delayed payments. To add a new ``paymentPlan``
field to the matching array entries, use the filtered positional
operator as follows:

.. literalinclude:: /code-snippets/crud/arrayFilters.js
   :language: javascript
   :start-after: start arrayFiltersIdentifier example
   :end-before: end arrayFiltersIdentifier example
   :emphasize-lines: 3-8, 10-12
   :dedent:

After you run the update operation, the document resembles the following:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 9, 25

   {
     _id: ...,
     clientName: "Sandy Kane",
     appointments: [
       {
         date: "May 12 11:00am",
         stylist: "Janna",
         cost: 115,
         paymentPlan: { payment1: 75, payment2: "remaining balance" },
       },
       {
         date: "Jul 12 11:00am",
         stylist: "Francine",
         cost: 200
       },
       {
         date: "Sep 12 11:00am",
         stylist: "Claire",
         cost: 60
       },
       {
         date: "Oct 12 11:00am",
         stylist: "Janna",
         cost: 130,
         paymentPlan: { payment1: 75, payment2: "remaining balance" },
       },
     ],
   }

The updated added ``paymentPlan`` field to all appointments with
``"Janna"`` that cost at least ``100``. The appointment that cost ``60``
and the appointment with ``"Francine"`` did not match the criteria in
the ``arrayFilters`` object and therefore were excluded from the update.
