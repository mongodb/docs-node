.. _node-pkfactory:

=======================
Generate Unique ``_id``
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the MongoDB Node.js driver to generate your
own ``_id`` values using the drivers ``pkFactory`` option.

Behavior
--------

The ``pkFactory``, primary key factory option defines a system for
creating unique identifiers in your documents. 

The driver uses the primary key factory to generate unique ``_id``
values for your documents when you choose not to specify an ``_id``
during an :ref:`insert operation <node-fundamentals-insert-data>`. The
default primary key factory generates ``ObjectId`` values.


.. note:: Upsert Operations

   The driver doesn't use any ``pkFactory`` methods for :ref:`upsert
   operations <node-fundamentals-upsert>`. Instead, the driver always 
   creates ``ObjectId`` values for the ``_id`` field of the
   upserted documents.

   If you want to use ``pkFactory`` methods, peform a :ref:`find
   operation <node-fundamentals-retrieve-data>`, then an :ref:`update
   <node-fundamentals-change-a-document>` or :ref:`insert
   <node-fundamentals-insert-data>` operation.

Data Consistency
----------------

If you do not specify a primary key factory method that generates
``_id`` values of your desired type, you may experience data
inconsistency.

This may occur because the driver's default primary factory method generates
``_id`` values of type ``ObjectId`` regardless of the type you specify for the 
``_id`` field in your type parameter.

Specify a ``pkFactory``
-----------------------

To keep the ``_id`` consistent, as a ``ObjectID``, apply a primary key
factory to your ``MongoClient`` instance like this:

.. code-block:: javascript

   const uuid = require('bson');
   ...
   const client = new MongoClient(uri, { pkFactory: { createPk: () => uuid }});

Example
~~~~~~~

Assume you have a collection, ``characters.villans``, that contains
documents with a villans name. The following example inserts
documents with an ``_id`` of type ``ObjectID`` into your collection:

.. code-block:: javascript

   const uuid = require('bson');
   const { MongoClient } = require("mongodb");

   // Replace the uri string with your MongoDB deployment's connection string.
   const uri = "<your-connection-string>"
   const client = new MongoClient(uri, {  
     useUnifiedTopology: true, 
     pkFactory: { createPk: () => uuid }
   });
   
   async function run() {
     try {
        await client.connect();
        const database = client.db("characters");
        const collection = database.collection("villans");
        await collection.insertMany([{name: "Scar" }, { name: "Ursula" }]);
     } finally {
        await client.close();
      }
   }

   run();

After running the code, the documents in your collection resemble the
following:

.. code-block:: json
   :copyable: false

   {_id: ObjectID('628bdaf46777b6e36996ade3'), name: 'Scar'}
   {_id: ObjectID('628bdaf46777b6e36996ade4'), name: 'Ursula'}

.. note:: 

   Your ``ObjectId`` values will differ from those shown.

Additional Information
----------------------

To learn more about the types, interfaces, and classes discussed in this
section, see the following resources:

- `PkFactory <{+api+}/interfaces/PkFactory.html>`__
- :manual:`The _id Field </core/document/#the-_id-field>`
- :ref:`node-fundamentals-upsert`
- :ref:`node-fundamentals-retrieve-data`
- :ref:`node-fundamentals-change-a-document`
- :ref:`node-fundamentals-insert-data`
