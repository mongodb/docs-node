==========
TypeScript
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecols

Overview
--------

In this guide, you can learn about the **TypeScript** features and limitations
of the MongoDB Node.js driver. TypeScript is a strongly typed programming
language that compiles to JavaScript.

All TypeScript features of the driver are optional. All valid JavaScript
code written with the driver is also valid TypeScript code.

For more information, see the
`TypeScript website <https://www.typescriptlang.org/>`__.

Features
--------

If you use TypeScript, you can specify a type for some classes in the driver.
All classes that accept a type parameter in the driver have the default type
``Document``. The ``Document`` interface has the following definition:

.. code-block:: typescript

   interface Document {
     [key: string]: any;
   }

Any object type can extend the ``Document`` interface.

For more information on object types, see the
`TypeScript handbook <https://www.typescriptlang.org/docs/handbook/2/objects.html>`__.

Parameters that Extend Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following classes accept all non-recursive types that extend
the ``Document`` interface:

- `Collection <{+api+}/classes/Collection.html>`__
- `ChangeStream <{+api+}/classes/ChangeStream.html>`__

To view an example of a recursive type, see the :ref:`<node-driver-limitations>` section.

You can pass a type parameter that extends the ``Document`` interface like this:

.. _mongodb-node-typescript-pet-interface:

.. literalinclude:: /code-snippets/typescript/extend-document.ts
   :language: typescript
   :linenos:

.. important:: Keys Not in Type Parameter Receive ``any`` Type

   Keys not listed in your specified type parameter receive the ``any`` type.
   The following code snippet demonstrates this behavior:

   .. literalinclude:: /code-snippets/typescript/dot-notation.ts
      :language: typescript
      :linenos:
      :start-after: start-no-key
      :end-before: end-no-key

Parameters of Any Type
~~~~~~~~~~~~~~~~~~~~~~

The following classes accept all type parameters that are not recursive:

- `FindCursor <{+api+}/classes/FindCursor.html>`__
- `AggregationCursor <{+api+}/classes/AggregationCursor.html>`__

To view an example of a recursive type, see the :ref:`<node-driver-limitations>` section.

You can find a code snippet that shows how to specify a type for the ``FindCursor``
class in the
:ref:`Find Multiple Documents Usage Example <node-driver-find-usage-example-code-snippet>`.

.. _node-driver-limitations:

Limitations For Driver Version {+version+}
---------------------------------

You cannot specify a recursive type as a type parameter in version {+version+} of the driver.

If you specify a recursive type, the driver raises the following error:

.. code-block:: text

   error TS2615: Type of property 'r' circularly references itself in mapped type '{ [Key in keyof RecursiveType]: [Key, ...NestedPaths<RecursiveType[Key]>]; }'.

A recursive type is a type that references itself. You can update
the :ref:`Pet <mongodb-node-typescript-pet-interface>` interface
to be recursive by adding the following field:

.. code-block:: typescript
   :emphasize-lines: 2

   interface Pet {
      pet: Pet | null;
      name: string;
      age: number;
      cute: true;
   }

To track the fix for this limitation, see 
`NODE-3852 <https://jira.mongodb.org/browse/NODE-3852>`__
in JIRA issue tracker.

If you must apply a recursive type to your documents, use version 4.2 of
the {+driver-long+}.
