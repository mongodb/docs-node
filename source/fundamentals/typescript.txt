==========
TypeScript
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecols

Overview
--------

In this guide, you can learn about the **TypeScript** features and limitations
of the MongoDB Node.js driver. TypeScript is a strongly typed programming
language that compiles to JavaScript.

All TypeScript features of the driver are optional. All valid JavaScript
code written with the driver is also valid TypeScript code.

For more information, see the
`TypeScript website <https://www.typescriptlang.org/>`__.

Features
--------

If you use TypeScript, you can specify a type for some classes in the driver.
All classes that accept a type parameter in the driver have the default type
``Document``. The ``Document`` interface has the following definition:

.. code-block:: typescript

   interface Document {
     [key: string]: any;
   }

Any object type can extend the ``Document`` interface.

For more information on object types, see the
`TypeScript handbook <https://www.typescriptlang.org/docs/handbook/2/objects.html>`__.


.. _node-driver-typescript-dot-notation:

.. important:: Recursive Types

   You cannot use a recursive type as a schema for your documents.

   Click the following tabs to see a recursive type,
   and a code snippet using the recursive type that raises an error: 

   .. tabs::

      .. tab:: Recursive Type
         :tabid: recursive-type


         .. code-block:: typescript

            interface RecursiveType {
              r: RecursiveType | BaseCase;
              i: number;
            }

            type BaseCase = "done"; 

      .. tab:: Code Snippet
         :tabid: code-snippet

         The following code snippet uses a recursive type:

         .. code-block:: typescript

            const database = client.db("test-db");
            const col = database.collection<RecursiveType>("test-collection");
            const document = await col.findOne({ i: 1 });

         The preceding code snippet raises the following error at compile time:

         .. code-block:: text

            error TS2615: Type of property 'r' circularly references itself in mapped type '{ [Key in keyof RecursiveType]: [Key, ...NestedPaths<RecursiveType[Key]>]; }'.

   If you must use a recursive type to specify a schema for your documents,
   use version 4.2 of the {+driver-long+}.

   To track the progress of mitigating this limitation in version 4.3 of the driver,
   see `this JIRA ticket <https://jira.mongodb.org/browse/NODE-3852>`__.

Extend Document
~~~~~~~~~~~~~~~

The following classes accept any type that extends the ``Document``
interface:

- `Collection <{+api+}/classes/Collection.html>`__
- `ChangeStream <{+api+}/classes/ChangeStream.html>`__

You can pass a type parameter that extends the ``Document`` interface like this:

.. literalinclude:: /code-snippets/typescript/extend-document.ts
   :language: typescript
   :linenos:

.. important:: Keys Not in Type Parameter Receive ``any`` Type

   Keys not listed in your specified type parameter receive the ``any`` type.
   The following code snippet demonstrates this behavior:

   .. literalinclude:: /code-snippets/typescript/dot-notation.ts
      :language: typescript
      :linenos:
      :start-after: start-no-key
      :end-before: end-no-key

Any Type
~~~~~~~~

The following classes accept any type parameter:

- `FindCursor <{+api+}/classes/FindCursor.html>`__
- `AggregationCursor <{+api+}/classes/AggregationCursor.html>`__

You can find a code snippet that shows how to specify a type for the ``FindCursor``
class in the
:ref:`Find Multiple Documents Usage Example <node-driver-find-usage-example-code-snippet>`.
