==========
TypeScript
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecols

Overview
--------

In this guide, you can learn about the **TypeScript** features and limitations
of the MongoDB Node.js driver. TypeScript is a strongly typed programming
language that compiles to JavaScript.

All TypeScript features of the driver are optional. All valid JavaScript
code written with the driver is also valid TypeScript code.

For more information, see the
`TypeScript website <https://www.typescriptlang.org/>`__.

Features
--------

If you use TypeScript, you can specify a type for some classes in the driver.
All classes that accept a type parameter in the driver have the default type
``Document``. The ``Document`` interface has the following definition:

.. code-block:: typescript

   interface Document {
     [key: string]: any;
   }

All object types extend the ``Document`` interface.

For more information on object types, see the
`TypeScript handbook <https://www.typescriptlang.org/docs/handbook/2/objects.html>`__.

Type Parameters that Extend Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following classes accept all types that both extend
the ``Document`` interface and are not mutually recursive:

.. _node-mongodb-type-parameters-extend-document:

- `Collection <{+api+}/classes/Collection.html>`__
- `ChangeStream <{+api+}/classes/ChangeStream.html>`__

You can pass a type parameter that extends the ``Document`` interface like this:

.. _mongodb-node-typescript-pet-interface:

.. literalinclude:: /code-snippets/typescript/extend-document.ts
   :language: typescript
   :linenos:

.. important:: Keys Not in Type Parameter Receive ``any`` Type

   Keys not listed in your specified type parameter receive the ``any`` type.
   The following code snippet demonstrates this behavior:

   .. literalinclude:: /code-snippets/typescript/dot-notation.ts
      :language: typescript
      :linenos:
      :start-after: start-no-key
      :end-before: end-no-key

To view an example of a mutually recursive type, which is not supported by the
:ref:`preceding classes <node-mongodb-type-parameters-extend-document>`,
see the :ref:`<node-driver-limitations-mutual-recursion>` section.

Type Parameters of Any Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following classes accept all type parameters that are not mutually recursive:

.. _node-mongodb-type-parameters-any-type:

- `FindCursor <{+api+}/classes/FindCursor.html>`__
- `AggregationCursor <{+api+}/classes/AggregationCursor.html>`__

You can find a code snippet that shows how to specify a type for the ``FindCursor``
class in the
:ref:`Find Multiple Documents Usage Example <node-driver-find-usage-example-code-snippet>`.

To view an example of a mutually recursive type, which is not supported by the
:ref:`preceding classes <node-mongodb-type-parameters-any-type>`,
see the :ref:`<node-driver-limitations-mutual-recursion>` section.


Type Safety and Dot Notation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you specify a query or update with **dot notation**, the {+driver-short+}
provides type safety if your query or update does not 
:ref:`reference a nested instance of a recursive type <node-driver-recursive-types-dot-notation>`.
Dot notation is a syntax you can use to navigate nested JSON objects.

The following code snippet defines the ``ClassificationPet`` interface,
which includes a ``classification`` field that enables you to specify the
genus and color of dogs and cats:  

.. code-block:: typescript

   interface ClassificationPet {
     name: string;
     age: number;
     classification: { genus: "Canis" | "Felis"; color: string };
   }

The following code snippet correctly raises a type error when specifying
the genus of an unsupported animal in a query:

.. code-block:: typescript

   database
     .collection<ClassificationPet>("<your collection>")
     .find({ "classification.genus": "Sylvilagus" });

The type error raised by the preceding code snippet is as follows:

.. code-block:: none

   No overload matches this call.
   ...
   Type '"Sylvilagus"' is not assignable to type 'Condition<"Canis" | "Felis">'.

To learn more about dot notation, see 
:manual:`Dot Notation </core/document/#dot-notation>`
in the MongoDB manual.

To learn more about the limitations of dot notation in the
{+driver-short+}, see the 
:ref:`<node-driver-recursive-types-dot-notation>`
section.

.. _node-driver-limitations:

Limitations of Driver Version {+version+}
---------------------------------

.. include:: includes/limitations/{+version+}.rst
