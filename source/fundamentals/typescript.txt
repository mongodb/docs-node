==========
TypeScript
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecols

Overview
--------

In this guide, you can learn about the **TypeScript** features and limitations
of the MongoDB Node.js driver. TypeScript is a strongly typed programming
language that compiles to JavaScript.

All TypeScript features of the driver are optional. All valid JavaScript
code written with the driver is also valid TypeScript code.

For more information, see the
`TypeScript website <https://www.typescriptlang.org/>`__.

Features
--------

If you use TypeScript, you can specify a type for some classes in the driver.
All classes that accept a type parameter in the driver have the default type
``Document``. The ``Document`` interface has the following definition:

.. code-block:: typescript

   interface Document {
     [key: string]: any;
   }

Any object type can extend the ``Document`` interface.

For more information on object types, see the
`TypeScript handbook <https://www.typescriptlang.org/docs/handbook/2/objects.html>`__.

Parameters that Extend Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following classes accept all types that extend the ``Document`` interface
and are not recursive:

- `Collection <{+api+}/classes/Collection.html>`__
- `ChangeStream <{+api+}/classes/ChangeStream.html>`__

To view an example of a recursive type, see the :ref:`<node-driver-limitations>` section.

You can pass a type parameter that extends the ``Document`` interface like this:

.. literalinclude:: /code-snippets/typescript/extend-document.ts
   :language: typescript
   :linenos:

.. important:: Keys Not in Type Parameter Receive ``any`` Type

   Keys not listed in your specified type parameter receive the ``any`` type.
   The following code snippet demonstrates this behavior:

   .. literalinclude:: /code-snippets/typescript/dot-notation.ts
      :language: typescript
      :linenos:
      :start-after: start-no-key
      :end-before: end-no-key

Paramaters of Any Type
~~~~~~~~~~~~~~~~~~~~~~

The following classes accept any type parameter that is not recursive:

- `FindCursor <{+api+}/classes/FindCursor.html>`__
- `AggregationCursor <{+api+}/classes/AggregationCursor.html>`__

To view an example of a recursive type, see the :ref:`<node-driver-limitations>` section.

You can find a code snippet that shows how to specify a type for the ``FindCursor``
class in the
:ref:`Find Multiple Documents Usage Example <node-driver-find-usage-example-code-snippet>`.

.. _node-driver-limitations:

Limitations
-----------

You cannot specify a recursive type as a type parameter for the following 
{+driver-long+} classes:

- `Collection <{+api+}/classes/Collection.html>`__
- `ChangeStream <{+api+}/classes/ChangeStream.html>`__
- `FindCursor <{+api+}/classes/FindCursor.html>`__
- `AggregationCursor <{+api+}/classes/AggregationCursor.html>`__

The following code snippet defines a recursive type: 

.. code-block:: typescript

   interface RecursiveType {
      r: RecursiveType | BaseCase;
      i: number;
   }

   type BaseCase = "done"; 

The following code snippet uses the preceding recursive type:

.. code-block:: typescript

   const database = client.db("<your database>");
   const col = database.collection<RecursiveType>("<your collection>");
   const document = await col.findOne({ i: 1 });

The preceding code snippet raises the following error at compile time:

.. code-block:: text

   error TS2615: Type of property 'r' circularly references itself in mapped type '{ [Key in keyof RecursiveType]: [Key, ...NestedPaths<RecursiveType[Key]>]; }'.

If you must apply a recursive type to your documents, use version 4.2 of
the {+driver-long+}.

To track the fix for this limitation, see 
`NODE-3852 <https://jira.mongodb.org/browse/NODE-3852>`__
in JIRA issue tracker.
