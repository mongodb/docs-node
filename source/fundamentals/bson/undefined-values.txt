.. _nodejs-undefined-values:

================
Undefined Values
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to control how the driver serializes
undefined values. By default, the driver serializes ``undefined`` values
as ``null`` values during write operations.

.. _nodejs-specify-ignoreundefined:

Specify the ``ignoreUndefined`` Setting
---------------------------------------

If you want the driver to treat fields with
``undefined`` values as non-existent fields, you must set the
``ignoreUndefined`` setting to ``true``. When you specify this setting,
the driver does not serialize fields with ``undefined`` values.

The following example inserts two documents. One insert operation has
the ``ignoreUndefined`` setting set to ``true``:

.. code-block:: javascript
   :emphasize-lines: 7
   
   await myColl.insertOne(
     {
       state: "Montana",
       salesTax: undefined,
     },
     { ignoreUndefined: true }
   );

   await myColl.insertOne({
     state: "New Hampshire",
     salesTax: undefined,
   });

The documents appear in the collection as follows:

.. code-block:: javascript
   :copyable: false

   {
     _id: ...,
     state: "Montana",
   },
   {
     _id: ...,
     state: "New Hampshire",
     salesTax: null
   }
   
The driver does not serialize the ``salesTax``
field during the first insert operation because we specified the
``ignoreUndefined`` setting.

.. _nodejs-ignoreundefined-scope:

Set Scope for Serializing Undefined Values
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can specify the ``ignoreUndefined`` setting at the client,
database, collection, or operation level.

The ``ignoreUndefined`` setting automatically applies to the scope of the
object instance in which you specified it, and any other objects created
from that instance.

For example, if you include the option when instantiating a database
object, any collection instance you extract from that object inherits
the setting. Any operations you call on that collection instance also
inherit the setting.

.. code-block:: javascript

   const myDB = client.db("test", { ignoreUndefined: true });

   // The collection inherits the ignoreUndefined setting
   const myColl = myDB.collection("states");

   // Any write operation will not serialize undefined values
   await myColl.findOneAndUpdate(
     { state: "Georgia" },
     { $set: { gasTax: undefined } }
   );

You can override the setting at any level of scope by including it when
constructing the object instance or when executing an operation.

For example, if you set ``ignoreUndefined`` to ``true`` on your
collection object, you can override the setting in individual write
operations that you execute on that collection.

.. code-block:: javascript

   const myColl = myDB.collection("states", { ignoreUndefined: true });

   // The insert operation will not serialize undefined values
   await myColl.insertOne({
     state: "South Dakota",
     capitalGainsTax: undefined,
   });

   // The insert operation will serialize undefined values
   await myColl.insertOne(
     { state: "Texas", capitalGainsTax: undefined },
     { ignoreUndefined: false }
   );
