.. _nodejs-utf-8-validation:

================
UTF-8 Validation
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to enable or disable the {+driver-short+}'s
UTF-8 validation feature. By default, your driver checks documents for any
characters that are not encoded in a valid UTF-8 format when it transfers data
between your application and MongoDB.

**UTF-8** is a character encoding specification that is compatible with
most operating systems, applications, and language character sets. See the
Wikipedia entry on :wikipedia:`UTF-8 <UTF-8>` for more information on this
standard.

If you enable validation, the driver substitutes invalid UTF-8 characters
with valid UTF-8 ones when transferring data between your application and
MongoDB. The validation adds processing overhead since it needs to verify the
data and to make substitutions when necessary.

If you disable validation, your application can avoid the processing
overhead caused by validation, but cannot guarantee consistent presentation of
invalid UTF-8 data.

.. note::

   The {+driver-short+} automatically substitutes invalid UTF-8 characters
   in your application before sending them to MongoDB regardless of whether
   you enable validation. You can only retrieve invalid UTF-8 characters
   from MongoDB.

.. _nodejs-specify-utf-8-validation:

Specify the UTF-8 Validation Setting
------------------------------------

You can specify whether the driver should perform UTF-8 validation by
defining the ``enableUtf8Validation`` setting in the options parameter
when you create a client, reference a database or collection, or call a
CRUD operation. By default, the {+driver-short+} enables UTF-8 validation.

.. code-block:: javascript

   // disable UTF-8 validation on the client
   new MongoClient('<connection uri>', { enableUtf8Validation: false });

   // disable UTF-8 validation on the database
   client.db('<database name>', { enableUtf8Validation: false });

   // disable UTF-8 validation on the collection
   db.collection('<collection name>', { enableUtf8Validation: false });

   // disable UTF-8 validation on a specific operation call
   await collection.findOne({ title: 'Cam Jansen'}, { enableUtf8Validation: false });

If your application reads invalid UTF-8 from MongoDB while the
``enableUtf8Validation`` option is enabled, it throws a ``BSONError`` that
contains the following message:

.. code-block::

   Invalid UTF-8 string in BSON document

.. _nodejs-utf-8-validation-scope:

Set the Validation Scope
~~~~~~~~~~~~~~~~~~~~~~~~

The ``enableUtf8Validation`` setting automatically applies to the scope of the
object instance on which you included it, and any other objects created by
calls on that instance.

For example, if you include the option on the call to instantiate a database
object, any collection instance you construct from that object inherits
the setting. Any operations you call on that collection instance also
inherit the setting.

.. code-block:: javascript

   const database = client.db('books', { enableUtf8Validation: false });

   // The collection inherits the UTF-8 validation disabled setting from the database
   const collection = database.collection('mystery');

   // CRUD operation runs with UTF-8 validation disabled
   await collection.findOne({ title: 'Encyclopedia Brown' });

You can override the setting at any level of scope by including it when
constructing the object instance or when calling an operation.

For example, if you disable validation on the collection object, you can
override the setting in individual CRUD operation calls on that
collection.

.. code-block:: javascript

   const collection = database.collection('mystery', { enableUtf8Validation: false });

   // CRUD operation runs with UTF-8 validation enabled
   await collection.findOne({ title: 'Trixie Belden' }, { enableUtf8Validation: true });

   // CRUD operation runs with UTF-8 validation disabled
   await collection.findOne({ title: 'Enola Holmes' });

