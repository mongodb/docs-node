.. _node-enterprise-authentication-mechanisms:

====================================
Enterprise Authentication Mechanisms
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: ldap, encryption, principal, tls

In this guide, you can find sample code for connection to MongoDB with each
authentication mechanism available in the MongoDB Enterprise Edition:
``Kerberos (GSSAPI/SSPI)``, ``LDAP (PLAIN)``, and ``MONGODB-OIDC``.

``Kerberos (GSSAPI/SSPI)``
--------------------------

.. note::
   The Node.js driver supports Kerberos on UNIX using the MIT Kerberos library
   and on Windows using the SSPI API.

The ``GSSAPI`` authentication mechanism uses your user principal to
authenticate to a Kerberos service.

You can specify this authentication mechanism by performing the
following actions while specifying options on your
:manual:`connection string </reference/connection-string/>`:

- Set the ``authMechanism`` parameter to ``GSSAPI``.
- Set the ``SERVICE_NAME`` value in the ``authMechanismProperties``
  parameter if using a value other than ``mongodb``.
- Specify a ``SERVICE_REALM`` value in the ``authMechanismProperties``
  parameter if a custom service realm is required.
- Specify a ``CANONICALIZE_HOST_NAME`` value in the ``authMechanismProperties``
  parameter if canonicalization of the hostname is required. This property can take
  the following values:

  - ``none``: (Default) Does not perform hostname canonicalization
  - ``forward``: Performs a forward DNS lookup to canonicalize the hostname
  - ``forwardAndReverse``: Performs a forward DNS lookup and then a
    reverse lookup on that value to canonicalize the hostname

.. important::
   
   The ``gssapiServiceName`` parameter is deprecated and may be removed
   in future versions of the driver. Use
   ``authMechanismProperties=SERVICE_NAME:<your service name>`` in the
   connection URI instead.
   See the
   :manual:`authMechanismProperties </reference/connection-string/#urioption.authMechanismProperties>`
   parameter documentation for more information.

The following code sample authenticates to Kerberos for UNIX using ``GSSAPI``.

.. important::
   Always **URI encode** the principal using the ``encodeURIComponent`` method
   to ensure it is correctly parsed.

.. code-block:: js

   const { MongoClient } = require("mongodb");

   // specify the placeholder values for your environment in the following lines
   const clusterUrl = "<MongoDB cluster URL>";
   const principal = encodeURIComponent("<Kerberos principal and realm>");
   const serviceRealm = "<Kerberos service realm>";
   const canonicalizationSetting = "<canonicalization setting>";
   const authMechanismProperties = `SERVICE_REALM:${serviceRealm},CANONICALIZE_HOST_NAME:${canonicalizationSetting}`;

   const authMechanism = "GSSAPI";

   // Connection URI
   const uri = `mongodb+srv://${principal}@${clusterUrl}/?authMechanism=${authMechanism}&authMechanismProperties=${authMechanismProperties}`;

   const client = new MongoClient(uri);

   // Function to connect to the server
   async function run() {
     try {
       // Establish and verify connection
       await client.db("admin").command({ ping: 1 });
       console.log("Connected successfully to server");
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }
   run().catch(console.dir);

.. note::
   The method refers to the ``GSSAPI`` authentication mechanism instead
   of ``Kerberos`` because the driver authenticates through
   `GSSAPI RFC-4652 <https://tools.ietf.org/html/rfc4752>`_, the SASL
   mechanism.

``LDAP (PLAIN)``
----------------

The ``PLAIN`` authentication mechanism uses your username and password to
authenticate to a Lightweight Directory Access Protocol (LDAP) server.

You can specify this authentication mechanism by setting the ``authMechanism``
parameter to ``PLAIN`` and including your LDAP username and password in the
:manual:`connection string </reference/connection-string/>` as shown
in the following sample code.

.. code-block:: js

   const { MongoClient } = require("mongodb");

   // specify the placeholder values for your environment in the following lines
   const clusterUrl = "<MongoDB cluster URL>";
   const ldapUsername = "<LDAP username>";
   const ldapPassword = "<LDAP password>";
   const authMechanism = "PLAIN";

   // Connection URI
   const uri = `mongodb+srv://${ldapUsername}:${ldapPassword}@${clusterUrl}/?authMechanism=${authMechanism}`;

   const client = new MongoClient(uri);

   // Function to connect to the server
   async function run() {
     try {
       // Establish and verify connection
       await client.db("admin").command({ ping: 1 });
       console.log("Connected successfully to server");
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }
   run().catch(console.dir);

.. note::
   The authentication mechanism is named ``PLAIN`` instead of ``LDAP`` since it
   authenticates using the `PLAIN Simple Authentication and Security Layer
   (SASL) defined in RFC-4616 <https://tools.ietf.org/html/rfc4616>`_.

MONGODB-OIDC
------------

.. important::

   The MONGODB-OIDC authentication mechanism requires {+mdb-server+} v7.0 or later running
   on a Linux platform.

The following sections describe how to use the MONGODB-OIDC authentication mechanism to
authenticate from various platforms.

For more information about the MONGODB-OIDC authentication mechanism, see
:manual:`OpenID Connect Authentication </core/security-oidc/>` and
:manual:`MongoDB Server Parameters </reference/parameters/#mongodb-parameter-param.oidcIdentityProviders>`
in the {+mdb-server+} manual.

.. _node-mongodb-oidc-azure-imds:

Azure IMDS
~~~~~~~~~~

If your application runs on an Azure VM, or otherwise uses the
`Azure Instance Metadata Service <https://learn.microsoft.com/en-us/azure/virtual-machines/instance-metadata-service>`__
(IMDS), you can authenticate to MongoDB by using the {+driver-short+}'s built-in Azure
support.

The following code example shows how to specify Azure IMDS OIDC authentication. 
Replace the ``<audience>`` placeholder with the
value of the ``audience`` parameter configured on your MongoDB deployment. 
Optionally, replace the ``<username>`` placeholder with the client ID or application ID of the
Azure managed identity or enterprise application.
      
.. code-block:: js

   const client = new MongoClient("mongodb+srv://<username>@<host>:<port>/?"
                                  + "authMechanism=MONGODB-OIDC"
                                  + "&authMechanismProperties=TOKEN_RESOURCE:<audience>,ENVIRONMENT=azure");

.. _node-mongodb-oidc-gcp-imds:

GCP IMDS
~~~~~~~~

If your application runs on a Google Compute Engine VM, or otherwise uses the
`GCP Instance Metadata Service <https://cloud.google.com/compute/docs/metadata/querying-metadata>`__,
you can authenticate to MongoDB by using the {+driver-short+}'s built-in GCP
support.

The following code example shows how to specify GCP IMDS OIDC authentication. 
Replace the ``<audience>`` placeholder with the
value of the ``audience`` parameter configured on your MongoDB deployment. 

.. code-block:: js

   const client = new MongoClient("mongodb+srv://<host>:<port>/?"
                                  + "authMechanism=MONGODB-OIDC"
                                  + "&authMechanismProperties=TOKEN_RESOURCE:<audience>,ENVIRONMENT=gcp");

Custom Callback
~~~~~~~~~~~~~~~

The {+driver-short+} doesn't offer built-in support for all platforms, including
Azure Functions and Azure Kubernetes Service (AKS). Instead, you
must define a custom callback to use OIDC to authenticate from these platforms.

First, define a custom function with the following signature:

.. code-block:: js

   const myCallback = (params: OIDCCallbackParams): Promise<OIDCResponse> => { }

The ``OIDCCallbackParams`` object contains the following properties:

.. list-table::
   :header-rows: 1

   * - Property
     - Value
   * - ``timeoutContext``
     -


.. code-block:: js

const oidcCallBack = (params: OIDCCallbackParams): Promise<OIDCResponse> => {
  // params.timeoutContext is an AbortSignal that will abort after 30 seconds for non-human and 5 minutes for human.
  // params.version is the current OIDC API version.
  // params.idpInfo is the IdP info returned from the server.
  // params.username is the optional username.

  // Make a call to get a token.
const token = ...;
return {
   accessToken: token,
   expiresInSeconds: 300,
   refreshToken: token
};
}

const client = new MongoClient('mongodb+srv://<host>:<port>/?authMechanism=MONGODB-OIDC', {
  authMechanismProperties: {
    OIDC_CALLBACK: oidcCallback
  }
});

contains two methods:

- ``GetOidcAccessToken()``: This method accepts the parameters to the callback method
  and returns the callback response. 
- ``GetOidcAccessTokenAsync()``: This method is an asynchronous version of the previous
  method. 

The following code is an example implementation of the ``IOidcCallback`` interface.
In this example, the methods retrieve an OIDC token from a file named ``"access-token.dat"``
in the local file system.

.. code-block:: csharp

   public class MyCallback : IOidcCallback
   {
       public OidcAccessToken GetOidcAccessToken(
           OidcCallbackParameters parameters,
           CancellationToken cancellationToken)
       {
           var accessToken = File.ReadAllText("access-token.dat");
           return new(accessToken, expiresIn: null);
       }

       public async Task<OidcAccessToken> GetOidcAccessTokenAsync(
           OidcCallbackParameters parameters,
           CancellationToken cancellationToken)
       {
           var accessToken = await File.ReadAllTextAsync(
               "access-token.dat",
               cancellationToken)
               .ConfigureAwait(false);
           return new(accessToken, expiresIn: null);
       }
   }

After you define a class that contains your custom callback methods, call the
``MongoCredential.CreateOidcCredential()`` method and pass in a new instance of your
class. Store the result of this method call in the ``Credential`` property of your
``MongoClientSettings`` object, as shown in the following code example:

.. code-block:: csharp

   var mongoClientSettings = MongoClientSettings.FromConnectionString("mongodb://<hostname>[:port]");
   mongoClientSettings.Credential = MongoCredential.CreateOidcCredential(new MyCallback());
   var client = new MongoClient(mongoClientSettings);
