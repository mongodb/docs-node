=========================
Authentication Mechanisms
=========================

In this section, you can find sample code for connection to MongoDB with each
authentication mechanism available in the MongoDB Community Edition:
``DEFAULT``, ``SCRAM-SHA-256``, ``SCRAM-SHA-1``, ``MONGODB-CR``, and ``X.509``.

``DEFAULT``
-----------

The ``DEFAULT`` authentication mechanism is a fallback setting that instructs
the driver to negotiate the first authentication mechanism supported by the
server in the following order of preference:

#. ``SCRAM-SHA-256``
#. ``SCRAM-SHA-1``
#. ``MONGODB-CR``

If the ``DEFAULT`` option is specified, the driver first attempts to
authenticate using ``SCRAM-SHA-256``. If the version of the MongoDB instance
does not support that mechanism, the driver attempts to authenticate using
``SCRAM-SHA-1``. If the instance does not support that mechanism either,
the driver attempts to authenticate using ``MONGODB-CR``.

You can specify this authentication mechanism by setting the ``authMechanism``
parameter to ``DEFAULT`` in the
:manual:`URI ConnectionString </reference/connection-string/>`, or by omitting
the parameter since it is the default value. Also include your username and
password as shown in the code below.

.. important::
   Always **URI encode** the username and password using the
   ``encodeURIComponent`` method to ensure they are correctly parsed.

.. code-block:: js

   const { MongoClient } = require("mongodb");

   // specify the placeholder values for your environment in the following line
   const username = encodeURIComponent("<username>");
   const password = encodeURIComponent("<password>");
   const clusterUrl = "<MongoDB cluster url>";
   const authMechanism = "DEFAULT";

   // Connection URI
   const uri = `mongodb+srv://${username}:${password}@${clusterUrl}/?authMechanism=${authMechanism}`;

   const client = new MongoClient(url);

   async function run() {
     try {
       // Connect the client to the server
       await client.connect();

       // Establish and verify connection
       await client.db("admin").command({ ping: 1 });
       console.log("Connected successfully to server");
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }
   run().catch(console.dir);

For more information on the challenge-response (CR) and salted
challenge-response authentication mechanisms (SCRAM) that MongoDB supports,
see the :manual:`SCRAM </core/security-scram/>` section of the manual.

``SCRAM-SHA-256``
-----------------

.. note::

   ``SCRAM-SHA-256`` is the default authentication method for MongoDB starting
   in version 4.0

``SCRAM-SHA-256`` is a salted challenge-response authentication mechanism
(SCRAM) that uses your username and password, encrypted with the ``SHA-256``
algorithm to authenticate your user.

You can specify this authentication mechanism by setting the ``authMechanism``
to the value ``SCRAM-SHA-256`` in the
:manual:`URI ConnectionString </reference/connection-string/>` as shown in the
following sample code.

.. code-block:: js

   const { MongoClient } = require("mongodb");

   // specify the placeholder values for your environment in the following lines
   const username = encodeURIComponent("<username>");
   const password = encodeURIComponent("<password>");
   const clusterUrl = "<MongoDB cluster url>";

   const authMechanism = "SCRAM-SHA-256";

   // Connection URI
   const uri = `mongodb+srv://${username}:${password}@${clusterUrl}/?authMechanism=${authMechanism}`;

   // Create a new MongoClient
   const client = new MongoClient(uri);

   async function run() {
     try {
       // Connect the client to the server
       await client.connect();

       // Establish and verify connection
       await client.db("admin").command({ ping: 1 });
       console.log("Connected successfully to server");
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }
   run().catch(console.dir);

``SCRAM-SHA-1``
---------------

.. note::
   ``SCRAM-SHA-1`` is the default authentication method for MongoDB versions
   3.0, 3.2, 3.4, and 3.6.

``SCRAM-SHA-1`` is a salted challenge-response mechanism (SCRAM) that uses your
username and password, encrypted with the ``SHA-1`` algorithm to authenticate
your user.

You can specify this authentication mechanism by setting the ``authMechanism``
parameter to the value ``SCRAM-SHA-1`` in the
:manual:`URI ConnectionString </reference/connection-string/>` as shown
in the following sample code.

.. code-block:: js

   const { MongoClient } = require("mongodb");

   // specify the placeholder values for your environment in the following lines
   const username = encodeURIComponent("<username>");
   const password = encodeURIComponent("<password>");
   const clusterUrl = "<MongoDB cluster url>";
   const authMechanism = "SCRAM-SHA-1";

   // Connection URI
   const uri = `mongodb+srv://${username}:${password}@${clusterUrl}/?authMechanism=${authMechanism}`;

   // Create a new MongoClient
   const client = new MongoClient(uri);

   async function run() {
     try {
       // Connect the client to the server
       await client.connect();

       // Establish and verify connection
       await client.db("admin").command({ ping: 1 });
       console.log("Connected successfully to server");
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }
   run().catch(console.dir);

``MONGODB-CR``
--------------

.. warning::
   MONGODB-CR was deprecated starting in MongoDB 3.6, and is no longer supported as of MongoDB 4.0

``MONGODB-CR`` is a challenge-response authentication mechanism that uses your
username and password to authenticate your user.

You can specify this option by setting the ``authMechanism`` parameter to value
``MONGODB-CR`` in the
:manual:`URI ConnectionString </reference/connection-string/>` as shown
in the following sample code.

.. code-block:: js

   const { MongoClient } = require("mongodb");

   // specify the placeholder values for your environment in the following lines
   const username = encodeURIComponent("<username>");
   const password = encodeURIComponent("<password>");
   const clusterUrl = "<MongoDB cluster url>";

   const authMechanism = "MONGODB-CR";

   // Connection URI
   const uri = `mongodb+srv://${username}:${password}@${clusterUrl}/?authMechanism=${authMechanism}`;

   // Create a new MongoClient
   const client = new MongoClient(uri);

   // Function to connect to the server
   async function run() {
     try {
       // Connect the client to the server
       await client.connect();

       // Establish and verify connection
       await client.db("admin").command({ ping: 1 });
       console.log("Connected successfully to server");
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }
   run().catch(console.dir);

.. important::
   If you have :manual:`upgraded the authentication schema from MONGODB-CR to
   SCRAM </release-notes/3.0-scram/>`, any ``MONGODB-CR`` user
   authentication requests fail.

``X.509``
---------

.. note::
   The X.509 authentication mechanism is only available in MongoDB versions
   2.6 and later.

The ``X.509`` authentication mechanism uses
:wikipedia:`TLS <Transport_Layer_Security>` with X.509 certificates to
authenticate your user, identified by the distinguished name (DN) of your
client certificate.

You can specify this authentication mechanism by setting the following
parameters of your
:manual:`URI ConnectionString </reference/connection-string/>`:

- Set the ``authMechanism`` parameter to the value ``MONGODB-X509``
- Set the ``tls`` parameter to the value ``true``

In the ``MongoClient`` constructor, pass the location of your client
certificate as the value of ``tlsCertificateKeyFile`` as the parameter and any
other :node-docs:`TLS/SSL connection options </tutorials/connect/tls/>`
specific to your use case as shown in the sample code below.

.. code-block:: js

   const { MongoClient } = require("mongodb");
   const fs = require("fs");

   // specify the placeholder values for your environment in the following lines
   const username = encodeURIComponent("<client certificate distinguished name>");
   const clusterUrl = "<MongoDB cluster url>";
   const clientPEMFile = "<path to the client pem certificate file>";
   const authMechanism = "MONGODB-X509";

   // Connection URI
   const uri = `mongodb+srv://${username}@${clusterUrl}/?authMechanism=${authMechanism}&tls=true`;

   // Create a new MongoClient
   const client = new MongoClient(uri, {
     tlsCertificateKeyFile: `${clientPEMFile}`,
   });

   // Function to connect to the server
   async function run() {
     try {
       // Connect the client to the server
       await client.connect();

       // Establish and verify connection
       await client.db("admin").command({ ping: 1 });
       console.log("Connected successfully to server");
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }
   run().catch(console.dir);

For more information on determining the *subject* name from the X.509
certificate, see the MongoDB manual
:manual:`X.509 tutorial
</tutorial/configure-x509-client-authentication/#add-x-509-certificate-subject-as-a-user>`.
