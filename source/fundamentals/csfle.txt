==================================
Client-Side Field Level Encryption
==================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. explain relationship between mongodb-client-encryption and CSFLE in node driver

Overview
--------

In this guide, you can learn how to install and use **Client-Side Field
Level Encryption (CSFLE)** in the MongoDB Node.js driver.

CSFLE allows you to encrypt specific data fields within a document with
your MongoDB client application before sending the data to the server.
Starting in MongoDB 4.2 Enterprise, you can perform this client-side 
encryption automatically.

With CSFLE, your client application encrypts fields client-side without 
requiring any server-side configuration or directives. CSFLE is useful 
for situations in which applications must guarantee that unauthorized 
parties, including server administrators, cannot read the encrypted 
data.

This guide is a quick introduction to CSFLE using the Node.js driver. 
For in-depth information on how CSFLE works, see
the :manual:`CSFLE reference </core/security-client-side-encryption/>` 
documentation. For a real-world scenario and implementation, see our 
`CSFLE Guide <https://docs.mongodb.com/drivers/security/client-side-field-level-encryption-guide>`_.

Installation
------------

To get started with CSFLE in your client application, you need

- the MongoDB Node.js driver
- `mongodb-client-encryption <https://www.npmjs.com/package/mongodb-client-encryption>`__
- `uuid-base64 <https://www.npmjs.com/package/uuid-base64#installation>`__
- ``mongocryptd`` if using automatic encryption (Enterprise or Atlas)

``mongodb-client-encryption``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``mongodb-client-encryption`` module is the official client 
encryption module for the MongoDB Node.js driver. It contains bindings 
to communicate with the native library that manages the encryption.

Add it to your project using ``npm``:

.. code-block:: sh
   :copyable: true

   npm install mongodb-client-encryption --save

``uuid-base64``
~~~~~~~~~~~~~~~

The ``uuid-base64`` module converts between Base64 and hexadecimal 
UUIDs.

Add it to your project using ``npm``:

.. code-block:: sh
   :copyable: true

   npm install uuid-base64 --save

``mongocryptd``
~~~~~~~~~~~~~~~

``mongocryptd`` is a binary run as a daemon / process that is used for 
automatic encryption. ``mongodb-crypt`` communicates with 
``mongodb-client-encryption`` to automatically encrypt the information 
specified by a user-provided 
:manual:`JSON Schema </reference/security-client-side-automatic-json-schema/>`.

For more detailed information on ``mongocryptd``, see the
:manual:`mongocryptd reference documentation </reference/security-client-side-encryption-appendix/#mongocryptd>`

Example
-------

The following example shows how to configure a CSFLE-enabled client 
with a local key and a JSON schema. Values in fields specified by your 
JSON schema are automatically encrypted before insertion, and decrypted 
when calling ``find()`` with a CSFLE-enabled client.

Considerations
~~~~~~~~~~~~~~

- This example uses automatic encryption and decryption which requires 
  MongoDB **Enterprise** or **Atlas**.

- This example uses a local key, but you can also use integrated 
  support for cloud-based key management services from AWS, 
  Azure, and GCP.

.. warning::

   MongoDB recommends using local key management only for testing 
   purposes, and using a remote key management service
   for production.

To run a complete example of automatic client-side field level 
encryption with a local key using the Node.js driver, see MongoDB 
University's GitHub 
`Node CSFLE Example <https://github.com/mongodb-university/csfle-guides/tree/master/nodejs>`__.

.. code-block:: javascript
  
  // Create a data key using a MongoDB client instance
  async function createDataKeyWithMasterKey(client) {
    const encryption = new ClientEncryption(client, {
      keyVaultNamespace: "encryption.__keyVault",
      kmsProviders: null, // required
    });
      
    let dataKey = await encryption.createDataKey(this.provider, {
        masterKey: null, // required
    }).toString("base64");
  
    return dataKey;
  }
  
  // Create a JSON schema using your data key
  function createJsonSchemaMap(dataKey) {
    return {
      "medicalRecords.patients": {
        bsonType: "object",
        encryptMetadata: {
          keyId: [new Binary(Buffer.from(dataKey, "base64"), 4)],
        },
        properties: {
          medicalRecords: {
            encrypt: {
              bsonType: "array",
              algorithm: "AEAD_AES_256_CBC_HMAC_SHA_512-Random",
            },
          },
          ssn: {
            encrypt: {
              bsonType: "int",
              algorithm: "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic",
            },
          },
        },
      },
    }
  };
  
  // Create a CSFLE-enabled client using your JSON schema
  async function createCsfleEnabledClient(schemaMap) {
    const client = new MongoClient(this.connectionString, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      monitorCommands: true,
      autoEncryption: {
        keyVaultNamespace: "encryption.__keyVault",
        kmsProviders: null, // required
        schemaMap,
      },
    });
    return await client.connect();
  }
