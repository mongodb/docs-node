==============
Encrypt Fields
==============

.. default-domain:: mongodb

Overview
--------

You can encrypt fields in a document using a feature called
**client-side encryption**.

Client-side encryption enables your client applications to encrypt data
*before* sending it to MongoDB, and to query documents for values in
encrypted fields.

Because the driver encrypts the data before sending it to MongoDB, only
your configured client applications can decrypt the data. People or
applications with access to your encryption keys are the only ones that
can see the decrypted, plaintext data. Should you have unauthorized access
to your database, an attacker could only see the encrypted version of the
fields you configured for encryption.

Client-side can prevent exposure of the following sensitive types of data:

- Credit card numbers
- Addresses
- Health information
- Financial information
- Any other sensitive or personally identifiable information (PII)

MongoDB offers the following ways to encrypt data:

{+qe+}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+qe+} is the next-generation client-side encryption feature,
introduced in MongoDB 6.0. {+qe+} supports searching encrypted fields
for equality and encrypts each value uniquely.

The MongoDB manual contains detailed information for {+qe+}:

- Begin a working {+qe+} example with the :ref:`qe-quick-start`
- Learn how to use {+qe+} in the :ref:`qe-fundamentals`
- Learn how to integrate your {+qe+} implementation with a KMS in the :ref:`qe-tutorials`
- Learn {+qe+} concepts in the :ref:`qe-reference`

{+csfle-long+}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+csfle-long+} supports searching encrypted values.
The core difference between {+csfle-short+} and {+qe+} is that {+csfle-short+}
requires that encrypted fields you want to search must be determinstically
encrypted. When you encrypt a value with deterministic encryption, the
same input value produces the same output value.

An unauthorized party who gains access to your data may be able to infer
the plaintext values of fields that contain common values. For example,
an attacker may infer the plaintext value of a ``gender`` field by
examining the ``name`` across multiple documents.

The MongoDB manual contains detailed information for CSFLE:

- Begin a working {+csfle-short+} example with the :ref:`csfle-quick-start`
- Learn how to use {+csfle-short+} in the :ref:`csfle-fundamentals`
- Learn how to integrate your {+csfle-short+} implementation with a KMS in the :ref:`csfle-tutorials`
- Learn {+csfle-short+} concepts in the :ref:`csfle-reference`
