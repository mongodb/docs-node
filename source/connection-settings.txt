===================
Connection Settings
===================

This section describes common MongoDB client connection settings for the
Node.js driver. These settings provide additional control over the negotiation
of the connection and the behavior of the client, once a connection is
established.

The connection settings are passed as an optional parameter to the
``MongoClient`` as shown in the code sample below:

.. code-block:: js

   const { MongoClient } = require("mongodb");

   // Connection URI
   const uri = `mongodb+srv://<username>:<password>@<clusterUrl>`;

   // Replace this with your constructor options
   const opts = {
     loggerLevel: "info",
     useUnifiedTopology: true,
   };

   // Create a new MongoClient
   const client = new MongoClient(uri, opts);

   async function run() {
     try {
       // Connect the client to the server
       await client.connect();

       // Establish and verify connection
       await client.db("admin").command({ ping: 1 });
       console.log("Connected successfully to server");
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }
   run().catch(console.dir);

The following table describes several common connection options that can be
passed to the ``MongoClient`` constructor.

.. list-table::
   :header-rows: 1

   * - Option Name
     - Type
     - Default Value
     - Description
   * - **useUnifiedTopology**
     - boolean
     - **false**
     - Specifies whether to opt into the new Server Discovery and Monitoring
       (SDAM) engine. The next major driver release removes the old engine and
       deprecates this option.
   * - **validateOptions**
     - boolean
     - **false**
     - Specifies whether to error when instantiating the client the constructor
       is passed an unknown option. If ``false``, the driver produces warnings
       only.
   * - **poolSize**
     - integer
     - **5**
     - Specifies the maximum size of the individual server connection pool.
   * - **minSize**
     - integer
     - **0**
     - Specifies the minimum size of connections to maintain in the individual
       server pool.
   * - **tlsInsecure**
     - boolean
     - **false**
     - Specifies whether to skip validation of the server certificate with the
       Certificate Authority.
   * - **family**
     - number
     - **null**
     - Specifies the version of the IP stack. Possible values include: **4**,
       **6**, **0**, or **null**. The **0** and **null** settings attempt to
       connect with IPv6 and fall back to IPv4 upon failure.
   * - **tlsCAFile**
     - string
     - **null**
     - Specifies the path to a file containing one or more certificate
       authorities to trust when establishing a TLS connection.
   * - **tlsCertificateFile**
     - string
     - **null**
     - Specifies the path to the client certificate file or the client private
       key file. If both are required, the two files should be concatenated.
   * - **tlsCertificateKeyFilePassword**
     - string
     - **null**
     - Specifies the password to decrypt client private key used for TLS
       connections.
   * - **noDelay**
     - boolean
     - **true**
     - Specifies whether to use the TCP socket no delay option. For more
       information, see the documentation for `Node.js socket.setNoDelay
       <https://nodejs.org/dist/latest-v10.x/docs/api/net.html#net_socket_setnodelay_nodelay>`_.
   * - **keepAlive**
     - boolean
     - **true**
     - Specifies whether ``keepAlive`` is enabled on the TCP socket. For more
       information, see the documentation for `Node.js socket.setKeepAlive
       <https://nodejs.org/dist/latest-v10.x/docs/api/net.html#net_socket_setkeepalive_enable_initialdelay>`_.
   * - **keepAliveInitialDelay**
     - integer
     - **30000**
     - Specifies the number of milliseconds to wait before initiating
       ``keepAlive`` on the TCP socket. For more information, see the
       documentation for `Node.js socket.setKeepAlive
       <https://nodejs.org/dist/latest-v10.x/docs/api/net.html#net_socket_setkeepalive_enable_initialdelay>`_.
   * - **connectTimeoutMS**
     - integer
     - **30000**
     - Specifies the number of milliseconds to wait before timeout on a TCP
       connection.
   * - **socketTimeoutMS**
     - integer
     - **360000**
     - Specifies the number of milliseconds to wait before timeout on a TCP
       socket.
   * - **w**
     - string or integer
     - **null**
     - Specifies the write concern. For more information on values, see the
       server documentation on the 
       :manual:`w Option </reference/write-concern/#w-option>`.
   * - **forceServerObjectId**
     - boolean
     - **false**
     - Specifies whether to force the server to assign ``_id`` values to
       documents instead of the driver.
   * - **serializeFunctions**
     - boolean
     - **false**
     - Specifies whether to serialize functions on any object passed to the
       server.
   * - **ignoreUndefined**
     - boolean
     - **false**
     - Specifies whether the BSON serializer should ignore undefined fields.
   * - **raw**
     - boolean
     - **false**
     - Specifies whether to return document results as raw BSON buffers.
   * - **promoteLongs**
     - boolean
     - **true**
     - Specifies whether to convert ``Long`` values to a number if they fit
       inside 53 bits of resolution.
   * - **promoteBuffers**
     - boolean
     - **false**
     - Specifies whether to promote Binary BSON values to native Node.js
       ``Buffer`` type data.
   * - **promoteValues**
     - boolean
     - **true**
     - Specifies whether to promote BSON values to Node.js native types when
       possible. When set to false, BSON values are presented as wrapper types.
   * - **pkFactory**
     - object
     - **null**
     - Specifies a primary key factory object that generates custom ``_id``
       keys.
   * - **promiseLibrary**
     - object
     - **null**
     - Specifies the Promise library class the application uses (e.g. Bluebird).
       This library must be compatible with ES6.
   * - **loggerLevel**
     - string
     - **null**
     - Specifies the logger level used by the driver. Valid choices are:
       ``error``, ``warn``, ``info``, and ``debug``.
   * - **logger**
     - object
     - **null**
     - Specifies a custom logger to be used by the client.

For a complete list of options, see the :node-api:`MongoClient
<MongoClient.html>` API reference page.
