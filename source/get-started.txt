.. _node-get-started:

============================
Getting Started with Node.js
============================

.. facet::
   :name: genre
   :values: tutorial 

.. meta:: 
   :description: Learn how to create an app to connect to MongoDB deployment by using the Node.js driver.
   :keywords: node.js

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

This guide shows you how to create an application that uses the
{+driver-long+} to connect to a MongoDB cluster hosted on MongoDB Atlas. If
you prefer to connect to MongoDB using a different driver or programming
language, see our :driver:`list of official drivers <>`.

The {+driver-short+} is a library of functions that you can use to connect
to and communicate with MongoDB.

MongoDB Atlas is a fully managed cloud database service that hosts your
MongoDB deployments. You can create your own free (no credit card
required) MongoDB Atlas deployment by following the steps in this guide.

Follow the steps in this guide to connect a sample Node.js application to
a MongoDB Atlas deployment.

.. _node-quick-start-download-and-install:
.. _node-get-started-download-and-install:

Download and Install
--------------------

.. procedure::
   :style: connected

   .. step:: Install Node and npm

      Ensure you have Node.js {+min-node-version+} or later and 
      npm (Node Package Manager) installed in your development environment.

      For information on how to install Node.js and npm, see
      `downloading and installing Node.js and npm <https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`__.

   .. step:: Create a Project Directory

      In your shell, run the following command to create a 
      directory called ``node_quickstart`` for this project:

      .. code-block:: bash

         mkdir node_quickstart

      Run the following command to navigate into the project 
      directory:

      .. code-block:: bash

         cd node_quickstart

      Run the following command to initialize your Node.js project:

      .. code-block:: bash

         npm init -y

      When this command successfully completes, you have a ``package.json`` 
      file in your ``node_quickstart`` directory.


   .. step:: Install the Node.js Driver

      Run the following command in your shell to install
      the driver in your project directory:

      .. code-block:: bash

         npm install mongodb@{+version+}

      This command performs the following actions:

      - Downloads the ``mongodb`` package and the dependencies it requires
      - Saves the package in the ``node_modules`` directory
      - Records the dependency information in the ``package.json`` file

After you complete these steps, you have Node.js and npm installed 
and a new project directory with the driver dependencies installed.

.. include:: /includes/quick-start/troubleshoot.rst

.. _node-quick-start-create-deployment:
.. _node-get-started-create-deployment:

Create a MongoDB Deployment
---------------------------

You can create a free tier MongoDB deployment on MongoDB Atlas
to store and manage your data. MongoDB Atlas hosts and manages
your MongoDB database in the cloud.

.. procedure::
   :style: connected

   .. step:: Create a Free MongoDB deployment on Atlas

      Complete the :atlas:`Get Started with Atlas </getting-started?tck=docs_driver_nodejs>`
      guide to set up a new Atlas account and load sample data into a new free
      tier MongoDB deployment.
      
   .. step:: Save your Credentials

      After you create your database user, save that user's 
      username and password to a safe location for use in an upcoming step.
  
After you complete these steps, you have a new free tier MongoDB
deployment on Atlas, database user credentials, and sample data loaded
in your database.

.. include:: /includes/quick-start/troubleshoot.rst

.. _node-quick-start-connect-to-mongodb:
.. _node-get-started-connect-to-mongodb:

Connect to MongoDB
------------------

.. procedure::
   :style: connected

   .. step:: Create your Node.js Application

      Create a file to contain your application called ``index.js`` in your
      ``node_quickstart`` project directory. 
      
      Copy and paste the following code into the ``index.js`` file:
      
      .. code-block:: js

         const { MongoClient } = require("mongodb");

         // Replace the uri string with your connection string.
         const uri = "<connection string uri>";

         const client = new MongoClient(uri);

         async function run() {
           try {
             const database = client.db('sample_mflix');
             const movies = database.collection('movies');

             // Query for a movie that has the title 'Back to the Future'
             const query = { title: 'Back to the Future' };
             const movie = await movies.findOne(query);

             console.log(movie);
           } finally {
             // Ensures that the client will close when you finish/error
             await client.close();
           }
         }
         run().catch(console.dir);

   .. step:: Assign the Connection String

      Replace the ``<connection string uri>`` placeholder with the 
      connection string that you copied from the :ref:`node-quick-start-connection-string`
      step of this guide.

   .. step:: Run your Node.js Application

      In your shell, run the following command to start this application:
      
      .. code-block:: none

         node index.js

      The output includes details of the retrieved movie document:

      .. code-block:: none

         {
           _id: ...,
           plot: 'A young man is accidentally sent 30 years into the past...',
           genres: [ 'Adventure', 'Comedy', 'Sci-Fi' ],
           ...
           title: 'Back to the Future',
           ...
         }

      If you encounter an error or see no output, check whether you specified the
      proper connection string in the ``index.js`` file, and that you loaded the
      sample data.

After you complete these steps, you have a working application that
uses the driver to connect to your MongoDB deployment, runs a query on
the sample data, and prints out the result.

.. include:: /includes/quick-start/troubleshoot.rst

.. _node-quick-start-next-steps:
.. _node-get-started-next-steps:

Next Steps
----------

Congratulations on completing the quick start tutorial!

In this tutorial, you created a Node.js application that
connects to a MongoDB deployment hosted on MongoDB Atlas
and retrieves a document that matches a query.

Learn more about the {+driver-long+} from the following resources:

- Discover how to perform read and write operations in the 
  :ref:`CRUD Operations <node-crud-landing>` section.

- See examples of frequently-used operations in the 
  :ref:`Usage Examples <node-usage-examples>` section.