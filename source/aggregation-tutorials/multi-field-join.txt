.. _node-aggregation-multi-field:

================
Multi-Field Join
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: code example, node.js, lookup, aggregation

Introduction
------------

In this tutorial, you can learn how to use the {+driver-short+} to
perform a multi-field join. A multi-field join occurs when there are
multiple corresponding fields in the documents of two collections that you use to
match documents together. The aggregation matches these documents on the
field values and combines information from both into one document.

.. tip:: One-to-many Joins

   A one-to-many join is a variety of a multi-field join. When you
   perform a one-to-many join, you select one field from a document that
   matches a field value in multiple documents on the other side of the
   join. To learn more about these data relationships,
   see the Wikipedia entries about :wikipedia:`One-to-many (data model)
   <w/index.php?title=One-to-many_(data_model)&oldid=1112674599>` and
   :wikipedia:`Many-to-many (data model)
   <w/index.php?title=Many-to-many_(data_model)&oldid=1169943560>`.

Aggregation Task Summary
~~~~~~~~~~~~~~~~~~~~~~~~

This aggregation tutorial demonstrates how to join data from two
collections related to product information and customer orders.
The aggregated result is a list of products ordered in 2020 that also
contains details about each order.

This example uses two collections:

- ``products``, which contains documents describing the products that
  a shop sells
- ``orders``, which contains documents describing individual orders
  for products in a shop

An order can only contain one product, so the aggregation uses a
multi-field join to match a product document to documents representing orders of
that product. The collections are joined by the ``name`` and
``variation`` fields in documents in the ``products`` collection, corresponding
to the ``product_name`` and ``product_variation`` fields in documents in
the ``orders`` collection.

Before You Get Started
----------------------

Before you start following this tutorial, follow the
instructions in the :ref:`node-agg-tutorial-template-app` section of the
Aggregation Tutorials page to set up the template app.

Once you set up the app, access the ``products`` and ``orders``
collections by updating the collection name placeholders, as shown in
the following code:

.. literalinclude:: /includes/aggregation/multi-field-join.js
   :language: javascript
   :copyable: true
   :start-after: start-colls
   :end-before: end-colls
   :dedent:

Insert sample data into the ``products`` collection by
pasting the following sample documents into the ``sampleData1`` array:

.. literalinclude:: /includes/aggregation/multi-field-join.js
   :language: javascript
   :copyable: true
   :start-after: start-products
   :end-before: end-products
   :dedent:

Insert sample data into the ``orders`` collection by
pasting the following sample documents into the ``sampleData2`` array:

.. literalinclude:: /includes/aggregation/multi-field-join.js
   :language: javascript
   :copyable: true
   :start-after: start-orders
   :end-before: end-orders
   :dedent:

Tutorial
--------

.. procedure::
   :style: connected

   .. step:: Build The Aggregation Pipeline

      .. procedure::
         :style: connected

         .. step::

            The first stage of the pipeline is a :manual:`$lookup
            </reference/operator/aggregation/lookup>` stage to join the
            ``orders`` collection to the ``products`` collection by two
            fields in each collection. The lookup stage contains an
            embedded pipeline to configure the join.
            
            Within the embedded pipeline, add a :manual:`$match
            </reference/operator/aggregation/match>` stage to match the
            values of two fields on each side of the join. Note that the following
            code uses aliases for the ``name`` and ``variation`` fields
            set when :ref:`creating the $lookup stage <node-multi-field-agg-lookup-stage>`:

            .. literalinclude:: /includes/aggregation/multi-field-join.js
               :language: javascript
               :copyable: true
               :start-after: start-embedded-pl-match1
               :end-before: end-embedded-pl-match1
               :dedent:

            Within the embedded pipeline, add another :manual:`$match
            </reference/operator/aggregation/match>` stage to match
            orders placed in 2020:

            .. literalinclude:: /includes/aggregation/multi-field-join.js
               :language: javascript
               :copyable: true
               :start-after: start-embedded-pl-match2
               :end-before: end-embedded-pl-match2
               :dedent:

            Within the embedded pipeline, add an :manual:`$unset
            </reference/operator/aggregation/unset>` stage to remove
            unneeded fields from the ``orders`` collection side of the join:

            .. literalinclude:: /includes/aggregation/multi-field-join.js
               :language: javascript
               :copyable: true
               :start-after: start-embedded-pl-unset
               :end-before: end-embedded-pl-unset
               :dedent:

            .. _node-multi-field-agg-lookup-stage:

            After the embedded pipeline is completed, add the
            ``$lookup`` stage to the main aggregation pipeline.
            Configure this stage to store the processed lookup fields in
            an array field called ``orders``:

            .. literalinclude:: /includes/aggregation/multi-field-join.js
               :language: javascript
               :copyable: true
               :start-after: start-lookup
               :end-before: end-lookup
               :dedent:

         .. step::

            Next, add a :manual:`$match
            </reference/operator/aggregation/match>` stage to only show
            products for which there is at least one order in 2020,
            based on the ``orders`` array calculated in the previous step:

            .. literalinclude:: /includes/aggregation/multi-field-join.js
               :language: javascript
               :copyable: true
               :start-after: start-match
               :end-before: end-match
               :dedent:

         .. step::

            Finally, add an :manual:`$unset
            </reference/operator/aggregation/unset>` stage. The
            ``$unset`` stage removes the ``_id`` and ``description``
            fields from the result documents:
            
            .. literalinclude:: /includes/aggregation/multi-field-join.js
               :language: javascript
               :copyable: true
               :start-after: start-unset
               :end-before: end-unset
               :dedent:

   .. step:: Run the Aggregation Pipeline

      Run the following command in your shell to perform the aggregation
      on the ``products`` collection:

      .. code-block:: bash
      
         node agg_tutorial.js

      The aggregated result contains two documents. The documents
      represent products for which there were orders placed in 2020.
      Each document contains an ``orders`` array field that lists details
      about each order for that product:

      .. code-block:: javascript
         :copyable: false
         
         {
           name: 'Asus Laptop',
           variation: 'Standard Display',
           category: 'ELECTRONICS',
           orders: [
             {
               customer_id: 'elise_smith@myemail.com',
               orderdate: 2020-05-30T08:35:52.000Z,
               value: 431.43
             },
             {
               customer_id: 'jjones@tepidmail.com',
               orderdate: 2020-12-26T08:55:46.000Z,
               value: 429.65
             }
           ]
         }
         {
           name: 'Morphy Richards Food Mixer',
           variation: 'Deluxe',
           category: 'KITCHENWARE',
           orders: [
             {
               customer_id: 'oranieri@warmmail.com',
               orderdate: 2020-01-01T08:25:37.000Z,
               value: 63.13
             }
           ]
         }

      The result documents contain details from documents in the
      ``orders`` collection and the ``products`` collection, joined by
      the product names and variations.

To see the complete code for this tutorial, see the `Complete Multi-field Join Tutorial
<https://github.com/mongodb/docs-node/tree/master/source/includes/aggregation/multi-field-join.js>`__.
