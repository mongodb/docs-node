.. _node-mongoose-get-started:

=========================
Get Started with Mongoose
=========================

.. facet::
   :name: genre
   :values: tutorial 

.. meta:: 
   :description: Learn how to create an app to connect to MongoDB and perform CRUD operations by using Mongoose.
   :keywords: integrations, mongoose, crud

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Mongoose is an Object Data Modeling (ODM) library for MongoDB. You can use
Mongoose to help with data modeling, schema enforcement, model validation, and
general data manipulation. Because MongoDB has a flexible data model that allows
you to alter and update databases in the future, there aren't rigid schemas.
However, Mongoose enforces a semi-rigid schema from the beginning, so
you must define a schema and model.

In this tutorial, you will perform the following actions:

- Set up your environment to use Mongoose
- Connect to MongoDB
- Create a Mongoose schema and model
- Insert, update, find, and delete data
- Project document fields
- Validate your data
- Use multiple schemas and middleware

Schemas
~~~~~~~

A schema defines the structure of your collection documents. A Mongoose schema
maps directly to a MongoDB collection.

The following example creates a new Schema named ``blog``:

.. literalinclude:: /includes/integrations/mongoose-schema-example.js
   :language: javascript
   :start-after: start-schema-example
   :end-before: end-schema-example
   :dedent:

When you create a schema, you must define each field and its data types. The
following types are permitted:

- String
- Number
- Date
- Buffer
- Boolean
- Mixed
- ObjectId
- Array
- Decimal128
- Map

Models
~~~~~~

Models take your schema and apply it to each document in its collection.  Models
are responsible for all document interactions such as create, read, update, and
delete (CRUD) operations.

.. tip::

   The first argument you pass to the model is the singular form of your
   collection name. Mongoose automatically changes this to the plural form,
   transforms it to lowercase, and uses that for the database collection name.

The following example shows how to declare a model named ``Blog`` that uses the
``blog`` schema:

.. literalinclude:: /includes/integrations/mongoose-model-example.js
   :language: javascript
   :dedent:

In the preceding example, ``Blog`` translates to the ``blogs`` collection in
MongoDB.

.. _node-mongoose-get-started-helper-methods:

Helper Methods
~~~~~~~~~~~~~~

Mongoose includes several helper methods that are abstracted from regular
MongoDB methods. In this section, you can find examples of some of these
methods. These methods are not used specifically in this tutorial, but they are
helpful to reference when getting started with Mongoose.

exists()
````````

The ``exists()`` method returns either ``null`` or the ``ObjectId`` of a document that
matches the provided query. The following is an example of matching an article
based on the ``author`` field:

.. code-block:: javascript

   const blog = await Blog.exists({ author: 'Jess Garcia' });
   console.log(blog);

For more information, see the `Model.exists()
<https://mongoosejs.com/docs/api/model.html#Model.exists()>`__ section of the
Mongoose API documentation.

where()
```````

The ``where()`` method allows you to chain and build queries. The following is
an example of performing a find operation by using ``findOne()`` and the equivalent
approach by using the ``where()`` method:

.. code-block:: javascript

   const blogFind = await Blog.findOne({ author: "Jess Garcia" });
   console.log(blogFind);

   const blogWhere = await Blog.where("author").equals("Jess Garcia");
   console.log(blogWhere);

You can use either method to perform find operations. You can also chain
multiple ``where()`` methods to build increasingly complex queries.

To include projection when using the ``where()`` method, chain the ``select()`` method
after your query, as shown in the following example:

.. code-block:: javascript

   const blog = await Blog.where("author").equals("Jess Garcia").select("title author");
   console.log(blog);

For more information, see the `Model.where()
<https://mongoosejs.com/docs/api/model.html#Model.$where()>`__ section of the
Mongoose API documentation.

Prerequisites
-------------

Before you begin this tutorial, perform the following actions:

- Set up a MongoDB Atlas account and configure a cluster.
  To view instructions, see the :atlas:`Get Started with Atlas
  </getting-started>` guide.
- Install `Node.js <https://nodejs.org/en/download>`__ {+min-node-version+} or later.

.. procedure::
   :style: connected

   .. step:: Set up your environment.

      This tutorial uses `nodemon <https://www.npmjs.com/package/nodemon>`__ to
      run the code locally. Run the following commands in your terminal to
      initialize your project and install the necessary dependencies: 

      .. code-block:: bash

         mkdir mongodb-mongoose
         cd mongodb-mongoose
         npm init -y
         npm i mongoose
         npm i -D nodemon

      Open your project in your preferred code editor. This tutorial uses ES
      Modules instead of CommonJS. You must add the ``module`` type to use ES
      Modules. Go to the ``package.json`` file and add the following code:

      .. code-block:: json

         ...
         "scripts": {
           "dev": "nodemon index.js"
         },
         "type": "module",
         ...

   .. step:: Connect to MongoDB

      In the root level of your project, create a file named ``index.js`` and
      add the following code to the top of the file:

      .. code-block:: javascript

         import mongoose from 'mongoose';

         mongoose.connect("<connection string>")

      Replace the ``<connection string>`` placeholder with your MongoDB Atlas
      connection string. For more information on how to find your connection
      string, see the :atlas:`Connect to Your Cluster
      </tutorial/connect-to-your-cluster>` tutorial in the Atlas documentation. 

   .. step:: Create a Schema and Model

      Before you start adding and updating data in MongoDB, you must create a
      schema and model.

      With Mongoose, you create a schema model file for each schema that is
      needed. First, create the a folder called ``model`` to put all your schema
      files in, then create your first schema file called ``Blog.js``. Open this
      file and add the following code:  

      .. literalinclude:: /includes/integrations/mongoose-blogSchema.js
         :language: javascript
         :dedent:

   .. step:: Perform CRUD Operations

      You now have your first model and schema set up, and you can start
      inserting data into the database. The following sections show you how to
      perform CRUD operations using Mongoose.

      .. procedure::
         :style: connected

      Insert Data
      ~~~~~~~~~~~

      Go to ``index.js`` and add the following import statement to the top of your file:

      .. literalinclude:: /includes/integrations/mongoose-get-started-blogSchema.js
         :language: javascript
         :start-after: start-blogSchema-import
         :end-before: end-blogSchema-import
         :dedent:

      Add the following code below the line that contains your connection string:

      .. literalinclude:: /includes/integrations/mongoose-get-started-blogSchema.js
         :language: javascript
         :start-after: start-insert
         :end-before: end-insert
         :dedent:

      The preceding code uses the Mongoose ``create()`` method to instantiate
      the object representing a blog article, and then saves it to the database.
      The returned document logs to the console, including its ``_id``. Take
      note of this ``_id`` for use in future steps.

      To run the code, use the following command in your terminal:

      .. io-code-block::
         :copyable:

         .. input:: 
            :language: bash

            npm run dev

         .. output::
            :language: console
            :visible: false

            Created article: {
               title: 'Awesome Post!',
               slug: 'awesome-post',
               published: true,
               content: 'This is the best post ever',
               tags: [ 'featured', 'announcement' ],
               _id: new ObjectId('...'),
               comments: [],
               __v: 0
            }
      
      .. note::

         When you use nodemon, the code runs every time you save a file. Saving will
         insert multiple articles into your database.

      Update Data
      ~~~~~~~~~~~

      To update data, you can directly edit the local object with Mongoose.
      Then, you can use the ``save()`` method to write the update to the
      database. 
      
      Add the following code to update the article you inserted in the
      previous section: 

      .. io-code-block::
         :copyable:

         .. input:: /includes/integrations/mongoose-get-started-blogSchema.js
            :language: javascript
            :start-after: start-update
            :end-before: end-update
      
         .. output::
            :language: console
            :visible: false

            Updated Article: {
               title: 'The Most Awesomest Post!!',
               slug: 'awesome-post',
               published: true,
               content: 'This is the best post ever',
               tags: [ 'featured', 'announcement' ],
               _id: new ObjectId('...'),
               comments: [],
               __v: 0
            }

      Find Data
      ~~~~~~~~~

      To update a specific document, you can use the Mongoose ``findById()``
      method to get a document by its ``ObjectId``.

      Add following code to your ``index.js`` file to find a specific article by
      its ``ObjectId``, replacing the ``<object id>`` placeholder with the
      ``ObjectId`` value for the document that you inserted previously:

      .. io-code-block::
         :copyable:

         .. input:: /includes/integrations/mongoose-get-started-blogSchema.js
            :language: javascript
            :start-after: start-find-by-id
            :end-before: end-find-by-id

         .. output::
            :language: console
            :visible: false

            Found Article by ID: {
               _id: new ObjectId('68261c9dae39e390341c367c'),
               title: 'The Most Awesomest Post!!',
               slug: 'awesome-post',
               published: true,
               content: 'This is the best post ever',
               tags: [ 'featured', 'announcement' ],
               comments: [],
               __v: 0
            }
      
      .. note::

         The Mongoose ``exec()`` function is an option of the ``findById()``
         method that returns a promise. To learn more about working with
         promises and Mongoose, see the `Promises guide
         <https://mongoosejs.com/docs/promises.html>`__ in the Mongoose
         documentation. 
   
      Specify Document Fields
      ~~~~~~~~~~~~~~~~~~~~~~~

      Like with the {+driver-short+}, you can use Mongoose to project only the
      fields that you need. The following code specifies to only project the
      ``title``, ``slug``, and ``content`` fields. 

      Add the following code to your ``index.js`` file, replacing the ``<object
      id>`` placeholder with the ``ObjectId`` value for the document that you
      inserted previously:

      .. io-code-block::
         :copyable:

         .. input:: /includes/integrations/mongoose-get-started-blogSchema.js
            :language: javascript
            :start-after: start-project-fields
            :end-before: end-project-fields

         .. output::
            :language: console
            :visible: false

            Projected Article: {
               _id: new ObjectId('...'),
               title: 'The Most Awesomest Post!!',
               slug: 'awesome-post',
               content: 'This is the best post ever'
            }

      Delete Data
      ~~~~~~~~~~~

      Mongoose uses the ``deleteOne()`` and ``deleteMany()`` methods to delete
      data from a collection. You can specify the field of the document you want
      to delete and pass that field to the method that you choose. 

      Add the following code to your index.js file to delete one article from the
      database:

      .. io-code-block::
         :copyable:

         .. input:: /includes/integrations/mongoose-get-started-blogSchema.js
            :language: javascript
            :start-after: start-delete-one
            :end-before: end-delete-one

         .. output::
            :language: console
            :visible: false

            Deleted One Blog: { acknowledged: true, deletedCount: 1 }

      To delete multiple articles, you can add the following code:

      .. io-code-block::
         :copyable:

         .. input:: /includes/integrations/mongoose-get-started-blogSchema.js
            :language: javascript
            :start-after: start-delete-many
            :end-before: end-delete-many

         .. output::
            :language: console
            :visible: false

            Deleted Many Blogs: { acknowledged: true, deletedCount: 4 }

   .. step:: Validate Your Data

      The articles inserted in the previous steps do not contain the ``author``,
      ``dates``, or ``comments`` fields, even though these fields are included
      in the schema. This is because although you defined the structure of your
      document, you have not defined which fields are required. Any field that
      is no defined as required can be omitted. 

      To add data validation and define these requirements, update the schema in
      ``Blog.js`` as shown in the following example:

      .. literalinclude:: /includes/integrations/mongoose-blogSchema-validate.js
         :language: javascript
         :start-after: start-blogSchema
         :end-before: end-blogSchema
         :dedent:

      In Mongoose, when you include validation on a field, you must pass an
      object as its value.  

      ..  tip::

         When you use schemas with Mongoose, ``value: String`` is the same as
         ``value: {type: String}``.

      You can use several validation methods with Mongoose. For example, you can
      set ``required`` to true on any fields that you want to require. You can
      also validate the type and the formatting. In the preceding code, the
      ``slug`` field is defined as a ``string`` that is always in ``lowercase``.
      This validation takes the slug input and converts it to lowercase before
      saving the document to the database.  

      For the ``createdAt`` date field, you can set the default by using an
      arrow function. This field is also specified to be impossible to change
      later by setting ``immutable`` to ``true``. 

      .. note::

         Validators only run on the ``create()`` and ``save()`` methods.

   .. step:: Introduce Multiple Schemas

      Now that you have validation on your blog schema, and the ``author`` field is
      ``required``, you must update ``index.js`` to include the ``author``. To do
      this, you can create a separate schema. 

      In the ``model`` folder, create a new file named ``User.js``. Add the
      following code to this file: 

      .. literalinclude:: /includes/integrations/mongoose-userSchema.js
         :language: javascript
         :dedent:

      To reference this new user model in the blog schema, update the
      ``Blog.js`` file to include the following code: 

      .. code-block:: javascript

         import mongoose from 'mongoose';
         const { Schema, SchemaTypes, model } = mongoose;

         const blogSchema = new Schema({
         ...
         author: {
            type: SchemaTypes.ObjectId,
            ref: 'User',
            required: true,
         },
         ...,
         comments: [{
            user: {
               type: SchemaTypes.ObjectId,
               ref: 'User',
               required: true,
            },
            content: String,
            votes: Number
           }];
         });
         ...


      The preceding code sets the ``author`` and ``comments.user`` to
      ``SchemaTypes.ObjectId`` and adds a ``ref``, or reference, to the user
      model. Be sure to destructure ``SchemaTypes`` from Mongoose at the top of
      the file below the import statement. 

      To use the new user model in your application, go to the ``index.js``
      file. Add the following code to the top of the file to import the user
      model: 

      .. literalinclude:: /includes/integrations/mongoose-get-started-multiple-schemas.js
         :language: javascript
         :start-after: start-user-import
         :end-before: end-user-import

      Because you added field validation to the blog schema, the previous code to
      insert, update, and delete blogs, and to specify fields to project, won't
      pass the validation and the application will error.

      Replace the existing code with the following code to create a new user,
      and then create a new article that uses this user as the author, as shown
      in the following code: 

      .. io-code-block::
         :copyable:

         .. input:: /includes/integrations/mongoose-get-started-multiple-schemas.js
            :language: javascript
            :start-after: start-article-with-author
            :end-before: end-article-with-author

         .. output::
            :language: console
            :visible: false

            Article with Author: {
               title: 'Awesome Post!',
               slug: 'awesome-post',
               published: false,
               author: new ObjectId('...'),
               content: 'This is the best post ever',
               tags: [ 'featured', 'announcement' ],
               _id: new ObjectId('...'),
               createdAt: 2025-05-15T18:05:23.780Z,
               comments: [],
               __v: 0
            }

      The preceding code adds a ``users`` collection with the ``blogs``
      collection in the MongoDB database. This code adds the required ``author``
      field and sets its value to the ``user._id``.  

      To add the values of the ``name`` and ``email`` fields to the ``author``
      field for the article, you can use the Mongoose ``populate()`` method. Add
      the following code to ``index.js`` to populate this data: 

      .. io-code-block::
         :copyable:

         .. input:: /includes/integrations/mongoose-get-started-multiple-schemas.js
            :language: javascript
            :start-after: start-populate-author
            :end-before: end-populate-author

         .. output::
            :language: console
            :visible: false

            Article Populated: {
               _id: new ObjectId('...'),
               title: 'Awesome Post!',
               slug: 'awesome-post',
               published: false,
               author: {
                  _id: new ObjectId('...'),
                  name: 'Jess Garica',
                  email: 'jgarcia@email.com',
                  __v: 0
               },
               content: 'This is the best post ever',
               tags: [ 'featured', 'announcement' ],
               createdAt: 2025-05-15T18:04:28.590Z,
               comments: [],
               __v: 0
            }

      This populates the data for the ``author`` field with the data for this
      article. Mongoose uses the MongoDB ``$lookup`` method to populate the data
      automatically. 

   .. step:: Add Middleware

      In Mongoose, middleware are functions that run before, or during, the
      execution of asynchronous functions at the schema level. 
      
      To use middleware in this project, go to the ``Blog.js`` file. Here you
      can set the ``updated`` date field to update every time an article is
      saved or updated by using middleware.

      Add the following code to a line below your ``blogSchema`` declaration:

      .. literalinclude:: /includes/integrations/mongoose-blogSchema-validate.js
         :language: javascript
         :start-after: start-blogSchema-middleware
         :end-before: end-blogSchema-middleware
         :dedent:

      Go to the ``index.js`` file and then add the following code to find an
      article, update the title, and then save the updated article:

      .. io-code-block::
         :copyable:

         .. input:: /includes/integrations/mongoose-get-started-multiple-schemas.js
            :language: javascript
            :start-after: start-middleware-update
            :end-before: end-middleware-update

         .. output::
            :language: console
            :visible: false

            Article Updated: {
               _id: new ObjectId('...'),
               title: 'Updated Title',
               slug: 'awesome-post',
               published: false,
               author: new ObjectId('...'),
               content: 'This is the best post ever',
               tags: [ 'featured', 'announcement' ],
               createdAt: 2025-05-15T18:04:28.590Z,
               comments: [],
               __v: 0,
               updated: 2025-05-15T18:18:30.249Z
            }

      When you run the application, the returned article includes an ``updated``
      date. 
      
      Besides the ``pre()`` middleware function, Mongoose also offers a
      ``post()`` middleware function.

Next Steps
----------

You now have a sample project that uses Mongoose to perform CRUD operations on a
MongoDB collection. From here, you can choose to build on this project to
incorporate :ref:`Mongoose helper methods
<node-mongoose-get-started-helper-methods>` and build more complex queries.

Additional Resources
--------------------

To learn more about using Mongoose with MongoDB, see the `Mongoose documentation
<https://mongoosejs.com/docs/guide.html>`__.

To find support or to contribute to the MongoDB community, see the `MongoDB
Developer Community <https://www.mongodb.com/community/>`__ page. 