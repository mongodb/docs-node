==========
What's New
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Learn what's new in:

* :ref:`Version 4.4 <version-4.4>`
* :ref:`Version 4.3 <version-4.3>`
* :ref:`Version 4.2 <version-4.2>`
* :ref:`Version 4.1 <version-4.1>`
* :ref:`Version 4.0 <version-4.0>`
* :ref:`Version 3.7 <version-3.7>`
* :ref:`Version 3.6 <version-3.6>`

.. _version-4.4:

What's New in 4.4
-----------------

New features of the 4.4 Node.js driver release include:

- KMIP provider support when using CSFLE.
- TLS support when using CSFLE.
- Hostname canonicalization now accepts "none", "forward", and "forwardAndReverse" as ``authMechanismProperties`` when using GSSAPI.
- In the 4.0.0 release of the driver, the deprecated ``collection.count()`` method was inadvertently changed to behave like ``collection.countDocuments()``.
  In this release, the ``collection.count()`` method is updated to match legacy behavior:

  - If a query is provided, ``collection.count()`` behaves the same as ``collection.countDocuments()`` and performs a collection scan.
  - If no query is  provided, ``collection.count()`` behaves the same as ``collection.estimatedDocumentCount()`` and relies on
    collection metadata.

  .. important:: Deprecation Notice

     The ``cursor.count()`` method is deprecated and will be removed in the next major version, along with ``collection.count()``.
     Use the ``collection.estimatedDocumentCount()`` or ``collection.countDocuments()``
     methods instead.

.. _version-4.3:

What's New in 4.3
-----------------

New features of the 4.3 Node.js driver release include:

- SOCKS5 support
- Option to :ref:`disable UTF-8 validation <nodejs-utf-8-validation>`
- Type inference for nested documents

.. _version-4.2:

What's New in 4.2
-----------------

New features of the 4.2 Node.js driver release include:

- ``srvMaxHosts`` and ``srvServiceName`` DNS seedlist :ref:`connection options <connection-options>`

.. _version-4.1:

What's New in 4.1
-----------------

New features of the 4.1 Node.js driver release include:

- Added load balanced connection support for all cluster types including
  the beta :ref:`Serverless platform <create-new-database-deployment>`.
- Added support for the ``advanceClusterTime()`` method to determine if
  the ``ClientSession`` should update its cluster time.

.. _version-4.0:

What's New in 4.0
-----------------

.. important::

   In this release of the driver, the deprecated ``collection.count()`` method was inadvertently changed to
   behave like ``collection.countDocuments()``. This behavior is corrected in :ref:`version 4.4 <version-4.4>`.

New features of the 4.0 Node.js driver release include:

TypeScript
~~~~~~~~~~

- We've migrated the driver to TypeScript. You can now harness the type
  hinting and intellisense features in editors that support it to develop
  your MongoDB applications. Enjoy the benefits of this work in pure JavaScript
  projects as well.

- The underlying BSON library used by this version is now migrated to
  TypeScript.

- Inline documentation is now consistently formatted to improve display
  in editors.

- If you are a user of the community types ``@types/mongodb``, there will
  **likely be issues** adopting the types from our codebase. We could not
  achieve a one to one match in types due to the details of writing the
  codebase in TypeScript.

We'd love to hear your TypeScript related feature requests. Please submit
ideas on our `JIRA project here <https://jira.mongodb.org/projects/NODE>`__.

Key Changes
~~~~~~~~~~~

Node.js Version
+++++++++++++++

The minimum supported version of Node.js is now v12.9 or greater for
version 4 of the driver. Support for our 3.x branches will continue
until summer 2022 to allow time to upgrade.

.. note::

   3.x supports back to Node.js v4.


Cursor Improvements
+++++++++++++++++++

Our Cursor implementation is now updated to make it clear what is possible
before and after execution of an operation.

.. example::

   .. code-block:: js
      :copyable: False

      const fc = collection.find({a: 2.3}).skip(1)
      for await (const doc of fc) {
        console.log(doc)
        fc.limit(1) // incorrect usage, cursor already executing
      }

There was inconsistency surrounding how the cursor would error if a
setting was applied after cursor execution began. Now, the cursor will
throw an error when attempting to apply operations in an invalid state,
similar to the following:

``MongoError: Cursor is already initialized``

- Affected classes:

  - ``AbstractCursor``
  - ``FindCursor``
  - ``AggregationCursor``
  - ``ChangeStreamCursor`` (This is the underlying cursor for ``ChangeStream``)
  - ``ListCollectionsCursor``

Cursor Stream API
^^^^^^^^^^^^^^^^^

Our Cursor types no longer extend ``Readable`` directly. They must be
transformed into a stream by calling ``cursor.stream()``.

.. example::

   .. code-block:: js
      :copyable: False

      const cursor = collection.find({})
      const stream = cursor.stream()
      stream.on("data", data => console.log)
      stream.on("error", () => client.close())

Use ``hasNext()`` and ``next()`` for manual iteration.
Use ``for await of`` syntax or any ``Promise`` helpers for
asynchronous iteration.

``MongoClientOptions`` Interface
+++++++++++++++++++++++++++++++++

With type hinting, you should find that options passed to a ``MongoClient``
are enumerated and discoverable. We've made a large effort to process
all options in the driver to give early warnings about incompatible settings
to get your app up and running in a correct state quickly.

- ``checkServerIdentity`` is no longer checked before being passed to the
  underlying Node API. Previously, accepted values were ``false``, or
  a function. Now, the argument must be a function. Specifying a
  boolean will result in an error being thrown.

- It is longer required to specify ``useUnifiedTopology`` or ``useNewUrlParser``.

``createCollection()``
++++++++++++++++++++++

This method no longer supports a ``strict`` option, which returned
an error if the collection did not exist. To assert the existence of
a collection, use the ``listCollections()`` method instead.

.. example::

   .. code-block:: js

      const collections = (await db.listCollections({}, { nameOnly: true })
        .toArray()).map(
          ({name}) => name
        );
      if (!collections.includes(myNewCollectionName)) {
        throw new Error(`${myNewCollectionName} doesn't exist`);
      }

``BulkWriteError`` â†’ ``MongoBulkWriteError``
++++++++++++++++++++++++++++++++++++++++++++

``BulkWriteError`` is now renamed to ``MongoBulkWriteError``.

When running bulk operations that make writes you can encounter errors
depending on your settings. Import the new class name ``MongoBulkWriteError``
when testing for errors in bulk operations.

``DB``
++++++

``DB`` is no longer an ``EventEmitter``. Listen for events directly from your
``MongoClient`` instance.

``Collection.group()``
++++++++++++++++++++++

The ``Collection.group()`` helper, deprecated since MongoDB 3.4,
is now removed. Use the aggregation pipeline :manual:`$group </reference/operator/aggregation/group/#pipe._S_group>`
operator instead.

Authentication
++++++++++++++

- ``gssapiServiceName`` is now removed. Use `authMechanismProperties.SERVICE_NAME <{+api+}/interfaces/MongoClientOptions.html#authMechanismProperties>`__ in the URI or as an option on ``MongoClientOptions``.

  .. example::

     .. code-block:: js

        ?authMechanismProperties.SERVICE_NAME
        // or
        new MongoClient(url, { SERVICE_NAME: "alternateServiceName" })

- Specifying username and password as options is only supported in the URI
  or as an option on ``MongoClientOptions``.

  .. example::

     .. code-block:: js

        new MongoClient("mongodb://username:password@<host><port>")
        // or
        new MongoClient(url, { auth: { username: "<>", password: "<>" } })

``GridStore`` Removal
+++++++++++++++++++++

The GridStore API (already deprecated in 3.x) is now replaced with ``GridFSBucket``.
For more information on ``GridFS``, see the :manual:`mongodb manual </core/gridfs>`.

Below are some snippets that represent equivalent operations.

Construction
^^^^^^^^^^^^

.. example::

   .. code-block:: javascript

      // old way
      const gs = new GridStore(db, filename, mode[, options])
      // new way
      const bucket = new GridFSBucket(client.db('test')[,options])

File Seeking
^^^^^^^^^^^^

GridFSBucket uses the Node.js Stream API. You can replicate file seeking
by using the ``start`` and ``end`` options, creating a download stream
from your ``GridFSBucket``.

.. example::

   .. code-block:: js

      bucket.openDownloadStreamByName(filename, { start: 0, end: 100 })

File Upload & Download
^^^^^^^^^^^^^^^^^^^^^^

.. example::

   .. code-block:: javascript

      await client.connect();
      const filename = 'test.txt'; // whatever local file name you want
      const db = client.db();
      const bucket = new GridFSBucket(db);

      fs.createReadStream(filename)
        .pipe(bucket.openUploadStream(filename))
        .on('error', console.error)
        .on('finish', () => {
          console.log('done writing to db!');

          bucket
            .find()
            .toArray()
            .then(files => {
              console.log(files);

              bucket
                .openDownloadStreamByName(filename)
                .pipe(fs.createWriteStream('downloaded_' + filename))
                .on('error', console.error)
                .on('finish', () => {
                  console.log('done downloading!');
                  client.close();
                });
            });
        });

.. note::

   ``GridFSBucket`` does not need to be closed like ``GridStore``.

File Deletion
^^^^^^^^^^^^^

.. example::

   .. code-block:: js

      // old way
      GridStore.unlink(db, name, callback);
      // new way
      bucket.delete(file_id);

Finding File Metadata
^^^^^^^^^^^^^^^^^^^^^

File metadata that used to be accessible on the ``GridStore`` instance can be
found by querying the bucket.

.. example::

   .. code-block:: js

      const fileMetaDataList: GridFSFile[] = bucket.find({}).toArray();

Unified Topology
++++++++++++++++

- We internally now only manage a ``unifiedTopology`` when you connect
  to a ``mongod``. The differences between this and previous versions
  is `detailed here <https://mongodb.github.io/node-mongodb-native/3.6/reference/unified-topology/>`__.

- It is longer required to specify ``useUnifiedTopology`` or ``useNewUrlParser``.

- You must use the new ``directConnection`` `option <{+api+}/interfaces/MongoClientOptions.html#directConnection>`__
  to connect to uninitialized replica set members.

Explain
+++++++

Support is now added for fine-grained verbosity modes. You can learn more
about each mode :manual:`here </reference/method/cursor.explain/#behavior/>`.

Command Monitoring
++++++++++++++++++

The ``instrument()`` method is now removed. Use command monitoring instead.
See our guide on :doc:`command monitoring </fundamentals/monitoring/command-monitoring>`
for more information.


Detailed List
~~~~~~~~~~~~~

For a detailed list of breaking changes, removals, and associated JIRA tickets,
see the detailed `list here <https://github.com/mongodb/node-mongodb-native/blob/4.0/docs/CHANGES_4.0.0.md>`__.


.. _version-3.7:

What's New in 3.7
-----------------

New features of the 3.7 Node.js driver release include:

- Added support for load balancer mode while enabling the ``useUnifiedTopology`` option
- Added support for :ref:`{+stable-api+} <nodejs-stable-api>` while enabling the ``useUnifiedTopology`` option

.. _version-3.6:

What's New in 3.6
-----------------

New features of the 3.6 Node.js driver release include:

- Added support for the :ref:`MONGODB-AWS <mongodb-aws>` authentication mechanism using Amazon Web Services (AWS) Identity and Access Management (IAM) credentials
- Added support for Online Certificate Status Protocol (OCSP)
- The `find() <{+api+}/classes/Collection.html#find>`__ method supports ``allowDiskUse()`` for sorts that require too much memory to execute in RAM
- The :ref:`update() <updateDocuments>` and :ref:`replaceOne() <replacementDocument>` methods support index hints
- A reduction in recovery time for topology changes and failover events
- Improvements in validation testing for the default :manual:`writeConcern </reference/write-concern/>`
- Authentication requires fewer round trips to the server, resulting in faster connection setup
- Shorter Salted Challenge Response Authentication Mechanism (:manual:`SCRAM </core/security-scram/>`) conversations
- Ability to create collections and indexes for multiple document transactions
- Running validation for a collection in the background
