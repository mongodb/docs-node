==========
What's New
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Learn what's new in:

* :ref:`Version 4.0 <version-4.0>`
* :ref:`Version 3.6 <version-3.6>`

.. _version-4.0:

What's New in 4.0
-----------------

New features of the 4.0 Node.js driver release include:

TypeScript
~~~~~~~~~~

- We've migrated the driver to TypeScript. You can now harness the type
  hinting and intellisense features in editors that support it to develop
  your MongoDB applications. You do not have to adopt TypeScript to get
  the benefits of this work.

- The underlying BSON library used by this version has been migrated to
  TypeScript.

- Inline documentation has been consistenly formatted to improve display
  in editors.

- If you are a user of the community types ``@types/mongodb``, there will
  **likely be issues** adopting the types from our codebase. We could not
  achieve a one to one match in types due to the details of writing the
  codebase in TypeScript.

  We'd love to hear your TypeScript related feature requests! Please submit
  ideas on our `JIRA project here <https://jira.mongodb.org/projects/NODE>`__.

Key Changes
~~~~~~~~~~~

Node.js Version
+++++++++++++++

The minimum supported version of Node.js is now v12.9 or greater for
version 4 of the driver. Support for 3.x our 3.x branch will continue
until summer 2022 to allow time to upgrade.

Cursor Improvements
+++++++++++++++++++

Affected classes:
- ``AbstactCursor``
- ``FindCursor``
- ``AggregationCursor``
- ``ChangeStreamCursor`` (This is the underlying cursor for ``ChangeStream``)
- ``ListCollectionsCursor``

Our Cursor implentation has been updated to make it clear what is possible
before and after execution of an operation.

.. example::

   .. code-block:: js
      :copyable: False

      const fc = collection.find({a: 2.3}).skip(1)
      for await (const doc of fc) {
        console.log(doc)
        fc.limit(1) // incorrect usage, cursor already executing
      }

There was inconsistency surrounding how the cursor would error if a
setting was applied after cursor execution began. Now, the cursor will
throw an error when attempting to apply operations in an invalid state,
similar to the following:

``MongoError: Cursor is already initialized``

Stream API
==========

Our Cursor types no longer extend ``Readable`` directly. They must be
transformed into a stream by calling ``cursor.stream()``.

.. example::

   .. code-block:: js
      :copyable: False

      const cursor = collection.find({})
      const stream = cursor.stream()
      stream.on("data", data => console.log)
      stream.on("error", () => client.close())

Use ``hasNext()`` and ``next()`` for manual iteration.
Use ``for await of`` syntax or any ``Promise`` helpers for
asynchronous iteration.

``MongoClientOptions``
++++++++++++++++++++++

With type hinting, you should find that options passed to a ``MongoClient``
are enumeated and discoverable. We've made a large effort to process
all options in the driver to give early warnings about incompatible settings
to get your app up and running in a correct state quickly.

- ``checkServerIdentity`` is no longer checked before being passed to the
  underlying Node API. Previously, accepted values were ``false``, or
  a function. Now, the argument must be a function. Specifying a
  boolean will result in an error being thrown.

``createCollection()``
++++++++++++++++++++++

This method no longer supports a ``strict`` option, which returned
an error if the collection did not exist. To assert the existence of
a collection, use the ``listCollections()`` method instead.

.. example::

   .. code-block:: js

      async function collectionExists(target) {
        let found = false;
        let collCursor = db.listCollections();
        while (await collCursor.hasNext()) {
          let coll = await collCursor.next();
          if (coll.name === target) {
            found = true;
            collCursor.close();
            break;
          }
        }
        assert(found, `Collection ${target} does not exist`);
      }

Rename ``BulkWriteError`` to ``MongoBulkWriteError``
++++++++++++++++++++++++++++++++++++++++++++++++++++

When running bulk operations that make writes you can encounter errors
depending on your settings. Import the new class name ``MongoBulkWriteError``
when testing for errors in bulk operations.

``Db`` is no longer an ``EventEmitter``
+++++++++++++++++++++++++++++++++++++++

All events can be listened for directly from a ``MongoClient`` instance.

``Collection.group()`` Removal
+++++++++++++++++++++++++++++++

The ``Collection.group()`` helper has been deprecated since MongoDB 3.4
and is now removed. Use the aggregation pipeline :manual:`$group </reference/operator/aggregation/group/#pipe._S_group>`
operator instead.

Authentication
++++++++++++++

- ``gassapiServiceName`` has been removed. Users should use :node-api-4.0:`authMechanismProperties.SERVICE_NAME` in the URI
  or as an option on ``MongoClientOptions``.

  .. example::

     .. code-block:: js

        ?authMechanismProperties.SERVICE_NAME
        // or
        new MongoClient(url, { SERVICE_NAME: "alternateServiceName" })

- Specifying username and password as options is only supported in the URI
  or as an option on ``MongoClientOptions``.

  .. example::

     .. code-block:: js

        new MongoClient("mongodb://username:password@<host><port>")
        // or
        new MongoClient(url, { auth: { username: "<>", password: "<>" } })

``GridStore`` Removal
+++++++++++++++++++++

- TODO: Clarify this with Neal.

Unified Topology Only
+++++++++++++++++++++

- We internally now only manage a ``unifiedTopology`` when you connect
  to a ``mongod``. The differences between this and previous versions
  is `detailed here <https://mongodb.github.io/node-mongodb-native/3.6/reference/unified-topology/>`__.

- You must use the new ``directConnection`` :node-api-4.0:`option </mongoclientoptions.html#directconnection>`
  to connect to unitiliazed replica set members.

Explain
+++++++

- Support has been added for fine-grained verbosity modes. You can
  learn more about each mode :manual:`here </reference/method/cursor.explain/#behavior/>`.

``instrumment()`` Removal
+++++++++++++++++++++++++

The ``instrument()`` method has been removed.




.. _version-3.6:

What's New in 3.6
-----------------

New features of the 3.6 Node.js driver release include:

- Added support for the :ref:`MONGODB-AWS <mongodb-aws>` authentication mechanism using Amazon Web Services (AWS) Identity and Access Management (IAM) credentials
- Added support for Online Certificate Status Protocol (OCSP)
- The :node-api-4.0:`find()</classes/collection.html#find>` method supports ``allowDiskUse()`` for sorts that require too much memory to execute in RAM
- The :ref:`update() <updateDocuments>` and :ref:`replaceOne() <replacementDocument>` methods support index hints
- A reduction in recovery time for topology changes and failover events
- Improvements in validation testing for the default :manual:`writeConcern </reference/write-concern/>`
- Authentication requires fewer round trips to the server, resulting in faster connection setup
- Shorter Salted Challenge Response Authentication Mechanism (:manual:`SCRAM </core/security-scram/>`) conversations
- Ability to create collections and indexes for multiple document transactions
- Running validation for a collection in the background
